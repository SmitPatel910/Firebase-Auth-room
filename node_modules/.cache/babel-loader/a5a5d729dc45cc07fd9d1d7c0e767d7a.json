{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamingApiCaller = void 0;\n\nvar warnings_1 = require(\"../warnings\");\n\nvar streaming_1 = require(\"./streaming\");\n\nvar StreamingApiCaller = /*#__PURE__*/function () {\n  /**\n   * An API caller for methods of gRPC streaming.\n   * @private\n   * @constructor\n   * @param {StreamDescriptor} descriptor - the descriptor of the method structure.\n   */\n  function StreamingApiCaller(descriptor) {\n    _classCallCheck(this, StreamingApiCaller);\n\n    this.descriptor = descriptor;\n  }\n\n  _createClass(StreamingApiCaller, [{\n    key: \"init\",\n    value: function init(callback) {\n      return new streaming_1.StreamProxy(this.descriptor.type, callback);\n    }\n  }, {\n    key: \"wrap\",\n    value: function wrap(func) {\n      switch (this.descriptor.type) {\n        case streaming_1.StreamType.SERVER_STREAMING:\n          return function (argument, metadata, options) {\n            return func(argument, metadata, options);\n          };\n\n        case streaming_1.StreamType.CLIENT_STREAMING:\n          return function (argument, metadata, options, callback) {\n            return func(metadata, options, callback);\n          };\n\n        case streaming_1.StreamType.BIDI_STREAMING:\n          return function (argument, metadata, options) {\n            return func(metadata, options);\n          };\n\n        default:\n          warnings_1.warn('streaming_wrap_unknown_stream_type', \"Unknown stream type: \".concat(this.descriptor.type));\n      }\n\n      return func;\n    }\n  }, {\n    key: \"call\",\n    value: function call(apiCall, argument, settings, stream) {\n      stream.setStream(apiCall, argument, settings.retryRequestOptions);\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(stream, err) {\n      stream.emit('error', err);\n    }\n  }, {\n    key: \"result\",\n    value: function result(stream) {\n      return stream;\n    }\n  }]);\n\n  return StreamingApiCaller;\n}();\n\nexports.StreamingApiCaller = StreamingApiCaller;","map":null,"metadata":{},"sourceType":"script"}