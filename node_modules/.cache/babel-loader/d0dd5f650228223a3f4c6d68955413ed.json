{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LongrunningApiCaller = void 0;\n\nvar call_1 = require(\"../call\");\n\nvar gax_1 = require(\"../gax\");\n\nvar longrunning_1 = require(\"./longrunning\");\n\nvar LongrunningApiCaller = /*#__PURE__*/function () {\n  /**\n   * Creates an API caller that performs polling on a long running operation.\n   *\n   * @private\n   * @constructor\n   * @param {LongRunningDescriptor} longrunningDescriptor - Holds the\n   * decoders used for unpacking responses and the operationsClient\n   * used for polling the operation.\n   */\n  function LongrunningApiCaller(longrunningDescriptor) {\n    _classCallCheck(this, LongrunningApiCaller);\n\n    this.longrunningDescriptor = longrunningDescriptor;\n  }\n\n  _createClass(LongrunningApiCaller, [{\n    key: \"init\",\n    value: function init(callback) {\n      if (callback) {\n        return new call_1.OngoingCall(callback);\n      }\n\n      return new call_1.OngoingCallPromise();\n    }\n  }, {\n    key: \"wrap\",\n    value: function wrap(func) {\n      return func;\n    }\n  }, {\n    key: \"call\",\n    value: function call(apiCall, argument, settings, canceller) {\n      var _this = this;\n\n      canceller.call(function (argument, callback) {\n        return _this._wrapOperation(apiCall, settings, argument, callback);\n      }, argument);\n    }\n  }, {\n    key: \"_wrapOperation\",\n    value: function _wrapOperation(apiCall, settings, argument, callback) {\n      var backoffSettings = settings.longrunning;\n\n      if (!backoffSettings) {\n        backoffSettings = gax_1.createDefaultBackoffSettings();\n      }\n\n      var longrunningDescriptor = this.longrunningDescriptor;\n      return apiCall(argument, function (err, rawResponse) {\n        if (err) {\n          callback(err, null, null, rawResponse);\n          return;\n        }\n\n        var operation = new longrunning_1.Operation(rawResponse, longrunningDescriptor, backoffSettings, settings);\n        callback(null, operation, rawResponse);\n      });\n    }\n  }, {\n    key: \"fail\",\n    value: function fail(canceller, err) {\n      canceller.callback(err);\n    }\n  }, {\n    key: \"result\",\n    value: function result(canceller) {\n      return canceller.promise;\n    }\n  }]);\n\n  return LongrunningApiCaller;\n}();\n\nexports.LongrunningApiCaller = LongrunningApiCaller;","map":null,"metadata":{},"sourceType":"script"}