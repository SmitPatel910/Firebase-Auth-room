{"ast":null,"code":"\"use strict\";\n/**\n * Common type constants.\n * @namespace\n */\n\nvar types = exports;\n\nvar util = require(\"./util\");\n\nvar s = [\"double\", // 0\n\"float\", // 1\n\"int32\", // 2\n\"uint32\", // 3\n\"sint32\", // 4\n\"fixed32\", // 5\n\"sfixed32\", // 6\n\"int64\", // 7\n\"uint64\", // 8\n\"sint64\", // 9\n\"fixed64\", // 10\n\"sfixed64\", // 11\n\"bool\", // 12\n\"string\", // 13\n\"bytes\" // 14\n];\n\nfunction bake(values, offset) {\n  var i = 0,\n      o = {};\n  offset |= 0;\n\n  while (i < values.length) {\n    o[s[i + offset]] = values[i++];\n  }\n\n  return o;\n}\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\n\n\ntypes.basic = bake([\n/* double   */\n1,\n/* float    */\n5,\n/* int32    */\n0,\n/* uint32   */\n0,\n/* sint32   */\n0,\n/* fixed32  */\n5,\n/* sfixed32 */\n5,\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n1,\n/* sfixed64 */\n1,\n/* bool     */\n0,\n/* string   */\n2,\n/* bytes    */\n2]);\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\n\ntypes.defaults = bake([\n/* double   */\n0,\n/* float    */\n0,\n/* int32    */\n0,\n/* uint32   */\n0,\n/* sint32   */\n0,\n/* fixed32  */\n0,\n/* sfixed32 */\n0,\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n0,\n/* sfixed64 */\n0,\n/* bool     */\nfalse,\n/* string   */\n\"\",\n/* bytes    */\nutil.emptyArray,\n/* message  */\nnull]);\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\n\ntypes.long = bake([\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n1,\n/* sfixed64 */\n1], 7);\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\n\ntypes.mapKey = bake([\n/* int32    */\n0,\n/* uint32   */\n0,\n/* sint32   */\n0,\n/* fixed32  */\n5,\n/* sfixed32 */\n5,\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n1,\n/* sfixed64 */\n1,\n/* bool     */\n0,\n/* string   */\n2], 2);\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\n\ntypes.packed = bake([\n/* double   */\n1,\n/* float    */\n5,\n/* int32    */\n0,\n/* uint32   */\n0,\n/* sint32   */\n0,\n/* fixed32  */\n5,\n/* sfixed32 */\n5,\n/* int64    */\n0,\n/* uint64   */\n0,\n/* sint64   */\n0,\n/* fixed64  */\n1,\n/* sfixed64 */\n1,\n/* bool     */\n0]);","map":null,"metadata":{},"sourceType":"script"}