{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar crypto_1 = require(\"crypto\");\n\nvar gapicConfig = require(\"./v1/firestore_client_config.json\");\n/**\n * A Promise implementation that supports deferred resolution.\n * @private\n * @internal\n */\n\n\nvar Deferred = function Deferred() {\n  var _this = this;\n\n  _classCallCheck(this, Deferred);\n\n  this.resolve = function () {};\n\n  this.reject = function () {};\n\n  this.promise = new Promise(function (resolve, reject) {\n    _this.resolve = resolve;\n    _this.reject = reject;\n  });\n};\n\nexports.Deferred = Deferred;\n/**\n * Generate a unique client-side identifier.\n *\n * Used for the creation of new documents.\n *\n * @private\n * @internal\n * @returns {string} A unique 20-character wide identifier.\n */\n\nfunction autoId() {\n  var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var autoId = '';\n\n  while (autoId.length < 20) {\n    var bytes = crypto_1.randomBytes(40);\n    bytes.forEach(function (b) {\n      // Length of `chars` is 62. We only take bytes between 0 and 62*4-1\n      // (both inclusive). The value is then evenly mapped to indices of `char`\n      // via a modulo operation.\n      var maxValue = 62 * 4 - 1;\n\n      if (autoId.length < 20 && b <= maxValue) {\n        autoId += chars.charAt(b % 62);\n      }\n    });\n  }\n\n  return autoId;\n}\n\nexports.autoId = autoId;\n/**\n * Generate a short and semi-random client-side identifier.\n *\n * Used for the creation of request tags.\n *\n * @private\n * @internal\n * @returns {string} A random 5-character wide identifier.\n */\n\nfunction requestTag() {\n  return autoId().substr(0, 5);\n}\n\nexports.requestTag = requestTag;\n/**\n * Determines whether `value` is a JavaScript object.\n *\n * @private\n * @internal\n */\n\nfunction isObject(value) {\n  return Object.prototype.toString.call(value) === '[object Object]';\n}\n\nexports.isObject = isObject;\n/**\n * Verifies that 'obj' is a plain JavaScript object that can be encoded as a\n * 'Map' in Firestore.\n *\n * @private\n * @internal\n * @param input The argument to verify.\n * @returns 'true' if the input can be a treated as a plain object.\n */\n\nfunction isPlainObject(input) {\n  return isObject(input) && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null || input.constructor.name === 'Object');\n}\n\nexports.isPlainObject = isPlainObject;\n/**\n * Returns whether `value` has no custom properties.\n *\n * @private\n * @internal\n */\n\nfunction isEmpty(value) {\n  return Object.keys(value).length === 0;\n}\n\nexports.isEmpty = isEmpty;\n/**\n * Determines whether `value` is a JavaScript function.\n *\n * @private\n * @internal\n */\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nexports.isFunction = isFunction;\n/**\n * Determines whether the provided error is considered permanent for the given\n * RPC.\n *\n * @private\n * @internal\n */\n\nfunction isPermanentRpcError(err, methodName) {\n  if (err.code !== undefined) {\n    var retryCodes = getRetryCodes(methodName);\n    return retryCodes.indexOf(err.code) === -1;\n  } else {\n    return false;\n  }\n}\n\nexports.isPermanentRpcError = isPermanentRpcError;\nvar serviceConfig;\n/** Lazy-loads the service config when first accessed. */\n\nfunction getServiceConfig(methodName) {\n  if (!serviceConfig) {\n    serviceConfig = require('google-gax').constructSettings('google.firestore.v1.Firestore', gapicConfig, {}, require('google-gax').Status);\n  }\n\n  return serviceConfig[methodName];\n}\n/**\n * Returns the list of retryable error codes specified in the service\n * configuration.\n * @private\n * @internal\n */\n\n\nfunction getRetryCodes(methodName) {\n  var _a, _b, _c;\n\n  return (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.retryCodes) !== null && _c !== void 0 ? _c : [];\n}\n\nexports.getRetryCodes = getRetryCodes;\n/**\n * Returns the backoff setting from the service configuration.\n * @private\n * @internal\n */\n\nfunction getRetryParams(methodName) {\n  var _a, _b, _c;\n\n  return (_c = (_b = (_a = getServiceConfig(methodName)) === null || _a === void 0 ? void 0 : _a.retry) === null || _b === void 0 ? void 0 : _b.backoffSettings) !== null && _c !== void 0 ? _c : require('google-gax').createDefaultBackoffSettings();\n}\n\nexports.getRetryParams = getRetryParams;\n/**\n * Returns a promise with a void return type. The returned promise swallows all\n * errors and never throws.\n *\n * This is primarily used to wait for a promise to complete when the result of\n * the promise will be discarded.\n *\n * @private\n * @internal\n */\n\nfunction silencePromise(promise) {\n  return promise.then(function () {}, function () {});\n}\n\nexports.silencePromise = silencePromise;\n/**\n * Wraps the provided error in a new error that includes the provided stack.\n *\n * Used to preserve stack traces across async calls.\n * @private\n * @internal\n */\n\nfunction wrapError(err, stack) {\n  err.stack += '\\nCaused by: ' + stack;\n  return err;\n}\n\nexports.wrapError = wrapError;","map":null,"metadata":{},"sourceType":"script"}