{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AwsClient = void 0;\n\nvar awsrequestsigner_1 = require(\"./awsrequestsigner\");\n\nvar baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * AWS external account client. This is used for AWS workloads, where\n * AWS STS GetCallerIdentity serialized signed requests are exchanged for\n * GCP access token.\n */\n\n\nvar AwsClient = /*#__PURE__*/function (_baseexternalclient_) {\n  _inherits(AwsClient, _baseexternalclient_);\n\n  /**\n   * Instantiates an AwsClient instance using the provided JSON\n   * object loaded from an external account credentials file.\n   * An error is thrown if the credential is not a valid AWS credential.\n   * @param options The external account options object typically loaded\n   *   from the external account JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  function AwsClient(options, additionalOptions) {\n    var _this;\n\n    _classCallCheck(this, AwsClient);\n\n    var _a;\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AwsClient).call(this, options, additionalOptions));\n    _this.environmentId = options.credential_source.environment_id; // This is only required if the AWS region is not available in the\n    // AWS_REGION or AWS_DEFAULT_REGION environment variables.\n\n    _this.regionUrl = options.credential_source.region_url; // This is only required if AWS security credentials are not available in\n    // environment variables.\n\n    _this.securityCredentialsUrl = options.credential_source.url;\n    _this.regionalCredVerificationUrl = options.credential_source.regional_cred_verification_url;\n    var match = (_a = _this.environmentId) === null || _a === void 0 ? void 0 : _a.match(/^(aws)(\\d+)$/);\n\n    if (!match || !_this.regionalCredVerificationUrl) {\n      throw new Error('No valid AWS \"credential_source\" provided');\n    } else if (parseInt(match[2], 10) !== 1) {\n      throw new Error(\"aws version \\\"\".concat(match[2], \"\\\" is not supported in the current build.\"));\n    }\n\n    _this.awsRequestSigner = null;\n    _this.region = '';\n    return _this;\n  }\n  /**\n   * Triggered when an external subject token is needed to be exchanged for a\n   * GCP access token via GCP STS endpoint.\n   * This uses the `options.credential_source` object to figure out how\n   * to retrieve the token using the current environment. In this case,\n   * this uses a serialized AWS signed request to the STS GetCallerIdentity\n   * endpoint.\n   * The logic is summarized as:\n   * 1. Retrieve AWS region from availability-zone.\n   * 2a. Check AWS credentials in environment variables. If not found, get\n   *     from security-credentials endpoint.\n   * 2b. Get AWS credentials from security-credentials endpoint. In order\n   *     to retrieve this, the AWS role needs to be determined by calling\n   *     security-credentials endpoint without any argument. Then the\n   *     credentials can be retrieved via: security-credentials/role_name\n   * 3. Generate the signed request to AWS STS GetCallerIdentity action.\n   * 4. Inject x-goog-cloud-target-resource into header and serialize the\n   *    signed request. This will be the subject-token to pass to GCP STS.\n   * @return A promise that resolves with the external subject token.\n   */\n\n\n  _createClass(AwsClient, [{\n    key: \"retrieveSubjectToken\",\n    value: function () {\n      var _retrieveSubjectToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var options, reformattedHeader, extendedHeaders, key;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.awsRequestSigner) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                _context2.next = 3;\n                return this.getAwsRegion();\n\n              case 3:\n                this.region = _context2.sent;\n                this.awsRequestSigner = new awsrequestsigner_1.AwsRequestSigner( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  var roleName, awsCreds;\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          if (!(process.env['AWS_ACCESS_KEY_ID'] && process.env['AWS_SECRET_ACCESS_KEY'])) {\n                            _context.next = 2;\n                            break;\n                          }\n\n                          return _context.abrupt(\"return\", {\n                            accessKeyId: process.env['AWS_ACCESS_KEY_ID'],\n                            secretAccessKey: process.env['AWS_SECRET_ACCESS_KEY'],\n                            // This is normally not available for permanent credentials.\n                            token: process.env['AWS_SESSION_TOKEN']\n                          });\n\n                        case 2:\n                          _context.next = 4;\n                          return _this2.getAwsRoleName();\n\n                        case 4:\n                          roleName = _context.sent;\n                          _context.next = 7;\n                          return _this2.getAwsSecurityCredentials(roleName);\n\n                        case 7:\n                          awsCreds = _context.sent;\n                          return _context.abrupt(\"return\", {\n                            accessKeyId: awsCreds.AccessKeyId,\n                            secretAccessKey: awsCreds.SecretAccessKey,\n                            token: awsCreds.Token\n                          });\n\n                        case 9:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                })), this.region);\n\n              case 5:\n                _context2.next = 7;\n                return this.awsRequestSigner.getRequestOptions({\n                  url: this.regionalCredVerificationUrl.replace('{region}', this.region),\n                  method: 'POST'\n                });\n\n              case 7:\n                options = _context2.sent;\n                // The GCP STS endpoint expects the headers to be formatted as:\n                // [\n                //   {key: 'x-amz-date', value: '...'},\n                //   {key: 'Authorization', value: '...'},\n                //   ...\n                // ]\n                // And then serialized as:\n                // encodeURIComponent(JSON.stringify({\n                //   url: '...',\n                //   method: 'POST',\n                //   headers: [{key: 'x-amz-date', value: '...'}, ...]\n                // }))\n                reformattedHeader = [];\n                extendedHeaders = Object.assign({\n                  // The full, canonical resource name of the workload identity pool\n                  // provider, with or without the HTTPS prefix.\n                  // Including this header as part of the signature is recommended to\n                  // ensure data integrity.\n                  'x-goog-cloud-target-resource': this.audience\n                }, options.headers); // Reformat header to GCP STS expected format.\n\n                for (key in extendedHeaders) {\n                  reformattedHeader.push({\n                    key: key,\n                    value: extendedHeaders[key]\n                  });\n                } // Serialize the reformatted signed request.\n\n\n                return _context2.abrupt(\"return\", encodeURIComponent(JSON.stringify({\n                  url: options.url,\n                  method: options.method,\n                  headers: reformattedHeader\n                })));\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function retrieveSubjectToken() {\n        return _retrieveSubjectToken.apply(this, arguments);\n      }\n\n      return retrieveSubjectToken;\n    }()\n    /**\n     * @return A promise that resolves with the current AWS region.\n     */\n\n  }, {\n    key: \"getAwsRegion\",\n    value: function () {\n      var _getAwsRegion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var opts, response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION'])) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", process.env['AWS_REGION'] || process.env['AWS_DEFAULT_REGION']);\n\n              case 2:\n                if (this.regionUrl) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                throw new Error('Unable to determine AWS region due to missing ' + '\"options.credential_source.region_url\"');\n\n              case 4:\n                opts = {\n                  url: this.regionUrl,\n                  method: 'GET',\n                  responseType: 'text'\n                };\n                _context3.next = 7;\n                return this.transporter.request(opts);\n\n              case 7:\n                response = _context3.sent;\n                return _context3.abrupt(\"return\", response.data.substr(0, response.data.length - 1));\n\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getAwsRegion() {\n        return _getAwsRegion.apply(this, arguments);\n      }\n\n      return getAwsRegion;\n    }()\n    /**\n     * @return A promise that resolves with the assigned role to the current\n     *   AWS VM. This is needed for calling the security-credentials endpoint.\n     */\n\n  }, {\n    key: \"getAwsRoleName\",\n    value: function () {\n      var _getAwsRoleName = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var opts, response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (this.securityCredentialsUrl) {\n                  _context4.next = 2;\n                  break;\n                }\n\n                throw new Error('Unable to determine AWS role name due to missing ' + '\"options.credential_source.url\"');\n\n              case 2:\n                opts = {\n                  url: this.securityCredentialsUrl,\n                  method: 'GET',\n                  responseType: 'text'\n                };\n                _context4.next = 5;\n                return this.transporter.request(opts);\n\n              case 5:\n                response = _context4.sent;\n                return _context4.abrupt(\"return\", response.data);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getAwsRoleName() {\n        return _getAwsRoleName.apply(this, arguments);\n      }\n\n      return getAwsRoleName;\n    }()\n    /**\n     * Retrieves the temporary AWS credentials by calling the security-credentials\n     * endpoint as specified in the `credential_source` object.\n     * @param roleName The role attached to the current VM.\n     * @return A promise that resolves with the temporary AWS credentials\n     *   needed for creating the GetCallerIdentity signed request.\n     */\n\n  }, {\n    key: \"getAwsSecurityCredentials\",\n    value: function () {\n      var _getAwsSecurityCredentials = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(roleName) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this.transporter.request({\n                  url: \"\".concat(this.securityCredentialsUrl, \"/\").concat(roleName),\n                  responseType: 'json'\n                });\n\n              case 2:\n                response = _context5.sent;\n                return _context5.abrupt(\"return\", response.data);\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getAwsSecurityCredentials(_x) {\n        return _getAwsSecurityCredentials.apply(this, arguments);\n      }\n\n      return getAwsSecurityCredentials;\n    }()\n  }]);\n\n  return AwsClient;\n}(baseexternalclient_1.BaseExternalAccountClient);\n\nexports.AwsClient = AwsClient;","map":null,"metadata":{},"sourceType":"script"}