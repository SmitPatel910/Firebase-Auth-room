{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProjectManagement = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar android_app_1 = require(\"./android-app\");\n\nvar ios_app_1 = require(\"./ios-app\");\n\nvar project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\n\nvar index_1 = require(\"./index\");\n\nvar AppPlatform = index_1.projectManagement.AppPlatform;\n/**\n * The Firebase ProjectManagement service interface.\n *\n * Do not call this constructor directly. Instead, use\n * [`admin.projectManagement()`](projectManagement#projectManagement).\n */\n\nvar ProjectManagement =\n/** @class */\nfunction () {\n  /**\n   * @param {object} app The app for this ProjectManagement service.\n   * @constructor\n   */\n  function ProjectManagement(app) {\n    this.app = app;\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app ' + 'instance.');\n    }\n\n    this.requestHandler = new project_management_api_request_internal_1.ProjectManagementRequestHandler(app);\n  }\n  /**\n   * Lists up to 100 Firebase Android apps associated with this Firebase project.\n   *\n   * @return The list of Android apps.\n   */\n\n\n  ProjectManagement.prototype.listAndroidApps = function () {\n    return this.listPlatformApps('android', 'listAndroidApps()');\n  };\n  /**\n   * Lists up to 100 Firebase iOS apps associated with this Firebase project.\n   *\n   * @return The list of iOS apps.\n   */\n\n\n  ProjectManagement.prototype.listIosApps = function () {\n    return this.listPlatformApps('ios', 'listIosApps()');\n  };\n  /**\n   * Creates an `AndroidApp` object, referencing the specified Android app within\n   * this Firebase project.\n   *\n   * This method does not perform an RPC.\n   *\n   * @param appId The `appId` of the Android app to reference.\n   *\n   * @return An `AndroidApp` object that references the specified Firebase Android app.\n   */\n\n\n  ProjectManagement.prototype.androidApp = function (appId) {\n    return new android_app_1.AndroidApp(appId, this.requestHandler);\n  };\n  /**\n   * Creates an `iOSApp` object, referencing the specified iOS app within\n   * this Firebase project.\n   *\n   * This method does not perform an RPC.\n   *\n   * @param appId The `appId` of the iOS app to reference.\n   *\n   * @return An `iOSApp` object that references the specified Firebase iOS app.\n   */\n\n\n  ProjectManagement.prototype.iosApp = function (appId) {\n    return new ios_app_1.IosApp(appId, this.requestHandler);\n  };\n  /**\n   * Creates a `ShaCertificate` object.\n   *\n   * This method does not perform an RPC.\n   *\n   * @param shaHash The SHA-1 or SHA-256 hash for this certificate.\n   *\n   * @return A `ShaCertificate` object contains the specified SHA hash.\n   */\n\n\n  ProjectManagement.prototype.shaCertificate = function (shaHash) {\n    return new android_app_1.ShaCertificate(shaHash);\n  };\n  /**\n   * Creates a new Firebase Android app associated with this Firebase project.\n   *\n   * @param packageName The canonical package name of the Android App,\n   *     as would appear in the Google Play Developer Console.\n   * @param displayName An optional user-assigned display name for this\n   *     new app.\n   *\n   * @return A promise that resolves to the newly created Android app.\n   */\n\n\n  ProjectManagement.prototype.createAndroidApp = function (packageName, displayName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.createAndroidApp(resourceName, packageName, displayName);\n    }).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createAndroidApp()\\'s response data.');\n      return new android_app_1.AndroidApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\n   * Creates a new Firebase iOS app associated with this Firebase project.\n   *\n   * @param bundleId The iOS app bundle ID to use for this new app.\n   * @param displayName An optional user-assigned display name for this\n   *     new app.\n   *\n   * @return A promise that resolves to the newly created iOS app.\n   */\n\n\n  ProjectManagement.prototype.createIosApp = function (bundleId, displayName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.createIosApp(resourceName, bundleId, displayName);\n    }).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createIosApp()\\'s response data.');\n      return new ios_app_1.IosApp(responseData.appId, _this.requestHandler);\n    });\n  };\n  /**\n   * Lists up to 100 Firebase apps associated with this Firebase project.\n   *\n   * @return A promise that resolves to the metadata list of the apps.\n   */\n\n\n  ProjectManagement.prototype.listAppMetadata = function () {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.listAppMetadata(resourceName);\n    }).then(function (responseData) {\n      return _this.getProjectId().then(function (projectId) {\n        return _this.transformResponseToAppMetadata(responseData, projectId);\n      });\n    });\n  };\n  /**\n   * Update the display name of this Firebase project.\n   *\n   * @param newDisplayName The new display name to be updated.\n   *\n   * @return A promise that resolves when the project display name has been updated.\n   */\n\n\n  ProjectManagement.prototype.setDisplayName = function (newDisplayName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return _this.requestHandler.setDisplayName(resourceName, newDisplayName);\n    });\n  };\n\n  ProjectManagement.prototype.transformResponseToAppMetadata = function (responseData, projectId) {\n    this.assertListAppsResponseData(responseData, 'listAppMetadata()');\n\n    if (!responseData.apps) {\n      return [];\n    }\n\n    return responseData.apps.map(function (appJson) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, '\"apps[].appId\" field must be present in the listAppMetadata() response data.');\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.platform), responseData, '\"apps[].platform\" field must be present in the listAppMetadata() response data.');\n      var metadata = {\n        appId: appJson.appId,\n        platform: AppPlatform[appJson.platform] || AppPlatform.PLATFORM_UNKNOWN,\n        projectId: projectId,\n        resourceName: appJson.name\n      };\n\n      if (appJson.displayName) {\n        metadata.displayName = appJson.displayName;\n      }\n\n      return metadata;\n    });\n  };\n\n  ProjectManagement.prototype.getResourceName = function () {\n    return this.getProjectId().then(function (projectId) {\n      return \"projects/\" + projectId;\n    });\n  };\n\n  ProjectManagement.prototype.getProjectId = function () {\n    var _this = this;\n\n    if (this.projectId) {\n      return Promise.resolve(this.projectId);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      // Assert that a specific project ID was provided within the app.\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n\n      _this.projectId = projectId;\n      return _this.projectId;\n    });\n  };\n  /**\n   * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\n   */\n\n\n  ProjectManagement.prototype.listPlatformApps = function (platform, callerName) {\n    var _this = this;\n\n    return this.getResourceName().then(function (resourceName) {\n      return platform === 'android' ? _this.requestHandler.listAndroidApps(resourceName) : _this.requestHandler.listIosApps(resourceName);\n    }).then(function (responseData) {\n      _this.assertListAppsResponseData(responseData, callerName);\n\n      if (!responseData.apps) {\n        return [];\n      }\n\n      return responseData.apps.map(function (appJson) {\n        project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(appJson.appId), responseData, \"\\\"apps[].appId\\\" field must be present in the \" + callerName + \" response data.\");\n\n        if (platform === 'android') {\n          return new android_app_1.AndroidApp(appJson.appId, _this.requestHandler);\n        } else {\n          return new ios_app_1.IosApp(appJson.appId, _this.requestHandler);\n        }\n      });\n    });\n  };\n\n  ProjectManagement.prototype.assertListAppsResponseData = function (responseData, callerName) {\n    project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, callerName + \"'s responseData must be a non-null object.\");\n\n    if (responseData.apps) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isArray(responseData.apps), responseData, \"\\\"apps\\\" field must be present in the \" + callerName + \" response data.\");\n    }\n  };\n\n  return ProjectManagement;\n}();\n\nexports.ProjectManagement = ProjectManagement;","map":null,"metadata":{},"sourceType":"script"}