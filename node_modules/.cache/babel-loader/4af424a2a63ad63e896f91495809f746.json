{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SigningError = exports.URLSigner = exports.PATH_STYLED_HOST = void 0;\n\nvar crypto = require(\"crypto\");\n\nvar dateFormat = require(\"date-and-time\");\n\nvar url = require(\"url\");\n\nvar util_1 = require(\"./util\");\n/*\n * Default signing version for getSignedUrl is 'v2'.\n */\n\n\nvar DEFAULT_SIGNING_VERSION = 'v2';\nvar SEVEN_DAYS = 604800;\n/**\n * @const {string}\n * @private\n */\n\nexports.PATH_STYLED_HOST = 'https://storage.googleapis.com';\n\nvar URLSigner = /*#__PURE__*/function () {\n  function URLSigner(authClient, bucket, file) {\n    _classCallCheck(this, URLSigner);\n\n    this.bucket = bucket;\n    this.file = file;\n    this.authClient = authClient;\n  }\n\n  _createClass(URLSigner, [{\n    key: \"getSignedUrl\",\n    value: function getSignedUrl(cfg) {\n      var _this = this;\n\n      var expiresInSeconds = this.parseExpires(cfg.expires);\n      var method = cfg.method;\n      var accessibleAtInSeconds = this.parseAccessibleAt(cfg.accessibleAt);\n\n      if (expiresInSeconds < accessibleAtInSeconds) {\n        throw new Error('An expiration date cannot be before accessible date.');\n      }\n\n      var customHost; // Default style is `path`.\n\n      var isVirtualHostedStyle = cfg.virtualHostedStyle || false;\n\n      if (cfg.cname) {\n        customHost = cfg.cname;\n      } else if (isVirtualHostedStyle) {\n        customHost = \"https://\".concat(this.bucket.name, \".storage.googleapis.com\");\n      }\n\n      var secondsToMilliseconds = 1000;\n      var config = Object.assign({}, cfg, {\n        method: method,\n        expiration: expiresInSeconds,\n        accessibleAt: new Date(secondsToMilliseconds * accessibleAtInSeconds),\n        bucket: this.bucket.name,\n        file: this.file ? util_1.encodeURI(this.file.name, false) : undefined\n      });\n\n      if (customHost) {\n        config.cname = customHost;\n      }\n\n      var version = cfg.version || DEFAULT_SIGNING_VERSION;\n      var promise;\n\n      if (version === 'v2') {\n        promise = this.getSignedUrlV2(config);\n      } else if (version === 'v4') {\n        promise = this.getSignedUrlV4(config);\n      } else {\n        throw new Error(\"Invalid signed URL version: \".concat(version, \". Supported versions are 'v2' and 'v4'.\"));\n      }\n\n      return promise.then(function (query) {\n        query = Object.assign(query, cfg.queryParams);\n        var signedUrl = new url.URL(config.cname || exports.PATH_STYLED_HOST);\n        signedUrl.pathname = _this.getResourcePath(!!config.cname, _this.bucket.name, config.file); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n        signedUrl.search = util_1.qsStringify(query);\n        return signedUrl.href;\n      });\n    }\n  }, {\n    key: \"getSignedUrlV2\",\n    value: function getSignedUrlV2(config) {\n      var _this2 = this;\n\n      var canonicalHeadersString = this.getCanonicalHeaders(config.extensionHeaders || {});\n      var resourcePath = this.getResourcePath(false, config.bucket, config.file);\n      var blobToSign = [config.method, config.contentMd5 || '', config.contentType || '', config.expiration, canonicalHeadersString + resourcePath].join('\\n');\n\n      var sign = /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var authClient, signature, credentials, signingErr;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  authClient = _this2.authClient;\n                  _context.prev = 1;\n                  _context.next = 4;\n                  return authClient.sign(blobToSign);\n\n                case 4:\n                  signature = _context.sent;\n                  _context.next = 7;\n                  return authClient.getCredentials();\n\n                case 7:\n                  credentials = _context.sent;\n                  return _context.abrupt(\"return\", {\n                    GoogleAccessId: credentials.client_email,\n                    Expires: config.expiration,\n                    Signature: signature\n                  });\n\n                case 11:\n                  _context.prev = 11;\n                  _context.t0 = _context[\"catch\"](1);\n                  signingErr = new SigningError(_context.t0.message);\n                  signingErr.stack = _context.t0.stack;\n                  throw signingErr;\n\n                case 16:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[1, 11]]);\n        }));\n\n        return function sign() {\n          return _ref.apply(this, arguments);\n        };\n      }();\n\n      return sign();\n    }\n  }, {\n    key: \"getSignedUrlV4\",\n    value: function getSignedUrlV4(config) {\n      var _this3 = this;\n\n      config.accessibleAt = config.accessibleAt ? config.accessibleAt : new Date();\n      var millisecondsToSeconds = 1.0 / 1000.0;\n      var expiresPeriodInSeconds = config.expiration - config.accessibleAt.valueOf() * millisecondsToSeconds; // v4 limit expiration to be 7 days maximum\n\n      if (expiresPeriodInSeconds > SEVEN_DAYS) {\n        throw new Error(\"Max allowed expiration is seven days (\".concat(SEVEN_DAYS, \" seconds).\"));\n      }\n\n      var extensionHeaders = Object.assign({}, config.extensionHeaders);\n      var fqdn = new url.URL(config.cname || exports.PATH_STYLED_HOST);\n      extensionHeaders.host = fqdn.host;\n\n      if (config.contentMd5) {\n        extensionHeaders['content-md5'] = config.contentMd5;\n      }\n\n      if (config.contentType) {\n        extensionHeaders['content-type'] = config.contentType;\n      }\n\n      var contentSha256;\n      var sha256Header = extensionHeaders['x-goog-content-sha256'];\n\n      if (sha256Header) {\n        if (typeof sha256Header !== 'string' || !/[A-Fa-f0-9]{40}/.test(sha256Header)) {\n          throw new Error('The header X-Goog-Content-SHA256 must be a hexadecimal string.');\n        }\n\n        contentSha256 = sha256Header;\n      }\n\n      var signedHeaders = Object.keys(extensionHeaders).map(function (header) {\n        return header.toLowerCase();\n      }).sort().join(';');\n      var extensionHeadersString = this.getCanonicalHeaders(extensionHeaders);\n      var datestamp = dateFormat.format(config.accessibleAt, 'YYYYMMDD', true);\n      var credentialScope = \"\".concat(datestamp, \"/auto/storage/goog4_request\");\n\n      var sign = /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n          var credentials, credential, dateISO, queryParams, canonicalQueryParams, canonicalRequest, hash, blobToSign, signature, signatureHex, signedQuery, signingErr;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return _this3.authClient.getCredentials();\n\n                case 2:\n                  credentials = _context2.sent;\n                  credential = \"\".concat(credentials.client_email, \"/\").concat(credentialScope);\n                  dateISO = dateFormat.format(config.accessibleAt ? config.accessibleAt : new Date(), 'YYYYMMDD[T]HHmmss[Z]', true);\n                  queryParams = _objectSpread({\n                    'X-Goog-Algorithm': 'GOOG4-RSA-SHA256',\n                    'X-Goog-Credential': credential,\n                    'X-Goog-Date': dateISO,\n                    'X-Goog-Expires': expiresPeriodInSeconds.toString(10),\n                    'X-Goog-SignedHeaders': signedHeaders\n                  }, config.queryParams || {}); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                  canonicalQueryParams = _this3.getCanonicalQueryParams(queryParams);\n                  canonicalRequest = _this3.getCanonicalRequest(config.method, _this3.getResourcePath(!!config.cname, config.bucket, config.file), canonicalQueryParams, extensionHeadersString, signedHeaders, contentSha256);\n                  hash = crypto.createHash('sha256').update(canonicalRequest).digest('hex');\n                  blobToSign = ['GOOG4-RSA-SHA256', dateISO, credentialScope, hash].join('\\n');\n                  _context2.prev = 10;\n                  _context2.next = 13;\n                  return _this3.authClient.sign(blobToSign);\n\n                case 13:\n                  signature = _context2.sent;\n                  signatureHex = Buffer.from(signature, 'base64').toString('hex');\n                  signedQuery = Object.assign({}, queryParams, {\n                    'X-Goog-Signature': signatureHex\n                  });\n                  return _context2.abrupt(\"return\", signedQuery);\n\n                case 19:\n                  _context2.prev = 19;\n                  _context2.t0 = _context2[\"catch\"](10);\n                  signingErr = new SigningError(_context2.t0.message);\n                  signingErr.stack = _context2.t0.stack;\n                  throw signingErr;\n\n                case 24:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, null, [[10, 19]]);\n        }));\n\n        return function sign() {\n          return _ref2.apply(this, arguments);\n        };\n      }();\n\n      return sign();\n    }\n    /**\n     * Create canonical headers for signing v4 url.\n     *\n     * The canonical headers for v4-signing a request demands header names are\n     * first lowercased, followed by sorting the header names.\n     * Then, construct the canonical headers part of the request:\n     *  <lowercasedHeaderName> + \":\" + Trim(<value>) + \"\\n\"\n     *  ..\n     *  <lowercasedHeaderName> + \":\" + Trim(<value>) + \"\\n\"\n     *\n     * @param headers\n     * @private\n     */\n\n  }, {\n    key: \"getCanonicalHeaders\",\n    value: function getCanonicalHeaders(headers) {\n      // Sort headers by their lowercased names\n      var sortedHeaders = util_1.objectEntries(headers) // Convert header names to lowercase\n      .map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            headerName = _ref4[0],\n            value = _ref4[1];\n\n        return [headerName.toLowerCase(), value];\n      }).sort(function (a, b) {\n        return a[0].localeCompare(b[0]);\n      });\n      return sortedHeaders.filter(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            value = _ref6[1];\n\n        return value !== undefined;\n      }).map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            headerName = _ref8[0],\n            value = _ref8[1];\n\n        // - Convert Array (multi-valued header) into string, delimited by\n        //      ',' (no space).\n        // - Trim leading and trailing spaces.\n        // - Convert sequential (2+) spaces into a single space\n        var canonicalValue = \"\".concat(value).trim().replace(/\\s{2,}/g, ' ');\n        return \"\".concat(headerName, \":\").concat(canonicalValue, \"\\n\");\n      }).join('');\n    }\n  }, {\n    key: \"getCanonicalRequest\",\n    value: function getCanonicalRequest(method, path, query, headers, signedHeaders, contentSha256) {\n      return [method, path, query, headers, signedHeaders, contentSha256 || 'UNSIGNED-PAYLOAD'].join('\\n');\n    }\n  }, {\n    key: \"getCanonicalQueryParams\",\n    value: function getCanonicalQueryParams(query) {\n      return util_1.objectEntries(query).map(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 2),\n            key = _ref10[0],\n            value = _ref10[1];\n\n        return [util_1.encodeURI(key, true), util_1.encodeURI(value, true)];\n      }).sort(function (a, b) {\n        return a[0] < b[0] ? -1 : 1;\n      }).map(function (_ref11) {\n        var _ref12 = _slicedToArray(_ref11, 2),\n            key = _ref12[0],\n            value = _ref12[1];\n\n        return \"\".concat(key, \"=\").concat(value);\n      }).join('&');\n    }\n  }, {\n    key: \"getResourcePath\",\n    value: function getResourcePath(cname, bucket, file) {\n      if (cname) {\n        return '/' + (file || '');\n      } else if (file) {\n        return \"/\".concat(bucket, \"/\").concat(file);\n      } else {\n        return \"/\".concat(bucket);\n      }\n    }\n  }, {\n    key: \"parseExpires\",\n    value: function parseExpires(expires) {\n      var current = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : new Date();\n      var expiresInMSeconds = new Date(expires).valueOf();\n\n      if (isNaN(expiresInMSeconds)) {\n        throw new Error('The expiration date provided was invalid.');\n      }\n\n      if (expiresInMSeconds < current.valueOf()) {\n        throw new Error('An expiration date cannot be in the past.');\n      }\n\n      return Math.round(expiresInMSeconds / 1000); // The API expects seconds.\n    }\n  }, {\n    key: \"parseAccessibleAt\",\n    value: function parseAccessibleAt(accessibleAt) {\n      var accessibleAtInMSeconds = new Date(accessibleAt || new Date()).valueOf();\n\n      if (isNaN(accessibleAtInMSeconds)) {\n        throw new Error('The accessible at date provided was invalid.');\n      }\n\n      return Math.floor(accessibleAtInMSeconds / 1000); // The API expects seconds.\n    }\n  }]);\n\n  return URLSigner;\n}();\n\nexports.URLSigner = URLSigner;\n/**\n * Custom error type for errors related to getting signed errors and policies.\n *\n * @private\n */\n\nvar SigningError = /*#__PURE__*/function (_Error) {\n  _inherits(SigningError, _Error);\n\n  function SigningError() {\n    var _this4;\n\n    _classCallCheck(this, SigningError);\n\n    _this4 = _possibleConstructorReturn(this, _getPrototypeOf(SigningError).apply(this, arguments));\n    _this4.name = 'SigningError';\n    return _this4;\n  }\n\n  return SigningError;\n}(_wrapNativeSuper(Error));\n\nexports.SigningError = SigningError;","map":null,"metadata":{},"sourceType":"script"}