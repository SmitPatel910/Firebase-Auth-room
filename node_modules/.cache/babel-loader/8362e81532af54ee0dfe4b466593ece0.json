{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseNamespace = exports.FirebaseNamespaceInternals = exports.FIREBASE_CONFIG_VAR = void 0;\n\nvar fs = require(\"fs\");\n\nvar error_1 = require(\"./utils/error\");\n\nvar firebase_app_1 = require(\"./firebase-app\");\n\nvar credential_1 = require(\"./credential/credential\");\n\nvar credential_internal_1 = require(\"./credential/credential-internal\");\n\nvar validator = require(\"./utils/validator\");\n\nvar index_1 = require(\"./utils/index\");\n\nvar DEFAULT_APP_NAME = '[DEFAULT]';\n/**\n * Constant holding the environment variable name with the default config.\n * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n * otherwise it will be assumed to be pointing to a file.\n */\n\nexports.FIREBASE_CONFIG_VAR = 'FIREBASE_CONFIG';\n/**\n * Internals of a FirebaseNamespace instance.\n */\n\nvar FirebaseNamespaceInternals =\n/** @class */\nfunction () {\n  function FirebaseNamespaceInternals(firebase_) {\n    this.firebase_ = firebase_;\n    this.apps_ = {};\n  }\n  /**\n   * Initializes the App instance.\n   *\n   * @param options Optional options for the App instance. If none present will try to initialize\n   *   from the FIREBASE_CONFIG environment variable. If the environment variable contains a string\n   *   that starts with '{' it will be parsed as JSON, otherwise it will be assumed to be pointing\n   *   to a file.\n   * @param appName Optional name of the FirebaseApp instance.\n   *\n   * @return A new App instance.\n   */\n\n\n  FirebaseNamespaceInternals.prototype.initializeApp = function (options, appName) {\n    if (appName === void 0) {\n      appName = DEFAULT_APP_NAME;\n    }\n\n    if (typeof options === 'undefined') {\n      options = this.loadOptionsFromEnvVar();\n      options.credential = credential_internal_1.getApplicationDefault();\n    }\n\n    if (typeof appName !== 'string' || appName === '') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n    } else if (appName in this.apps_) {\n      if (appName === DEFAULT_APP_NAME) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, 'The default Firebase app already exists. This means you called initializeApp() ' + 'more than once without providing an app name as the second argument. In most cases ' + 'you only need to call initializeApp() once. But if you do want to initialize ' + 'multiple apps, pass a second argument to initializeApp() to give each app a unique ' + 'name.');\n      } else {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.DUPLICATE_APP, \"Firebase app named \\\"\" + appName + \"\\\" already exists. This means you called initializeApp() \" + 'more than once with the same app name as the second argument. Make sure you provide a ' + 'unique name every time you call initializeApp().');\n      }\n    }\n\n    var app = new firebase_app_1.FirebaseApp(options, appName, this);\n    this.apps_[appName] = app;\n    return app;\n  };\n  /**\n   * Returns the App instance with the provided name (or the default App instance\n   * if no name is provided).\n   *\n   * @param appName Optional name of the FirebaseApp instance to return.\n   * @return The App instance which has the provided name.\n   */\n\n\n  FirebaseNamespaceInternals.prototype.app = function (appName) {\n    if (appName === void 0) {\n      appName = DEFAULT_APP_NAME;\n    }\n\n    if (typeof appName !== 'string' || appName === '') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, \"Invalid Firebase app name \\\"\" + appName + \"\\\" provided. App name must be a non-empty string.\");\n    } else if (!(appName in this.apps_)) {\n      var errorMessage = appName === DEFAULT_APP_NAME ? 'The default Firebase app does not exist. ' : \"Firebase app named \\\"\" + appName + \"\\\" does not exist. \";\n      errorMessage += 'Make sure you call initializeApp() before using any of the Firebase services.';\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.NO_APP, errorMessage);\n    }\n\n    return this.apps_[appName];\n  };\n\n  Object.defineProperty(FirebaseNamespaceInternals.prototype, \"apps\", {\n    /*\n     * Returns an array of all the non-deleted App instances.\n     */\n    get: function get() {\n      var _this = this; // Return a copy so the caller cannot mutate the array\n\n\n      return Object.keys(this.apps_).map(function (appName) {\n        return _this.apps_[appName];\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /*\n   * Removes the specified App instance.\n   */\n\n  FirebaseNamespaceInternals.prototype.removeApp = function (appName) {\n    if (typeof appName === 'undefined') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_NAME, 'No Firebase app name provided. App name must be a non-empty string.');\n    }\n\n    var appToRemove = this.app(appName);\n    delete this.apps_[appToRemove.name];\n  };\n  /**\n   * Parse the file pointed to by the FIREBASE_CONFIG_VAR, if it exists.\n   * Or if the FIREBASE_CONFIG_ENV contains a valid JSON object, parse it directly.\n   * If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n   * otherwise it will be assumed to be pointing to a file.\n   */\n\n\n  FirebaseNamespaceInternals.prototype.loadOptionsFromEnvVar = function () {\n    var config = process.env[exports.FIREBASE_CONFIG_VAR];\n\n    if (!validator.isNonEmptyString(config)) {\n      return {};\n    }\n\n    try {\n      var contents = config.startsWith('{') ? config : fs.readFileSync(config, 'utf8');\n      return JSON.parse(contents);\n    } catch (error) {\n      // Throw a nicely formed error message if the file contents cannot be parsed\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Failed to parse app options file: ' + error);\n    }\n  };\n\n  return FirebaseNamespaceInternals;\n}();\n\nexports.FirebaseNamespaceInternals = FirebaseNamespaceInternals;\nvar firebaseCredential = {\n  cert: credential_1.cert,\n  refreshToken: credential_1.refreshToken,\n  applicationDefault: credential_1.applicationDefault\n};\n/**\n * Global Firebase context object.\n */\n\nvar FirebaseNamespace =\n/** @class */\nfunction () {\n  /* tslint:enable */\n  function FirebaseNamespace() {\n    // Hack to prevent Babel from modifying the object returned as the default admin namespace.\n\n    /* tslint:disable:variable-name */\n    this.__esModule = true;\n    /* tslint:enable:variable-name */\n\n    this.credential = firebaseCredential;\n    this.SDK_VERSION = index_1.getSdkVersion();\n    /* tslint:disable */\n    // TODO(jwenger): Database is the only consumer of firebase.Promise. We should update it to use\n    // use the native Promise and then remove this.\n\n    this.Promise = Promise;\n    this.INTERNAL = new FirebaseNamespaceInternals(this);\n  }\n\n  Object.defineProperty(FirebaseNamespace.prototype, \"auth\", {\n    /**\n     * Gets the `Auth` service namespace. The returned namespace can be used to get the\n     * `Auth` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).auth();\n      };\n\n      var auth = require('./auth/auth').Auth;\n\n      return Object.assign(fn, {\n        Auth: auth\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"database\", {\n    /**\n     * Gets the `Database` service namespace. The returned namespace can be used to get the\n     * `Database` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).database();\n      }; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\n      return Object.assign(fn, require('@firebase/database'));\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"messaging\", {\n    /**\n     * Gets the `Messaging` service namespace. The returned namespace can be used to get the\n     * `Messaging` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).messaging();\n      };\n\n      var messaging = require('./messaging/messaging').Messaging;\n\n      return Object.assign(fn, {\n        Messaging: messaging\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"storage\", {\n    /**\n     * Gets the `Storage` service namespace. The returned namespace can be used to get the\n     * `Storage` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).storage();\n      };\n\n      var storage = require('./storage/storage').Storage;\n\n      return Object.assign(fn, {\n        Storage: storage\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"firestore\", {\n    /**\n     * Gets the `Firestore` service namespace. The returned namespace can be used to get the\n     * `Firestore` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).firestore();\n      }; // eslint-disable-next-line @typescript-eslint/no-var-requires\n\n\n      var firestore = require('@google-cloud/firestore');\n\n      fn = Object.assign(fn, firestore.Firestore); // `v1beta1` and `v1` are lazy-loaded in the Firestore SDK. We use the same trick here\n      // to avoid triggering this lazy-loading upon initialization.\n\n      Object.defineProperty(fn, 'v1beta1', {\n        get: function get() {\n          return firestore.v1beta1;\n        }\n      });\n      Object.defineProperty(fn, 'v1', {\n        get: function get() {\n          return firestore.v1;\n        }\n      });\n      return fn;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"machineLearning\", {\n    /**\n     * Gets the `MachineLearning` service namespace. The returned namespace can be\n     * used to get the `MachineLearning` service for the default app or an\n     * explicityly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).machineLearning();\n      };\n\n      var machineLearning = require('./machine-learning/machine-learning').MachineLearning;\n\n      return Object.assign(fn, {\n        MachineLearning: machineLearning\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"installations\", {\n    /**\n     * Gets the `Installations` service namespace. The returned namespace can be used to get the\n     * `Installations` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).installations();\n      };\n\n      var installations = require('./installations/installations').Installations;\n\n      return Object.assign(fn, {\n        Installations: installations\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"instanceId\", {\n    /**\n     * Gets the `InstanceId` service namespace. The returned namespace can be used to get the\n     * `Instance` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).instanceId();\n      };\n\n      var instanceId = require('./instance-id/instance-id').InstanceId;\n\n      return Object.assign(fn, {\n        InstanceId: instanceId\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"projectManagement\", {\n    /**\n     * Gets the `ProjectManagement` service namespace. The returned namespace can be used to get the\n     * `ProjectManagement` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).projectManagement();\n      };\n\n      var projectManagement = require('./project-management/project-management').ProjectManagement;\n\n      return Object.assign(fn, {\n        ProjectManagement: projectManagement\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"securityRules\", {\n    /**\n     * Gets the `SecurityRules` service namespace. The returned namespace can be used to get the\n     * `SecurityRules` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).securityRules();\n      };\n\n      var securityRules = require('./security-rules/security-rules').SecurityRules;\n\n      return Object.assign(fn, {\n        SecurityRules: securityRules\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"remoteConfig\", {\n    /**\n     * Gets the `RemoteConfig` service namespace. The returned namespace can be used to get the\n     * `RemoteConfig` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).remoteConfig();\n      };\n\n      var remoteConfig = require('./remote-config/remote-config').RemoteConfig;\n\n      return Object.assign(fn, {\n        RemoteConfig: remoteConfig\n      });\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseNamespace.prototype, \"appCheck\", {\n    /**\n     * Gets the `AppCheck` service namespace. The returned namespace can be used to get the\n     * `AppCheck` service for the default app or an explicitly specified app.\n     */\n    get: function get() {\n      var _this = this;\n\n      var fn = function fn(app) {\n        return _this.ensureApp(app).appCheck();\n      };\n\n      var appCheck = require('./app-check/app-check').AppCheck;\n\n      return Object.assign(fn, {\n        AppCheck: appCheck\n      });\n    },\n    enumerable: false,\n    configurable: true\n  }); // TODO: Change the return types to app.App in the following methods.\n\n  /**\n   * Initializes the FirebaseApp instance.\n   *\n   * @param options Optional options for the FirebaseApp instance.\n   *   If none present will try to initialize from the FIREBASE_CONFIG environment variable.\n   *   If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n   *   otherwise it will be assumed to be pointing to a file.\n   * @param appName Optional name of the FirebaseApp instance.\n   *\n   * @return A new FirebaseApp instance.\n   */\n\n  FirebaseNamespace.prototype.initializeApp = function (options, appName) {\n    return this.INTERNAL.initializeApp(options, appName);\n  };\n  /**\n   * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\n   * if no name is provided).\n   *\n   * @param appName Optional name of the FirebaseApp instance to return.\n   * @return The FirebaseApp instance which has the provided name.\n   */\n\n\n  FirebaseNamespace.prototype.app = function (appName) {\n    return this.INTERNAL.app(appName);\n  };\n\n  Object.defineProperty(FirebaseNamespace.prototype, \"apps\", {\n    /*\n     * Returns an array of all the non-deleted FirebaseApp instances.\n     */\n    get: function get() {\n      return this.INTERNAL.apps;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  FirebaseNamespace.prototype.ensureApp = function (app) {\n    if (typeof app === 'undefined') {\n      app = this.app();\n    }\n\n    return app;\n  };\n\n  return FirebaseNamespace;\n}();\n\nexports.FirebaseNamespace = FirebaseNamespace;","map":null,"metadata":{},"sourceType":"script"}