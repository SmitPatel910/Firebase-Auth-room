{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResourceCollector = void 0;\n/**\n * ResourceCollector class implements asynchronous logic of calling the API call that supports pagination,\n * page by page, collecting all resources (up to `maxResults`) in the array.\n *\n * Usage:\n *   const resourceCollector = new ResourceCollector(apiCall, maxResults); // -1 for unlimited\n *   resourceCollector.processAllPages(request).then(resources => ...);\n */\n\nvar ResourceCollector = /*#__PURE__*/function () {\n  function ResourceCollector(apiCall) {\n    var maxResults = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n    _classCallCheck(this, ResourceCollector);\n\n    this.apiCall = apiCall;\n    this.resources = [];\n    this.maxResults = maxResults;\n  }\n\n  _createClass(ResourceCollector, [{\n    key: \"callback\",\n    value: function callback(err, resources, nextPageRequest) {\n      var _this = this;\n\n      if (err) {\n        // Something went wrong with this request - failing everything\n        this.rejectCallback(err);\n        return;\n      } // Process one page\n\n\n      var _iterator = _createForOfIteratorHelper(resources),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var resource = _step.value;\n          this.resources.push(resource);\n\n          if (this.resources.length === this.maxResults) {\n            nextPageRequest = null;\n            break;\n          }\n        } // All done?\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!nextPageRequest) {\n        this.resolveCallback(this.resources);\n        return;\n      } // Schedule the next call\n\n\n      var callback = function callback() {\n        return _this.callback.apply(_this, arguments);\n      };\n\n      setImmediate(this.apiCall, nextPageRequest, callback);\n    }\n  }, {\n    key: \"processAllPages\",\n    value: function processAllPages(firstRequest) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.resolveCallback = resolve;\n        _this2.rejectCallback = reject; // Schedule the first call\n\n        var callback = function callback() {\n          return _this2.callback.apply(_this2, arguments);\n        };\n\n        setImmediate(_this2.apiCall, firstRequest, callback);\n      });\n    }\n  }]);\n\n  return ResourceCollector;\n}();\n\nexports.ResourceCollector = ResourceCollector;","map":null,"metadata":{},"sourceType":"script"}