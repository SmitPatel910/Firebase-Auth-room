{"ast":null,"code":"var _objectSpread = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar isObject = require('../help/is_object');\n\nvar secs = require('../help/secs');\n\nvar epoch = require('../help/epoch');\n\nvar getKey = require('../help/get_key');\n\nvar JWS = require('../jws');\n\nvar isString = require('./shared_validations').isString.bind(undefined, TypeError);\n\nvar validateOptions = function validateOptions(options) {\n  if (typeof options.iat !== 'boolean') {\n    throw new TypeError('options.iat must be a boolean');\n  }\n\n  if (typeof options.kid !== 'boolean') {\n    throw new TypeError('options.kid must be a boolean');\n  }\n\n  isString(options.subject, 'options.subject');\n  isString(options.issuer, 'options.issuer');\n\n  if (options.audience !== undefined && (typeof options.audience !== 'string' || !options.audience) && (!Array.isArray(options.audience) || options.audience.length === 0 || options.audience.some(function (a) {\n    return !a || typeof a !== 'string';\n  }))) {\n    throw new TypeError('options.audience must be a string or an array of strings');\n  }\n\n  if (!isObject(options.header)) {\n    throw new TypeError('options.header must be an object');\n  }\n\n  isString(options.algorithm, 'options.algorithm');\n  isString(options.expiresIn, 'options.expiresIn');\n  isString(options.notBefore, 'options.notBefore');\n  isString(options.jti, 'options.jti');\n\n  if (options.now !== undefined && (!(options.now instanceof Date) || !options.now.getTime())) {\n    throw new TypeError('options.now must be a valid Date object');\n  }\n};\n\nmodule.exports = function (payload, key) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (!isObject(options)) {\n    throw new TypeError('options must be an object');\n  }\n\n  var algorithm = options.algorithm,\n      audience = options.audience,\n      expiresIn = options.expiresIn,\n      _options$header = options.header,\n      header = _options$header === void 0 ? {} : _options$header,\n      _options$iat = options.iat,\n      iat = _options$iat === void 0 ? true : _options$iat,\n      issuer = options.issuer,\n      jti = options.jti,\n      _options$kid = options.kid,\n      kid = _options$kid === void 0 ? true : _options$kid,\n      notBefore = options.notBefore,\n      subject = options.subject,\n      now = options.now;\n  validateOptions({\n    algorithm: algorithm,\n    audience: audience,\n    expiresIn: expiresIn,\n    header: header,\n    iat: iat,\n    issuer: issuer,\n    jti: jti,\n    kid: kid,\n    notBefore: notBefore,\n    now: now,\n    subject: subject\n  });\n\n  if (!isObject(payload)) {\n    throw new TypeError('payload must be an object');\n  }\n\n  var unix;\n\n  if (expiresIn || notBefore || iat) {\n    unix = epoch(now || new Date());\n  }\n\n  payload = _objectSpread({}, payload, {\n    sub: subject || payload.sub,\n    aud: audience || payload.aud,\n    iss: issuer || payload.iss,\n    jti: jti || payload.jti,\n    iat: iat ? unix : payload.iat,\n    exp: expiresIn ? unix + secs(expiresIn) : payload.exp,\n    nbf: notBefore ? unix + secs(notBefore) : payload.nbf\n  });\n  key = getKey(key);\n  var includeKid;\n\n  if (typeof options.kid === 'boolean') {\n    includeKid = kid;\n  } else {\n    includeKid = !key.secret;\n  }\n\n  return JWS.sign(JSON.stringify(payload), key, _objectSpread({}, header, {\n    alg: algorithm || header.alg,\n    kid: includeKid ? key.kid : header.kid\n  }));\n};","map":null,"metadata":{},"sourceType":"script"}