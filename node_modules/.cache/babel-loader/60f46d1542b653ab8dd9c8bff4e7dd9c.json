{"ast":null,"code":"/* global BigInt */\nvar _require = require('util'),\n    inherits = _require.inherits;\n\nvar _require2 = require('../base/buffer'),\n    DecoderBuffer = _require2.DecoderBuffer;\n\nvar Node = require('../base/node'); // Import DER constants\n\n\nvar der = require('../constants/der');\n\nfunction DERDecoder(entity) {\n  this.enc = 'der';\n  this.name = entity.name;\n  this.entity = entity; // Construct base tree\n\n  this.tree = new DERNode();\n\n  this.tree._init(entity.body);\n}\n\nDERDecoder.prototype.decode = function decode(data, options) {\n  if (!DecoderBuffer.isDecoderBuffer(data)) {\n    data = new DecoderBuffer(data, options);\n  }\n\n  return this.tree._decode(data, options);\n}; // Tree methods\n\n\nfunction DERNode(parent) {\n  Node.call(this, 'der', parent);\n}\n\ninherits(DERNode, Node);\n\nDERNode.prototype._peekTag = function peekTag(buffer, tag, any) {\n  if (buffer.isEmpty()) {\n    return false;\n  }\n\n  var state = buffer.save();\n  var decodedTag = derDecodeTag(buffer, \"Failed to peek tag: \\\"\".concat(tag, \"\\\"\"));\n\n  if (buffer.isError(decodedTag)) {\n    return decodedTag;\n  }\n\n  buffer.restore(state);\n  return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;\n};\n\nDERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {\n  var decodedTag = derDecodeTag(buffer, \"Failed to decode tag of \\\"\".concat(tag, \"\\\"\"));\n\n  if (buffer.isError(decodedTag)) {\n    return decodedTag;\n  }\n\n  var len = derDecodeLen(buffer, decodedTag.primitive, \"Failed to get length of \\\"\".concat(tag, \"\\\"\")); // Failure\n\n  if (buffer.isError(len)) {\n    return len;\n  }\n\n  if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) {\n    return buffer.error(\"Failed to match tag: \\\"\".concat(tag, \"\\\"\"));\n  }\n\n  if (decodedTag.primitive || len !== null) {\n    return buffer.skip(len, \"Failed to match body of: \\\"\".concat(tag, \"\\\"\"));\n  } // Indefinite length... find END tag\n\n\n  var state = buffer.save();\n\n  var res = this._skipUntilEnd(buffer, \"Failed to skip indefinite length body: \\\"\".concat(this.tag, \"\\\"\"));\n\n  if (buffer.isError(res)) {\n    return res;\n  }\n\n  len = buffer.offset - state.offset;\n  buffer.restore(state);\n  return buffer.skip(len, \"Failed to match body of: \\\"\".concat(tag, \"\\\"\"));\n};\n\nDERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {\n  for (;;) {\n    var tag = derDecodeTag(buffer, fail);\n\n    if (buffer.isError(tag)) {\n      return tag;\n    }\n\n    var len = derDecodeLen(buffer, tag.primitive, fail);\n\n    if (buffer.isError(len)) {\n      return len;\n    }\n\n    var res = void 0;\n\n    if (tag.primitive || len !== null) {\n      res = buffer.skip(len);\n    } else {\n      res = this._skipUntilEnd(buffer, fail);\n    } // Failure\n\n\n    if (buffer.isError(res)) {\n      return res;\n    }\n\n    if (tag.tagStr === 'end') {\n      break;\n    }\n  }\n};\n\nDERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {\n  var result = [];\n\n  while (!buffer.isEmpty()) {\n    var possibleEnd = this._peekTag(buffer, 'end');\n\n    if (buffer.isError(possibleEnd)) {\n      return possibleEnd;\n    }\n\n    var res = decoder.decode(buffer, 'der', options);\n\n    if (buffer.isError(res) && possibleEnd) {\n      break;\n    }\n\n    result.push(res);\n  }\n\n  return result;\n};\n\nDERNode.prototype._decodeStr = function decodeStr(buffer, tag) {\n  if (tag === 'bitstr') {\n    var unused = buffer.readUInt8();\n\n    if (buffer.isError(unused)) {\n      return unused;\n    }\n\n    return {\n      unused: unused,\n      data: buffer.raw()\n    };\n  } else if (tag === 'bmpstr') {\n    var raw = buffer.raw();\n\n    if (raw.length % 2 === 1) {\n      return buffer.error('Decoding of string type: bmpstr length mismatch');\n    }\n\n    var str = '';\n\n    for (var i = 0; i < raw.length / 2; i++) {\n      str += String.fromCharCode(raw.readUInt16BE(i * 2));\n    }\n\n    return str;\n  } else if (tag === 'numstr') {\n    var numstr = buffer.raw().toString('ascii');\n\n    if (!this._isNumstr(numstr)) {\n      return buffer.error('Decoding of string type: numstr unsupported characters');\n    }\n\n    return numstr;\n  } else if (tag === 'octstr') {\n    return buffer.raw();\n  } else if (tag === 'objDesc') {\n    return buffer.raw();\n  } else if (tag === 'printstr') {\n    var printstr = buffer.raw().toString('ascii');\n\n    if (!this._isPrintstr(printstr)) {\n      return buffer.error('Decoding of string type: printstr unsupported characters');\n    }\n\n    return printstr;\n  } else if (/str$/.test(tag)) {\n    return buffer.raw().toString();\n  } else {\n    return buffer.error(\"Decoding of string type: \".concat(tag, \" unsupported\"));\n  }\n};\n\nDERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {\n  var result;\n  var identifiers = [];\n  var ident = 0;\n  var subident = 0;\n\n  while (!buffer.isEmpty()) {\n    subident = buffer.readUInt8();\n    ident <<= 7;\n    ident |= subident & 0x7f;\n\n    if ((subident & 0x80) === 0) {\n      identifiers.push(ident);\n      ident = 0;\n    }\n  }\n\n  if (subident & 0x80) {\n    identifiers.push(ident);\n  }\n\n  var first = identifiers[0] / 40 | 0;\n  var second = identifiers[0] % 40;\n\n  if (relative) {\n    result = identifiers;\n  } else {\n    result = [first, second].concat(identifiers.slice(1));\n  }\n\n  if (values) {\n    var tmp = values[result.join(' ')];\n\n    if (tmp === undefined) {\n      tmp = values[result.join('.')];\n    }\n\n    if (tmp !== undefined) {\n      result = tmp;\n    }\n  }\n\n  return result;\n};\n\nDERNode.prototype._decodeTime = function decodeTime(buffer, tag) {\n  var str = buffer.raw().toString();\n  var year;\n  var mon;\n  var day;\n  var hour;\n  var min;\n  var sec;\n\n  if (tag === 'gentime') {\n    year = str.slice(0, 4) | 0;\n    mon = str.slice(4, 6) | 0;\n    day = str.slice(6, 8) | 0;\n    hour = str.slice(8, 10) | 0;\n    min = str.slice(10, 12) | 0;\n    sec = str.slice(12, 14) | 0;\n  } else if (tag === 'utctime') {\n    year = str.slice(0, 2) | 0;\n    mon = str.slice(2, 4) | 0;\n    day = str.slice(4, 6) | 0;\n    hour = str.slice(6, 8) | 0;\n    min = str.slice(8, 10) | 0;\n    sec = str.slice(10, 12) | 0;\n\n    if (year < 70) {\n      year = 2000 + year;\n    } else {\n      year = 1900 + year;\n    }\n  } else {\n    return buffer.error(\"Decoding \".concat(tag, \" time is not supported yet\"));\n  }\n\n  return Date.UTC(year, mon - 1, day, hour, min, sec, 0);\n};\n\nDERNode.prototype._decodeNull = function decodeNull() {\n  return null;\n};\n\nDERNode.prototype._decodeBool = function decodeBool(buffer) {\n  var res = buffer.readUInt8();\n\n  if (buffer.isError(res)) {\n    return res;\n  } else {\n    return res !== 0;\n  }\n};\n\nDERNode.prototype._decodeInt = function decodeInt(buffer, values) {\n  // Bigint, return as it is (assume big endian)\n  var raw = buffer.raw();\n  var res = BigInt(\"0x\".concat(raw.toString('hex')));\n\n  if (values) {\n    res = values[res.toString(10)] || res;\n  }\n\n  return res;\n};\n\nDERNode.prototype._use = function use(entity, obj) {\n  if (typeof entity === 'function') {\n    entity = entity(obj);\n  }\n\n  return entity._getDecoder('der').tree;\n}; // Utility methods\n\n\nfunction derDecodeTag(buf, fail) {\n  var tag = buf.readUInt8(fail);\n\n  if (buf.isError(tag)) {\n    return tag;\n  }\n\n  var cls = der.tagClass[tag >> 6];\n  var primitive = (tag & 0x20) === 0; // Multi-octet tag - load\n\n  if ((tag & 0x1f) === 0x1f) {\n    var oct = tag;\n    tag = 0;\n\n    while ((oct & 0x80) === 0x80) {\n      oct = buf.readUInt8(fail);\n\n      if (buf.isError(oct)) {\n        return oct;\n      }\n\n      tag <<= 7;\n      tag |= oct & 0x7f;\n    }\n  } else {\n    tag &= 0x1f;\n  }\n\n  var tagStr = der.tag[tag];\n  return {\n    cls: cls,\n    primitive: primitive,\n    tag: tag,\n    tagStr: tagStr\n  };\n}\n\nfunction derDecodeLen(buf, primitive, fail) {\n  var len = buf.readUInt8(fail);\n\n  if (buf.isError(len)) {\n    return len;\n  } // Indefinite form\n\n\n  if (!primitive && len === 0x80) {\n    return null;\n  } // Definite form\n\n\n  if ((len & 0x80) === 0) {\n    // Short form\n    return len;\n  } // Long form\n\n\n  var num = len & 0x7f;\n\n  if (num > 4) {\n    return buf.error('length octect is too long');\n  }\n\n  len = 0;\n\n  for (var i = 0; i < num; i++) {\n    len <<= 8;\n    var j = buf.readUInt8(fail);\n\n    if (buf.isError(j)) {\n      return j;\n    }\n\n    len |= j;\n  }\n\n  return len;\n}\n\nmodule.exports = DERDecoder;","map":null,"metadata":{},"sourceType":"script"}