{"ast":null,"code":"\"use strict\"; // Copyright 2020 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar document_1 = require(\"./document\");\n\nvar reference_1 = require(\"./reference\");\n\nvar timestamp_1 = require(\"./timestamp\");\n\nvar validate_1 = require(\"./validate\");\n\nvar BUNDLE_VERSION = 1;\n/**\n * Builds a Firestore data bundle with results from the given document and query snapshots.\n */\n\nvar BundleBuilder = /*#__PURE__*/function () {\n  function BundleBuilder(bundleId) {\n    _classCallCheck(this, BundleBuilder);\n\n    this.bundleId = bundleId; // Resulting documents for the bundle, keyed by full document path.\n\n    this.documents = new Map(); // Named queries saved in the bundle, keyed by query name.\n\n    this.namedQueries = new Map(); // The latest read time among all bundled documents and queries.\n\n    this.latestReadTime = new timestamp_1.Timestamp(0, 0);\n  }\n  /**\n   * Adds a Firestore document snapshot or query snapshot to the bundle.\n   * Both the documents data and the query read time will be included in the bundle.\n   *\n   * @param {DocumentSnapshot | string} documentOrName A document snapshot to add or a name of a query.\n   * @param {Query=} querySnapshot A query snapshot to add to the bundle, if provided.\n   * @returns {BundleBuilder} This instance.\n   *\n   * @example\n   * const bundle = firestore.bundle('data-bundle');\n   * const docSnapshot = await firestore.doc('abc/123').get();\n   * const querySnapshot = await firestore.collection('coll').get();\n   *\n   * const bundleBuffer = bundle.add(docSnapshot); // Add a document\n   *                            .add('coll-query', querySnapshot) // Add a named query.\n   *                            .build()\n   * // Save `bundleBuffer` to CDN or stream it to clients.\n   */\n\n\n  _createClass(BundleBuilder, [{\n    key: \"add\",\n    value: function add(documentOrName, querySnapshot) {\n      // eslint-disable-next-line prefer-rest-params\n      validate_1.validateMinNumberOfArguments('BundleBuilder.add', arguments, 1); // eslint-disable-next-line prefer-rest-params\n\n      validate_1.validateMaxNumberOfArguments('BundleBuilder.add', arguments, 2);\n\n      if (arguments.length === 1) {\n        validateDocumentSnapshot('documentOrName', documentOrName);\n        this.addBundledDocument(documentOrName);\n      } else {\n        validate_1.validateString('documentOrName', documentOrName);\n        validateQuerySnapshot('querySnapshot', querySnapshot);\n        this.addNamedQuery(documentOrName, querySnapshot);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addBundledDocument\",\n    value: function addBundledDocument(snap, queryName) {\n      var originalDocument = this.documents.get(snap.id);\n      var originalQueries = originalDocument === null || originalDocument === void 0 ? void 0 : originalDocument.metadata.queries; // Update with document built from `snap` because it is newer.\n\n      if (!originalDocument || timestamp_1.Timestamp.fromProto(originalDocument.metadata.readTime) < snap.readTime) {\n        var docProto = snap.toDocumentProto();\n        this.documents.set(snap.id, {\n          document: snap.exists ? docProto : undefined,\n          metadata: {\n            name: docProto.name,\n            readTime: snap.readTime.toProto().timestampValue,\n            exists: snap.exists\n          }\n        });\n      } // Update `queries` to include both original and `queryName`.\n\n\n      var newDocument = this.documents.get(snap.id);\n      newDocument.metadata.queries = originalQueries || [];\n\n      if (queryName) {\n        newDocument.metadata.queries.push(queryName);\n      }\n\n      if (snap.readTime > this.latestReadTime) {\n        this.latestReadTime = snap.readTime;\n      }\n    }\n  }, {\n    key: \"addNamedQuery\",\n    value: function addNamedQuery(name, querySnap) {\n      if (this.namedQueries.has(name)) {\n        throw new Error(\"Query name conflict: \".concat(name, \" has already been added.\"));\n      }\n\n      this.namedQueries.set(name, {\n        name: name,\n        bundledQuery: querySnap.query._toBundledQuery(),\n        readTime: querySnap.readTime.toProto().timestampValue\n      });\n\n      var _iterator = _createForOfIteratorHelper(querySnap.docs),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var snap = _step.value;\n          this.addBundledDocument(snap, name);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (querySnap.readTime > this.latestReadTime) {\n        this.latestReadTime = querySnap.readTime;\n      }\n    }\n    /**\n     * Converts a IBundleElement to a Buffer whose content is the length prefixed JSON representation\n     * of the element.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"elementToLengthPrefixedBuffer\",\n    value: function elementToLengthPrefixedBuffer(bundleElement) {\n      // Convert to a valid proto message object then take its JSON representation.\n      // This take cares of stuff like converting internal byte array fields\n      // to Base64 encodings.\n      // We lazy-load the Proto file to reduce cold-start times.\n      var message = require('../protos/firestore_v1_proto_api').firestore.BundleElement.fromObject(bundleElement).toJSON();\n\n      var buffer = Buffer.from(JSON.stringify(message), 'utf-8');\n      var lengthBuffer = Buffer.from(buffer.length.toString());\n      return Buffer.concat([lengthBuffer, buffer]);\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      var bundleBuffer = Buffer.alloc(0);\n\n      var _iterator2 = _createForOfIteratorHelper(this.namedQueries.values()),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var namedQuery = _step2.value;\n          bundleBuffer = Buffer.concat([bundleBuffer, this.elementToLengthPrefixedBuffer({\n            namedQuery: namedQuery\n          })]);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      var _iterator3 = _createForOfIteratorHelper(this.documents.values()),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var bundledDocument = _step3.value;\n          var documentMetadata = bundledDocument.metadata;\n          bundleBuffer = Buffer.concat([bundleBuffer, this.elementToLengthPrefixedBuffer({\n            documentMetadata: documentMetadata\n          })]); // Write to the bundle if document exists.\n\n          var document = bundledDocument.document;\n\n          if (document) {\n            bundleBuffer = Buffer.concat([bundleBuffer, this.elementToLengthPrefixedBuffer({\n              document: document\n            })]);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      var metadata = {\n        id: this.bundleId,\n        createTime: this.latestReadTime.toProto().timestampValue,\n        version: BUNDLE_VERSION,\n        totalDocuments: this.documents.size,\n        totalBytes: bundleBuffer.length\n      }; // Prepends the metadata element to the bundleBuffer: `bundleBuffer` is the second argument to `Buffer.concat`.\n\n      bundleBuffer = Buffer.concat([this.elementToLengthPrefixedBuffer({\n        metadata: metadata\n      }), bundleBuffer]);\n      return bundleBuffer;\n    }\n  }]);\n\n  return BundleBuilder;\n}();\n\nexports.BundleBuilder = BundleBuilder;\n/**\n * Convenient class to hold both the metadata and the actual content of a document to be bundled.\n * @private\n * @internal\n */\n\nvar BundledDocument = function BundledDocument(metadata, document) {\n  _classCallCheck(this, BundledDocument);\n\n  this.metadata = metadata;\n  this.document = document;\n};\n/**\n * Validates that 'value' is DocumentSnapshot.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n */\n\n\nfunction validateDocumentSnapshot(arg, value) {\n  if (!(value instanceof document_1.DocumentSnapshot)) {\n    throw new Error(validate_1.invalidArgumentMessage(arg, 'DocumentSnapshot'));\n  }\n}\n/**\n * Validates that 'value' is QuerySnapshot.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n */\n\n\nfunction validateQuerySnapshot(arg, value) {\n  if (!(value instanceof reference_1.QuerySnapshot)) {\n    throw new Error(validate_1.invalidArgumentMessage(arg, 'QuerySnapshot'));\n  }\n}","map":null,"metadata":{},"sourceType":"script"}