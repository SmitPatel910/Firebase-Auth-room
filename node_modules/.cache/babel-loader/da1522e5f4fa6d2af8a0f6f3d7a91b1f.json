{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getErrorFromOAuthErrorResponse = exports.OAuthClientAuthHandler = void 0;\n\nvar querystring = require(\"querystring\");\n\nvar crypto_1 = require(\"../crypto/crypto\");\n/** List of HTTP methods that accept request bodies. */\n\n\nvar METHODS_SUPPORTING_REQUEST_BODY = ['PUT', 'POST', 'PATCH'];\n/**\n * Abstract class for handling client authentication in OAuth-based\n * operations.\n * When request-body client authentication is used, only application/json and\n * application/x-www-form-urlencoded content types for HTTP methods that support\n * request bodies are supported.\n */\n\nvar OAuthClientAuthHandler = /*#__PURE__*/function () {\n  /**\n   * Instantiates an OAuth client authentication handler.\n   * @param clientAuthentication The client auth credentials.\n   */\n  function OAuthClientAuthHandler(clientAuthentication) {\n    _classCallCheck(this, OAuthClientAuthHandler);\n\n    this.clientAuthentication = clientAuthentication;\n    this.crypto = crypto_1.createCrypto();\n  }\n  /**\n   * Applies client authentication on the OAuth request's headers or POST\n   * body but does not process the request.\n   * @param opts The GaxiosOptions whose headers or data are to be modified\n   *   depending on the client authentication mechanism to be used.\n   * @param bearerToken The optional bearer token to use for authentication.\n   *   When this is used, no client authentication credentials are needed.\n   */\n\n\n  _createClass(OAuthClientAuthHandler, [{\n    key: \"applyClientAuthenticationOptions\",\n    value: function applyClientAuthenticationOptions(opts, bearerToken) {\n      // Inject authenticated header.\n      this.injectAuthenticatedHeaders(opts, bearerToken); // Inject authenticated request body.\n\n      if (!bearerToken) {\n        this.injectAuthenticatedRequestBody(opts);\n      }\n    }\n    /**\n     * Applies client authentication on the request's header if either\n     * basic authentication or bearer token authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     * @param bearerToken The optional bearer token to use for authentication.\n     *   When this is used, no client authentication credentials are needed.\n     */\n\n  }, {\n    key: \"injectAuthenticatedHeaders\",\n    value: function injectAuthenticatedHeaders(opts, bearerToken) {\n      var _a; // Bearer token prioritized higher than basic Auth.\n\n\n      if (bearerToken) {\n        opts.headers = opts.headers || {};\n        Object.assign(opts.headers, {\n          Authorization: \"Bearer \".concat(bearerToken, \"}\")\n        });\n      } else if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'basic') {\n        opts.headers = opts.headers || {};\n        var clientId = this.clientAuthentication.clientId;\n        var clientSecret = this.clientAuthentication.clientSecret || '';\n        var base64EncodedCreds = this.crypto.encodeBase64StringUtf8(\"\".concat(clientId, \":\").concat(clientSecret));\n        Object.assign(opts.headers, {\n          Authorization: \"Basic \".concat(base64EncodedCreds)\n        });\n      }\n    }\n    /**\n     * Applies client authentication on the request's body if request-body\n     * client authentication is selected.\n     *\n     * @param opts The GaxiosOptions whose headers or data are to be modified\n     *   depending on the client authentication mechanism to be used.\n     */\n\n  }, {\n    key: \"injectAuthenticatedRequestBody\",\n    value: function injectAuthenticatedRequestBody(opts) {\n      var _a;\n\n      if (((_a = this.clientAuthentication) === null || _a === void 0 ? void 0 : _a.confidentialClientType) === 'request-body') {\n        var method = (opts.method || 'GET').toUpperCase(); // Inject authenticated request body.\n\n        if (METHODS_SUPPORTING_REQUEST_BODY.indexOf(method) !== -1) {\n          // Get content-type.\n          var contentType;\n          var headers = opts.headers || {};\n\n          for (var key in headers) {\n            if (key.toLowerCase() === 'content-type' && headers[key]) {\n              contentType = headers[key].toLowerCase();\n              break;\n            }\n          }\n\n          if (contentType === 'application/x-www-form-urlencoded') {\n            opts.data = opts.data || '';\n            var data = querystring.parse(opts.data);\n            Object.assign(data, {\n              client_id: this.clientAuthentication.clientId,\n              client_secret: this.clientAuthentication.clientSecret || ''\n            });\n            opts.data = querystring.stringify(data);\n          } else if (contentType === 'application/json') {\n            opts.data = opts.data || {};\n            Object.assign(opts.data, {\n              client_id: this.clientAuthentication.clientId,\n              client_secret: this.clientAuthentication.clientSecret || ''\n            });\n          } else {\n            throw new Error(\"\".concat(contentType, \" content-types are not supported with \") + \"\".concat(this.clientAuthentication.confidentialClientType, \" \") + 'client authentication');\n          }\n        } else {\n          throw new Error(\"\".concat(method, \" HTTP method does not support \") + \"\".concat(this.clientAuthentication.confidentialClientType, \" \") + 'client authentication');\n        }\n      }\n    }\n  }]);\n\n  return OAuthClientAuthHandler;\n}();\n\nexports.OAuthClientAuthHandler = OAuthClientAuthHandler;\n/**\n * Converts an OAuth error response to a native JavaScript Error.\n * @param resp The OAuth error response to convert to a native Error object.\n * @param err The optional original error. If provided, the error properties\n *   will be copied to the new error.\n * @return The converted native Error object.\n */\n\nfunction getErrorFromOAuthErrorResponse(resp, err) {\n  // Error response.\n  var errorCode = resp.error;\n  var errorDescription = resp.error_description;\n  var errorUri = resp.error_uri;\n  var message = \"Error code \".concat(errorCode);\n\n  if (typeof errorDescription !== 'undefined') {\n    message += \": \".concat(errorDescription);\n  }\n\n  if (typeof errorUri !== 'undefined') {\n    message += \" - \".concat(errorUri);\n  }\n\n  var newError = new Error(message); // Copy properties from original error to newly generated error.\n\n  if (err) {\n    var keys = Object.keys(err);\n\n    if (err.stack) {\n      // Copy error.stack if available.\n      keys.push('stack');\n    }\n\n    keys.forEach(function (key) {\n      // Do not overwrite the message field.\n      if (key !== 'message') {\n        Object.defineProperty(newError, key, {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          value: err[key],\n          writable: false,\n          enumerable: true\n        });\n      }\n    });\n  }\n\n  return newError;\n}\n\nexports.getErrorFromOAuthErrorResponse = getErrorFromOAuthErrorResponse;","map":null,"metadata":{},"sourceType":"script"}