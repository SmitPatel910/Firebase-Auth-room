{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _objectSpread = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleAuth = exports.CLOUD_SDK_CLIENT_ID = void 0;\n\nvar child_process_1 = require(\"child_process\");\n\nvar fs = require(\"fs\");\n\nvar gcpMetadata = require(\"gcp-metadata\");\n\nvar os = require(\"os\");\n\nvar path = require(\"path\");\n\nvar crypto_1 = require(\"../crypto/crypto\");\n\nvar transporters_1 = require(\"../transporters\");\n\nvar computeclient_1 = require(\"./computeclient\");\n\nvar idtokenclient_1 = require(\"./idtokenclient\");\n\nvar envDetect_1 = require(\"./envDetect\");\n\nvar jwtclient_1 = require(\"./jwtclient\");\n\nvar refreshclient_1 = require(\"./refreshclient\");\n\nvar externalclient_1 = require(\"./externalclient\");\n\nvar baseexternalclient_1 = require(\"./baseexternalclient\");\n\nexports.CLOUD_SDK_CLIENT_ID = '764086051850-6qr4p6gpi6hn506pt8ejuq83di341hur.apps.googleusercontent.com';\n\nvar GoogleAuth = /*#__PURE__*/function () {\n  function GoogleAuth(opts) {\n    _classCallCheck(this, GoogleAuth);\n\n    /**\n     * Caches a value indicating whether the auth layer is running on Google\n     * Compute Engine.\n     * @private\n     */\n    this.checkIsGCE = undefined; // To save the contents of the JSON credential file\n\n    this.jsonContent = null;\n    this.cachedCredential = null;\n    opts = opts || {};\n    this._cachedProjectId = opts.projectId || null;\n    this.keyFilename = opts.keyFilename || opts.keyFile;\n    this.scopes = opts.scopes;\n    this.jsonContent = opts.credentials || null;\n    this.clientOptions = opts.clientOptions;\n  } // Note:  this properly is only public to satisify unit tests.\n  // https://github.com/Microsoft/TypeScript/issues/5228\n\n\n  _createClass(GoogleAuth, [{\n    key: \"setGapicJWTValues\",\n    // GAPIC client libraries should always use self-signed JWTs. The following\n    // variables are set on the JWT client in order to indicate the type of library,\n    // and sign the JWT with the correct audience and scopes (if not supplied).\n    value: function setGapicJWTValues(client) {\n      client.defaultServicePath = this.defaultServicePath;\n      client.useJWTAccessWithScope = this.useJWTAccessWithScope;\n      client.defaultScopes = this.defaultScopes;\n    }\n  }, {\n    key: \"getProjectId\",\n    value: function getProjectId(callback) {\n      if (callback) {\n        this.getProjectIdAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getProjectIdAsync();\n      }\n    }\n  }, {\n    key: \"getProjectIdAsync\",\n    value: function getProjectIdAsync() {\n      var _this = this;\n\n      if (this._cachedProjectId) {\n        return Promise.resolve(this._cachedProjectId);\n      } // In implicit case, supports three environments. In order of precedence,\n      // the implicit environments are:\n      // - GCLOUD_PROJECT or GOOGLE_CLOUD_PROJECT environment variable\n      // - GOOGLE_APPLICATION_CREDENTIALS JSON file\n      // - Cloud SDK: `gcloud config config-helper --format json`\n      // - GCE project ID from metadata server)\n\n\n      if (!this._getDefaultProjectIdPromise) {\n        // TODO: refactor the below code so that it doesn't mix and match\n        // promises and async/await.\n        this._getDefaultProjectIdPromise = new Promise(\n        /*#__PURE__*/\n        // eslint-disable-next-line no-async-promise-executor\n        function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(resolve, reject) {\n            var projectId;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.prev = 0;\n                    _context.t3 = _this.getProductionProjectId();\n\n                    if (_context.t3) {\n                      _context.next = 6;\n                      break;\n                    }\n\n                    _context.next = 5;\n                    return _this.getFileProjectId();\n\n                  case 5:\n                    _context.t3 = _context.sent;\n\n                  case 6:\n                    _context.t2 = _context.t3;\n\n                    if (_context.t2) {\n                      _context.next = 11;\n                      break;\n                    }\n\n                    _context.next = 10;\n                    return _this.getDefaultServiceProjectId();\n\n                  case 10:\n                    _context.t2 = _context.sent;\n\n                  case 11:\n                    _context.t1 = _context.t2;\n\n                    if (_context.t1) {\n                      _context.next = 16;\n                      break;\n                    }\n\n                    _context.next = 15;\n                    return _this.getGCEProjectId();\n\n                  case 15:\n                    _context.t1 = _context.sent;\n\n                  case 16:\n                    _context.t0 = _context.t1;\n\n                    if (_context.t0) {\n                      _context.next = 21;\n                      break;\n                    }\n\n                    _context.next = 20;\n                    return _this.getExternalAccountClientProjectId();\n\n                  case 20:\n                    _context.t0 = _context.sent;\n\n                  case 21:\n                    projectId = _context.t0;\n                    _this._cachedProjectId = projectId;\n\n                    if (projectId) {\n                      _context.next = 25;\n                      break;\n                    }\n\n                    throw new Error('Unable to detect a Project Id in the current environment. \\n' + 'To learn more about authentication and Google APIs, visit: \\n' + 'https://cloud.google.com/docs/authentication/getting-started');\n\n                  case 25:\n                    resolve(projectId);\n                    _context.next = 31;\n                    break;\n\n                  case 28:\n                    _context.prev = 28;\n                    _context.t4 = _context[\"catch\"](0);\n                    reject(_context.t4);\n\n                  case 31:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, null, [[0, 28]]);\n          }));\n\n          return function (_x, _x2) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      }\n\n      return this._getDefaultProjectIdPromise;\n    }\n    /**\n     * @returns Any scopes (user-specified or default scopes specified by the\n     *   client library) that need to be set on the current Auth client.\n     */\n\n  }, {\n    key: \"getAnyScopes\",\n    value: function getAnyScopes() {\n      return this.scopes || this.defaultScopes;\n    }\n  }, {\n    key: \"getApplicationDefault\",\n    value: function getApplicationDefault() {\n      var optionsOrCallback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var callback = arguments.length > 1 ? arguments[1] : undefined;\n      var options;\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n\n      if (callback) {\n        this.getApplicationDefaultAsync(options).then(function (r) {\n          return callback(null, r.credential, r.projectId);\n        }, callback);\n      } else {\n        return this.getApplicationDefaultAsync(options);\n      }\n    }\n  }, {\n    key: \"getApplicationDefaultAsync\",\n    value: function () {\n      var _getApplicationDefaultAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var options,\n            credential,\n            projectId,\n            isGCE,\n            _args2 = arguments;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                options = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n                if (!this.cachedCredential) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                _context2.t0 = this.cachedCredential;\n                _context2.next = 5;\n                return this.getProjectIdAsync();\n\n              case 5:\n                _context2.t1 = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: _context2.t0,\n                  projectId: _context2.t1\n                });\n\n              case 7:\n                _context2.next = 9;\n                return this._tryGetApplicationCredentialsFromEnvironmentVariable(options);\n\n              case 9:\n                credential = _context2.sent;\n\n                if (!credential) {\n                  _context2.next = 17;\n                  break;\n                }\n\n                if (credential instanceof jwtclient_1.JWT) {\n                  credential.scopes = this.scopes;\n                } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                  credential.scopes = this.getAnyScopes();\n                }\n\n                this.cachedCredential = credential;\n                _context2.next = 15;\n                return this.getProjectId();\n\n              case 15:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: credential,\n                  projectId: projectId\n                });\n\n              case 17:\n                _context2.next = 19;\n                return this._tryGetApplicationCredentialsFromWellKnownFile(options);\n\n              case 19:\n                credential = _context2.sent;\n\n                if (!credential) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                if (credential instanceof jwtclient_1.JWT) {\n                  credential.scopes = this.scopes;\n                } else if (credential instanceof baseexternalclient_1.BaseExternalAccountClient) {\n                  credential.scopes = this.getAnyScopes();\n                }\n\n                this.cachedCredential = credential;\n                _context2.next = 25;\n                return this.getProjectId();\n\n              case 25:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  credential: credential,\n                  projectId: projectId\n                });\n\n              case 27:\n                _context2.prev = 27;\n                _context2.next = 30;\n                return this._checkIsGCE();\n\n              case 30:\n                isGCE = _context2.sent;\n                _context2.next = 37;\n                break;\n\n              case 33:\n                _context2.prev = 33;\n                _context2.t2 = _context2[\"catch\"](27);\n                _context2.t2.message = \"Unexpected error determining execution environment: \".concat(_context2.t2.message);\n                throw _context2.t2;\n\n              case 37:\n                if (isGCE) {\n                  _context2.next = 39;\n                  break;\n                }\n\n                throw new Error('Could not load the default credentials. Browse to https://cloud.google.com/docs/authentication/getting-started for more information.');\n\n              case 39:\n                // For GCE, just return a default ComputeClient. It will take care of\n                // the rest.\n                options.scopes = this.getAnyScopes();\n                this.cachedCredential = new computeclient_1.Compute(options);\n                _context2.next = 43;\n                return this.getProjectId();\n\n              case 43:\n                projectId = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  projectId: projectId,\n                  credential: this.cachedCredential\n                });\n\n              case 45:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[27, 33]]);\n      }));\n\n      function getApplicationDefaultAsync() {\n        return _getApplicationDefaultAsync.apply(this, arguments);\n      }\n\n      return getApplicationDefaultAsync;\n    }()\n    /**\n     * Determines whether the auth layer is running on Google Compute Engine.\n     * @returns A promise that resolves with the boolean.\n     * @api private\n     */\n\n  }, {\n    key: \"_checkIsGCE\",\n    value: function () {\n      var _checkIsGCE2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.checkIsGCE === undefined)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                _context3.next = 3;\n                return gcpMetadata.isAvailable();\n\n              case 3:\n                this.checkIsGCE = _context3.sent;\n\n              case 4:\n                return _context3.abrupt(\"return\", this.checkIsGCE);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _checkIsGCE() {\n        return _checkIsGCE2.apply(this, arguments);\n      }\n\n      return _checkIsGCE;\n    }()\n    /**\n     * Attempts to load default credentials from the environment variable path..\n     * @returns Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n\n  }, {\n    key: \"_tryGetApplicationCredentialsFromEnvironmentVariable\",\n    value: function () {\n      var _tryGetApplicationCredentialsFromEnvironmentVariable2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options) {\n        var credentialsPath;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                credentialsPath = process.env['GOOGLE_APPLICATION_CREDENTIALS'] || process.env['google_application_credentials'];\n\n                if (!(!credentialsPath || credentialsPath.length === 0)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", null);\n\n              case 3:\n                _context4.prev = 3;\n                return _context4.abrupt(\"return\", this._getApplicationCredentialsFromFilePath(credentialsPath, options));\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](3);\n                _context4.t0.message = \"Unable to read the credential file specified by the GOOGLE_APPLICATION_CREDENTIALS environment variable: \".concat(_context4.t0.message);\n                throw _context4.t0;\n\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[3, 7]]);\n      }));\n\n      function _tryGetApplicationCredentialsFromEnvironmentVariable(_x3) {\n        return _tryGetApplicationCredentialsFromEnvironmentVariable2.apply(this, arguments);\n      }\n\n      return _tryGetApplicationCredentialsFromEnvironmentVariable;\n    }()\n    /**\n     * Attempts to load default credentials from a well-known file location\n     * @return Promise that resolves with the OAuth2Client or null.\n     * @api private\n     */\n\n  }, {\n    key: \"_tryGetApplicationCredentialsFromWellKnownFile\",\n    value: function () {\n      var _tryGetApplicationCredentialsFromWellKnownFile2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {\n        var location, home, client;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // First, figure out the location of the file, depending upon the OS type.\n                location = null;\n\n                if (this._isWindows()) {\n                  // Windows\n                  location = process.env['APPDATA'];\n                } else {\n                  // Linux or Mac\n                  home = process.env['HOME'];\n\n                  if (home) {\n                    location = path.join(home, '.config');\n                  }\n                } // If we found the root path, expand it.\n\n\n                if (location) {\n                  location = path.join(location, 'gcloud', 'application_default_credentials.json');\n\n                  if (!fs.existsSync(location)) {\n                    location = null;\n                  }\n                } // The file does not exist.\n\n\n                if (location) {\n                  _context5.next = 5;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", null);\n\n              case 5:\n                _context5.next = 7;\n                return this._getApplicationCredentialsFromFilePath(location, options);\n\n              case 7:\n                client = _context5.sent;\n                return _context5.abrupt(\"return\", client);\n\n              case 9:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _tryGetApplicationCredentialsFromWellKnownFile(_x4) {\n        return _tryGetApplicationCredentialsFromWellKnownFile2.apply(this, arguments);\n      }\n\n      return _tryGetApplicationCredentialsFromWellKnownFile;\n    }()\n    /**\n     * Attempts to load default credentials from a file at the given path..\n     * @param filePath The path to the file to read.\n     * @returns Promise that resolves with the OAuth2Client\n     * @api private\n     */\n\n  }, {\n    key: \"_getApplicationCredentialsFromFilePath\",\n    value: function () {\n      var _getApplicationCredentialsFromFilePath2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(filePath) {\n        var options,\n            readStream,\n            _args6 = arguments;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                options = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n\n                if (!(!filePath || filePath.length === 0)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                throw new Error('The file path is invalid.');\n\n              case 3:\n                _context6.prev = 3;\n                // Resolve path to actual file in case of symlink. Expect a thrown error\n                // if not resolvable.\n                filePath = fs.realpathSync(filePath);\n\n                if (fs.lstatSync(filePath).isFile()) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                throw new Error();\n\n              case 7:\n                _context6.next = 13;\n                break;\n\n              case 9:\n                _context6.prev = 9;\n                _context6.t0 = _context6[\"catch\"](3);\n                _context6.t0.message = \"The file at \".concat(filePath, \" does not exist, or it is not a file. \").concat(_context6.t0.message);\n                throw _context6.t0;\n\n              case 13:\n                // Now open a read stream on the file, and parse it.\n                readStream = fs.createReadStream(filePath);\n                return _context6.abrupt(\"return\", this.fromStream(readStream, options));\n\n              case 15:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[3, 9]]);\n      }));\n\n      function _getApplicationCredentialsFromFilePath(_x5) {\n        return _getApplicationCredentialsFromFilePath2.apply(this, arguments);\n      }\n\n      return _getApplicationCredentialsFromFilePath;\n    }()\n    /**\n     * Create a credentials instance using the given input options.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json, options) {\n      var client;\n\n      if (!json) {\n        throw new Error('Must pass in a JSON object containing the Google auth settings.');\n      }\n\n      options = options || {};\n\n      if (json.type === 'authorized_user') {\n        client = new refreshclient_1.UserRefreshClient(options);\n        client.fromJSON(json);\n      } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n        client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n        client.scopes = this.getAnyScopes();\n      } else {\n        options.scopes = this.scopes;\n        client = new jwtclient_1.JWT(options);\n        this.setGapicJWTValues(client);\n        client.fromJSON(json);\n      }\n\n      return client;\n    }\n    /**\n     * Return a JWT or UserRefreshClient from JavaScript object, caching both the\n     * object used to instantiate and the client.\n     * @param json The input object.\n     * @param options The JWT or UserRefresh options for the client\n     * @returns JWT or UserRefresh Client with data\n     */\n\n  }, {\n    key: \"_cacheClientFromJSON\",\n    value: function _cacheClientFromJSON(json, options) {\n      var client; // create either a UserRefreshClient or JWT client.\n\n      options = options || {};\n\n      if (json.type === 'authorized_user') {\n        client = new refreshclient_1.UserRefreshClient(options);\n        client.fromJSON(json);\n      } else if (json.type === baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE) {\n        client = externalclient_1.ExternalAccountClient.fromJSON(json, options);\n        client.scopes = this.getAnyScopes();\n      } else {\n        options.scopes = this.scopes;\n        client = new jwtclient_1.JWT(options);\n        this.setGapicJWTValues(client);\n        client.fromJSON(json);\n      } // cache both raw data used to instantiate client and client itself.\n\n\n      this.jsonContent = json;\n      this.cachedCredential = client;\n      return this.cachedCredential;\n    }\n  }, {\n    key: \"fromStream\",\n    value: function fromStream(inputStream) {\n      var optionsOrCallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var callback = arguments.length > 2 ? arguments[2] : undefined;\n      var options = {};\n\n      if (typeof optionsOrCallback === 'function') {\n        callback = optionsOrCallback;\n      } else {\n        options = optionsOrCallback;\n      }\n\n      if (callback) {\n        this.fromStreamAsync(inputStream, options).then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.fromStreamAsync(inputStream, options);\n      }\n    }\n  }, {\n    key: \"fromStreamAsync\",\n    value: function fromStreamAsync(inputStream, options) {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!inputStream) {\n          throw new Error('Must pass in a stream containing the Google auth settings.');\n        }\n\n        var s = '';\n        inputStream.setEncoding('utf8').on('error', reject).on('data', function (chunk) {\n          return s += chunk;\n        }).on('end', function () {\n          try {\n            try {\n              var data = JSON.parse(s);\n\n              var r = _this2._cacheClientFromJSON(data, options);\n\n              return resolve(r);\n            } catch (err) {\n              // If we failed parsing this.keyFileName, assume that it\n              // is a PEM or p12 certificate:\n              if (!_this2.keyFilename) throw err;\n              var client = new jwtclient_1.JWT(_objectSpread({}, _this2.clientOptions, {\n                keyFile: _this2.keyFilename\n              }));\n              _this2.cachedCredential = client;\n\n              _this2.setGapicJWTValues(client);\n\n              return resolve(client);\n            }\n          } catch (err) {\n            return reject(err);\n          }\n        });\n      });\n    }\n    /**\n     * Create a credentials instance using the given API key string.\n     * @param apiKey The API key string\n     * @param options An optional options object.\n     * @returns A JWT loaded from the key\n     */\n\n  }, {\n    key: \"fromAPIKey\",\n    value: function fromAPIKey(apiKey, options) {\n      options = options || {};\n      var client = new jwtclient_1.JWT(options);\n      client.fromAPIKey(apiKey);\n      return client;\n    }\n    /**\n     * Determines whether the current operating system is Windows.\n     * @api private\n     */\n\n  }, {\n    key: \"_isWindows\",\n    value: function _isWindows() {\n      var sys = os.platform();\n\n      if (sys && sys.length >= 3) {\n        if (sys.substring(0, 3).toLowerCase() === 'win') {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Run the Google Cloud SDK command that prints the default project ID\n     */\n\n  }, {\n    key: \"getDefaultServiceProjectId\",\n    value: function () {\n      var _getDefaultServiceProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", new Promise(function (resolve) {\n                  child_process_1.exec('gcloud config config-helper --format json', function (err, stdout) {\n                    if (!err && stdout) {\n                      try {\n                        var projectId = JSON.parse(stdout).configuration.properties.core.project;\n                        resolve(projectId);\n                        return;\n                      } catch (e) {// ignore errors\n                      }\n                    }\n\n                    resolve(null);\n                  });\n                }));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function getDefaultServiceProjectId() {\n        return _getDefaultServiceProjectId.apply(this, arguments);\n      }\n\n      return getDefaultServiceProjectId;\n    }()\n    /**\n     * Loads the project id from environment variables.\n     * @api private\n     */\n\n  }, {\n    key: \"getProductionProjectId\",\n    value: function getProductionProjectId() {\n      return process.env['GCLOUD_PROJECT'] || process.env['GOOGLE_CLOUD_PROJECT'] || process.env['gcloud_project'] || process.env['google_cloud_project'];\n    }\n    /**\n     * Loads the project id from the GOOGLE_APPLICATION_CREDENTIALS json file.\n     * @api private\n     */\n\n  }, {\n    key: \"getFileProjectId\",\n    value: function () {\n      var _getFileProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var creds, r;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!this.cachedCredential) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", this.cachedCredential.projectId);\n\n              case 2:\n                if (!this.keyFilename) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _context8.next = 5;\n                return this.getClient();\n\n              case 5:\n                creds = _context8.sent;\n\n                if (!(creds && creds.projectId)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", creds.projectId);\n\n              case 8:\n                _context8.next = 10;\n                return this._tryGetApplicationCredentialsFromEnvironmentVariable();\n\n              case 10:\n                r = _context8.sent;\n\n                if (!r) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                return _context8.abrupt(\"return\", r.projectId);\n\n              case 15:\n                return _context8.abrupt(\"return\", null);\n\n              case 16:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getFileProjectId() {\n        return _getFileProjectId.apply(this, arguments);\n      }\n\n      return getFileProjectId;\n    }()\n    /**\n     * Gets the project ID from external account client if available.\n     */\n\n  }, {\n    key: \"getExternalAccountClientProjectId\",\n    value: function () {\n      var _getExternalAccountClientProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var creds;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(!this.jsonContent || this.jsonContent.type !== baseexternalclient_1.EXTERNAL_ACCOUNT_TYPE)) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                return _context9.abrupt(\"return\", null);\n\n              case 2:\n                _context9.next = 4;\n                return this.getClient();\n\n              case 4:\n                creds = _context9.sent;\n                _context9.next = 7;\n                return creds.getProjectId();\n\n              case 7:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 8:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getExternalAccountClientProjectId() {\n        return _getExternalAccountClientProjectId.apply(this, arguments);\n      }\n\n      return getExternalAccountClientProjectId;\n    }()\n    /**\n     * Gets the Compute Engine project ID if it can be inferred.\n     */\n\n  }, {\n    key: \"getGCEProjectId\",\n    value: function () {\n      var _getGCEProjectId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        var r;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                _context10.next = 3;\n                return gcpMetadata.project('project-id');\n\n              case 3:\n                r = _context10.sent;\n                return _context10.abrupt(\"return\", r);\n\n              case 7:\n                _context10.prev = 7;\n                _context10.t0 = _context10[\"catch\"](0);\n                return _context10.abrupt(\"return\", null);\n\n              case 10:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, null, [[0, 7]]);\n      }));\n\n      function getGCEProjectId() {\n        return _getGCEProjectId.apply(this, arguments);\n      }\n\n      return getGCEProjectId;\n    }()\n  }, {\n    key: \"getCredentials\",\n    value: function getCredentials(callback) {\n      if (callback) {\n        this.getCredentialsAsync().then(function (r) {\n          return callback(null, r);\n        }, callback);\n      } else {\n        return this.getCredentialsAsync();\n      }\n    }\n  }, {\n    key: \"getCredentialsAsync\",\n    value: function () {\n      var _getCredentialsAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var credential, isGCE, data;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.getClient();\n\n              case 2:\n                if (!this.jsonContent) {\n                  _context11.next = 5;\n                  break;\n                }\n\n                credential = {\n                  client_email: this.jsonContent.client_email,\n                  private_key: this.jsonContent.private_key\n                };\n                return _context11.abrupt(\"return\", credential);\n\n              case 5:\n                _context11.next = 7;\n                return this._checkIsGCE();\n\n              case 7:\n                isGCE = _context11.sent;\n\n                if (isGCE) {\n                  _context11.next = 10;\n                  break;\n                }\n\n                throw new Error('Unknown error.');\n\n              case 10:\n                _context11.next = 12;\n                return gcpMetadata.instance({\n                  property: 'service-accounts/',\n                  params: {\n                    recursive: 'true'\n                  }\n                });\n\n              case 12:\n                data = _context11.sent;\n\n                if (!(!data || !data.default || !data.default.email)) {\n                  _context11.next = 15;\n                  break;\n                }\n\n                throw new Error('Failure from metadata server.');\n\n              case 15:\n                return _context11.abrupt(\"return\", {\n                  client_email: data.default.email\n                });\n\n              case 16:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getCredentialsAsync() {\n        return _getCredentialsAsync.apply(this, arguments);\n      }\n\n      return getCredentialsAsync;\n    }()\n    /**\n     * Automatically obtain a client based on the provided configuration.  If no\n     * options were passed, use Application Default Credentials.\n     */\n\n  }, {\n    key: \"getClient\",\n    value: function () {\n      var _getClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(options) {\n        var filePath, stream;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!options) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                throw new Error('Passing options to getClient is forbidden in v5.0.0. Use new GoogleAuth(opts) instead.');\n\n              case 2:\n                if (this.cachedCredential) {\n                  _context12.next = 16;\n                  break;\n                }\n\n                if (!this.jsonContent) {\n                  _context12.next = 7;\n                  break;\n                }\n\n                this._cacheClientFromJSON(this.jsonContent, this.clientOptions);\n\n                _context12.next = 16;\n                break;\n\n              case 7:\n                if (!this.keyFilename) {\n                  _context12.next = 14;\n                  break;\n                }\n\n                filePath = path.resolve(this.keyFilename);\n                stream = fs.createReadStream(filePath);\n                _context12.next = 12;\n                return this.fromStreamAsync(stream, this.clientOptions);\n\n              case 12:\n                _context12.next = 16;\n                break;\n\n              case 14:\n                _context12.next = 16;\n                return this.getApplicationDefaultAsync(this.clientOptions);\n\n              case 16:\n                return _context12.abrupt(\"return\", this.cachedCredential);\n\n              case 17:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getClient(_x6) {\n        return _getClient.apply(this, arguments);\n      }\n\n      return getClient;\n    }()\n    /**\n     * Creates a client which will fetch an ID token for authorization.\n     * @param targetAudience the audience for the fetched ID token.\n     * @returns IdTokenClient for making HTTP calls authenticated with ID tokens.\n     */\n\n  }, {\n    key: \"getIdTokenClient\",\n    value: function () {\n      var _getIdTokenClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(targetAudience) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context13.sent;\n\n                if ('fetchIdToken' in client) {\n                  _context13.next = 5;\n                  break;\n                }\n\n                throw new Error('Cannot fetch ID token in this environment, use GCE or set the GOOGLE_APPLICATION_CREDENTIALS environment variable to a service account credentials JSON file.');\n\n              case 5:\n                return _context13.abrupt(\"return\", new idtokenclient_1.IdTokenClient({\n                  targetAudience: targetAudience,\n                  idTokenProvider: client\n                }));\n\n              case 6:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getIdTokenClient(_x7) {\n        return _getIdTokenClient.apply(this, arguments);\n      }\n\n      return getIdTokenClient;\n    }()\n    /**\n     * Automatically obtain application default credentials, and return\n     * an access token for making requests.\n     */\n\n  }, {\n    key: \"getAccessToken\",\n    value: function () {\n      var _getAccessToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context14.sent;\n                _context14.next = 5;\n                return client.getAccessToken();\n\n              case 5:\n                return _context14.abrupt(\"return\", _context14.sent.token);\n\n              case 6:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function getAccessToken() {\n        return _getAccessToken.apply(this, arguments);\n      }\n\n      return getAccessToken;\n    }()\n    /**\n     * Obtain the HTTP headers that will provide authorization for a given\n     * request.\n     */\n\n  }, {\n    key: \"getRequestHeaders\",\n    value: function () {\n      var _getRequestHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(url) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context15.sent;\n                return _context15.abrupt(\"return\", client.getRequestHeaders(url));\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function getRequestHeaders(_x8) {\n        return _getRequestHeaders.apply(this, arguments);\n      }\n\n      return getRequestHeaders;\n    }()\n    /**\n     * Obtain credentials for a request, then attach the appropriate headers to\n     * the request options.\n     * @param opts Axios or Request options on which to attach the headers\n     */\n\n  }, {\n    key: \"authorizeRequest\",\n    value: function () {\n      var _authorizeRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(opts) {\n        var url, client, headers;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                opts = opts || {};\n                url = opts.url || opts.uri;\n                _context16.next = 4;\n                return this.getClient();\n\n              case 4:\n                client = _context16.sent;\n                _context16.next = 7;\n                return client.getRequestHeaders(url);\n\n              case 7:\n                headers = _context16.sent;\n                opts.headers = Object.assign(opts.headers || {}, headers);\n                return _context16.abrupt(\"return\", opts);\n\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function authorizeRequest(_x9) {\n        return _authorizeRequest.apply(this, arguments);\n      }\n\n      return authorizeRequest;\n    }()\n    /**\n     * Automatically obtain application default credentials, and make an\n     * HTTP request using the given options.\n     * @param opts Axios request options for the HTTP request.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  }, {\n    key: \"request\",\n    value: function () {\n      var _request = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(opts) {\n        var client;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context17.sent;\n                return _context17.abrupt(\"return\", client.request(opts));\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function request(_x10) {\n        return _request.apply(this, arguments);\n      }\n\n      return request;\n    }()\n    /**\n     * Determine the compute environment in which the code is running.\n     */\n\n  }, {\n    key: \"getEnv\",\n    value: function getEnv() {\n      return envDetect_1.getEnv();\n    }\n    /**\n     * Sign the given data with the current private key, or go out\n     * to the IAM API to sign it.\n     * @param data The data to be signed.\n     */\n\n  }, {\n    key: \"sign\",\n    value: function () {\n      var _sign = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(data) {\n        var client, crypto, _sign2, projectId, creds;\n\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.getClient();\n\n              case 2:\n                client = _context18.sent;\n                crypto = crypto_1.createCrypto();\n\n                if (!(client instanceof jwtclient_1.JWT && client.key)) {\n                  _context18.next = 9;\n                  break;\n                }\n\n                _context18.next = 7;\n                return crypto.sign(client.key, data);\n\n              case 7:\n                _sign2 = _context18.sent;\n                return _context18.abrupt(\"return\", _sign2);\n\n              case 9:\n                if (!(client instanceof baseexternalclient_1.BaseExternalAccountClient && client.getServiceAccountEmail())) {\n                  _context18.next = 11;\n                  break;\n                }\n\n                return _context18.abrupt(\"return\", this.signBlob(crypto, client.getServiceAccountEmail(), data));\n\n              case 11:\n                _context18.next = 13;\n                return this.getProjectId();\n\n              case 13:\n                projectId = _context18.sent;\n\n                if (projectId) {\n                  _context18.next = 16;\n                  break;\n                }\n\n                throw new Error('Cannot sign data without a project ID.');\n\n              case 16:\n                _context18.next = 18;\n                return this.getCredentials();\n\n              case 18:\n                creds = _context18.sent;\n\n                if (creds.client_email) {\n                  _context18.next = 21;\n                  break;\n                }\n\n                throw new Error('Cannot sign data without `client_email`.');\n\n              case 21:\n                return _context18.abrupt(\"return\", this.signBlob(crypto, creds.client_email, data));\n\n              case 22:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function sign(_x11) {\n        return _sign.apply(this, arguments);\n      }\n\n      return sign;\n    }()\n  }, {\n    key: \"signBlob\",\n    value: function () {\n      var _signBlob = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(crypto, emailOrUniqueId, data) {\n        var url, res;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                url = 'https://iamcredentials.googleapis.com/v1/projects/-/serviceAccounts/' + \"\".concat(emailOrUniqueId, \":signBlob\");\n                _context19.next = 3;\n                return this.request({\n                  method: 'POST',\n                  url: url,\n                  data: {\n                    payload: crypto.encodeBase64StringUtf8(data)\n                  }\n                });\n\n              case 3:\n                res = _context19.sent;\n                return _context19.abrupt(\"return\", res.data.signedBlob);\n\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function signBlob(_x12, _x13, _x14) {\n        return _signBlob.apply(this, arguments);\n      }\n\n      return signBlob;\n    }()\n  }, {\n    key: \"isGCE\",\n    get: function get() {\n      return this.checkIsGCE;\n    }\n  }]);\n\n  return GoogleAuth;\n}();\n\nexports.GoogleAuth = GoogleAuth;\n/**\n * Export DefaultTransporter as a static property of the class.\n */\n\nGoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;","map":null,"metadata":{},"sourceType":"script"}