{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.operation = exports.Operation = void 0;\n\nvar events_1 = require(\"events\");\n\nvar status_1 = require(\"../status\");\n\nvar googleError_1 = require(\"../googleError\");\n\nvar operationProtos = require(\"../../protos/operations\");\n\nvar Operation = /*#__PURE__*/function (_events_1$EventEmitte) {\n  _inherits(Operation, _events_1$EventEmitte);\n\n  /**\n   * Wrapper for a google.longrunnung.Operation.\n   *\n   * @constructor\n   *\n   * @param {google.longrunning.Operation} grpcOp - The operation to be wrapped.\n   * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n   * operations service client and unpacking mechanisms for the operation.\n   * @param {BackoffSettings} backoffSettings - The backoff settings used in\n   * in polling the operation.\n   * @param {CallOptions} callOptions - CallOptions used in making get operation\n   * requests.\n   */\n  function Operation(grpcOp, longrunningDescriptor, backoffSettings, callOptions) {\n    var _this;\n\n    _classCallCheck(this, Operation);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Operation).call(this));\n    _this.completeListeners = 0;\n    _this.hasActiveListeners = false;\n    _this.latestResponse = grpcOp;\n    _this.name = _this.latestResponse.name;\n    _this.done = _this.latestResponse.done;\n    _this.error = _this.latestResponse.error;\n    _this.longrunningDescriptor = longrunningDescriptor;\n    _this.result = null;\n    _this.metadata = null;\n    _this.backoffSettings = backoffSettings;\n\n    _this._unpackResponse(grpcOp);\n\n    _this._listenForEvents();\n\n    _this._callOptions = callOptions;\n    return _this;\n  }\n  /**\n   * Begin listening for events on the operation. This method keeps track of how\n   * many \"complete\" listeners are registered and removed, making sure polling\n   * is handled automatically.\n   *\n   * As long as there is one active \"complete\" listener, the connection is open.\n   * When there are no more listeners, the polling stops.\n   *\n   * @private\n   */\n\n\n  _createClass(Operation, [{\n    key: \"_listenForEvents\",\n    value: function _listenForEvents() {\n      var _this2 = this;\n\n      this.on('newListener', function (event) {\n        if (event === 'complete') {\n          _this2.completeListeners++;\n\n          if (!_this2.hasActiveListeners) {\n            _this2.hasActiveListeners = true;\n\n            _this2.startPolling_();\n          }\n        }\n      });\n      this.on('removeListener', function (event) {\n        if (event === 'complete' && --_this2.completeListeners === 0) {\n          _this2.hasActiveListeners = false;\n        }\n      });\n    }\n    /**\n     * Cancels current polling api call and cancels the operation.\n     *\n     * @return {Promise} the promise of the OperationsClient#cancelOperation api\n     * request.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this.currentCallPromise_) {\n        this.currentCallPromise_.cancel();\n      }\n\n      var operationsClient = this.longrunningDescriptor.operationsClient;\n      var cancelRequest = new operationProtos.google.longrunning.CancelOperationRequest();\n      cancelRequest.name = this.latestResponse.name;\n      return operationsClient.cancelOperation(cancelRequest);\n    }\n  }, {\n    key: \"getOperation\",\n    value: function getOperation(callback) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      var self = this;\n      var operationsClient = this.longrunningDescriptor.operationsClient;\n\n      function promisifyResponse() {\n        if (!callback) {\n          return new Promise(function (resolve, reject) {\n            if (self.latestResponse.error) {\n              var error = new googleError_1.GoogleError(self.latestResponse.error.message);\n              error.code = self.latestResponse.error.code;\n              reject(error);\n            } else {\n              resolve([self.result, self.metadata, self.latestResponse]);\n            }\n          });\n        }\n\n        return;\n      }\n\n      if (this.latestResponse.done) {\n        this._unpackResponse(this.latestResponse, callback);\n\n        return promisifyResponse();\n      }\n\n      var request = new operationProtos.google.longrunning.GetOperationRequest();\n      request.name = this.latestResponse.name;\n      this.currentCallPromise_ = operationsClient.getOperationInternal(request, this._callOptions);\n      var noCallbackPromise = this.currentCallPromise_.then(function (responses) {\n        self.latestResponse = responses[0];\n\n        self._unpackResponse(responses[0], callback);\n\n        return promisifyResponse();\n      });\n\n      if (!callback) {\n        return noCallbackPromise;\n      }\n    }\n  }, {\n    key: \"_unpackResponse\",\n    value: function _unpackResponse(op, callback) {\n      var responseDecoder = this.longrunningDescriptor.responseDecoder;\n      var metadataDecoder = this.longrunningDescriptor.metadataDecoder;\n      var response;\n      var metadata;\n\n      if (op.done) {\n        if (op.result === 'error') {\n          var error = new googleError_1.GoogleError(op.error.message);\n          error.code = op.error.code;\n          this.error = error;\n\n          if (callback) {\n            callback(error);\n          }\n\n          return;\n        }\n\n        if (responseDecoder && op.response) {\n          this.response = op.response;\n          response = responseDecoder(op.response.value);\n          this.result = response;\n          this.done = true;\n        }\n      }\n\n      if (metadataDecoder && op.metadata) {\n        metadata = metadataDecoder(op.metadata.value);\n        this.metadata = metadata;\n      }\n\n      if (callback) {\n        callback(null, response, metadata, op);\n      }\n    }\n    /**\n     * Poll `getOperation` to check the operation's status. This runs a loop to\n     * ping using the backoff strategy specified at initialization.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"startPolling_\",\n    value: function startPolling_() {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      var self = this;\n      var now = new Date();\n      var delayMult = this.backoffSettings.retryDelayMultiplier;\n      var maxDelay = this.backoffSettings.maxRetryDelayMillis;\n      var delay = this.backoffSettings.initialRetryDelayMillis;\n      var deadline = Infinity;\n\n      if (this.backoffSettings.totalTimeoutMillis) {\n        deadline = now.getTime() + this.backoffSettings.totalTimeoutMillis;\n      }\n\n      var previousMetadataBytes;\n\n      if (this.latestResponse.metadata) {\n        previousMetadataBytes = this.latestResponse.metadata.value;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      function emit(event) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        self.emit.apply(self, [event].concat(args));\n      } // Helper function to replace nodejs buffer's equals()\n\n\n      function arrayEquals(a, b) {\n        if (a.byteLength !== b.byteLength) {\n          return false;\n        }\n\n        for (var i = 0; i < a.byteLength; ++i) {\n          if (a[i] !== b[i]) return false;\n        }\n\n        return true;\n      }\n\n      function retry() {\n        if (!self.hasActiveListeners) {\n          return;\n        }\n\n        if (now.getTime() >= deadline) {\n          var error = new googleError_1.GoogleError('Total timeout exceeded before any response was received');\n          error.code = status_1.Status.DEADLINE_EXCEEDED;\n          setImmediate(emit, 'error', error);\n          return;\n        }\n\n        self.getOperation(function (err, result, metadata, rawResponse) {\n          if (err) {\n            setImmediate(emit, 'error', err);\n            return;\n          }\n\n          if (!result) {\n            if (rawResponse.metadata && (!previousMetadataBytes || rawResponse && !arrayEquals(rawResponse.metadata.value, previousMetadataBytes))) {\n              setImmediate(emit, 'progress', metadata, rawResponse);\n              previousMetadataBytes = rawResponse.metadata.value;\n            } // special case: some APIs fail to set either result or error\n            // but set done = true (e.g. speech with silent file).\n            // Don't hang forever in this case.\n\n\n            if (rawResponse.done) {\n              var _error = new googleError_1.GoogleError('Long running operation has finished but there was no result');\n\n              _error.code = status_1.Status.UNKNOWN;\n              setImmediate(emit, 'error', _error);\n              return;\n            }\n\n            setTimeout(function () {\n              now = new Date();\n              delay = Math.min(delay * delayMult, maxDelay);\n              retry();\n            }, delay);\n            return;\n          }\n\n          setImmediate(emit, 'complete', result, metadata, rawResponse);\n        });\n      }\n\n      retry();\n    }\n    /**\n     * Wraps the `complete` and `error` events in a Promise.\n     *\n     * @return {promise} - Promise that resolves on operation completion and rejects\n     * on operation error.\n     */\n\n  }, {\n    key: \"promise\",\n    value: function promise() {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3.on('error', reject).on('complete', function (result, metadata, rawResponse) {\n          resolve([result, metadata, rawResponse]);\n        });\n      });\n    }\n  }]);\n\n  return Operation;\n}(events_1.EventEmitter);\n\nexports.Operation = Operation;\n/**\n * Method used to create Operation objects.\n *\n * @constructor\n *\n * @param {google.longrunning.Operation} op - The operation to be wrapped.\n * @param {LongRunningDescriptor} longrunningDescriptor - This defines the\n * operations service client and unpacking mechanisms for the operation.\n * @param {BackoffSettings} backoffSettings - The backoff settings used in\n * in polling the operation.\n * @param {CallOptions=} callOptions - CallOptions used in making get operation\n * requests.\n */\n\nfunction operation(op, longrunningDescriptor, backoffSettings, callOptions) {\n  return new Operation(op, longrunningDescriptor, backoffSettings, callOptions);\n}\n\nexports.operation = operation;","map":null,"metadata":{},"sourceType":"script"}