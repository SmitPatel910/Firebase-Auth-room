{"ast":null,"code":"\"use strict\";\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\n\nvar wrappers = exports;\n\nvar Message = require(\"./message\");\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n// Custom wrapper for Any\n\n\nwrappers[\".google.protobuf.Any\"] = {\n  fromObject: function fromObject(object) {\n    // unwrap value type if mapped\n    if (object && object[\"@type\"]) {\n      // Only use fully qualified type name after the last '/'\n      var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n\n      if (type) {\n        // type_url does not accept leading \".\"\n        var type_url = object[\"@type\"].charAt(0) === \".\" ? object[\"@type\"].substr(1) : object[\"@type\"]; // type_url prefix is optional, but path seperator is required\n\n        if (type_url.indexOf(\"/\") === -1) {\n          type_url = \"/\" + type_url;\n        }\n\n        return this.create({\n          type_url: type_url,\n          value: type.encode(type.fromObject(object)).finish()\n        });\n      }\n    }\n\n    return this.fromObject(object);\n  },\n  toObject: function toObject(message, options) {\n    // Default prefix\n    var googleApi = \"type.googleapis.com/\";\n    var prefix = \"\";\n    var name = \"\"; // decode value if requested and unmapped\n\n    if (options && options.json && message.type_url && message.value) {\n      // Only use fully qualified type name after the last '/'\n      name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1); // Separate the prefix used\n\n      prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n\n      if (type) message = type.decode(message.value);\n    } // wrap value if unmapped\n\n\n    if (!(message instanceof this.ctor) && message instanceof Message) {\n      var object = message.$type.toObject(message, options);\n      var messageName = message.$type.fullName[0] === \".\" ? message.$type.fullName.substr(1) : message.$type.fullName; // Default to type.googleapis.com prefix if no prefix is used\n\n      if (prefix === \"\") {\n        prefix = googleApi;\n      }\n\n      name = prefix + messageName;\n      object[\"@type\"] = name;\n      return object;\n    }\n\n    return this.toObject(message, options);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}