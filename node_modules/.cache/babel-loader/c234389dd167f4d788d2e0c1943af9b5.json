{"ast":null,"code":"var _require = require('crypto'),\n    createSign = _require.createSign,\n    createVerify = _require.createVerify,\n    constants = _require.constants;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar resolveNodeAlg = require('../help/node_alg');\n\nvar _require3 = require('../help/key_object'),\n    asInput = _require3.asInput;\n\nvar sign = function sign(nodeAlg, _ref, payload) {\n  var keyObject = _ref[KEYOBJECT];\n  var key = asInput(keyObject, false);\n  return createSign(nodeAlg).update(payload).sign({\n    key: key,\n    padding: constants.RSA_PKCS1_PSS_PADDING,\n    saltLength: constants.RSA_PSS_SALTLEN_DIGEST\n  });\n};\n\nvar verify = function verify(nodeAlg, _ref2, payload, signature) {\n  var keyObject = _ref2[KEYOBJECT];\n  var key = asInput(keyObject, true);\n  return createVerify(nodeAlg).update(payload).verify({\n    key: key,\n    padding: constants.RSA_PKCS1_PSS_PADDING,\n    saltLength: constants.RSA_PSS_SALTLEN_DIGEST\n  }, signature);\n};\n\nvar LENGTHS = {\n  PS256: 528,\n  PS384: 784,\n  PS512: 1040\n};\n\nmodule.exports = function (JWA, JWK) {\n  ['PS256', 'PS384', 'PS512'].forEach(function (jwaAlg) {\n    var nodeAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg));\n\n    JWK.RSA.sign[jwaAlg] = function (key) {\n      return key.private && JWK.RSA.verify[jwaAlg](key);\n    };\n\n    JWK.RSA.verify[jwaAlg] = function (key) {\n      return (key.use === 'sig' || key.use === undefined) && key.length >= LENGTHS[jwaAlg];\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"script"}