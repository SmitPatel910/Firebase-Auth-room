{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseApp = exports.FirebaseAppInternals = void 0;\n\nvar credential_internal_1 = require(\"./credential/credential-internal\");\n\nvar validator = require(\"./utils/validator\");\n\nvar deep_copy_1 = require(\"./utils/deep-copy\");\n\nvar error_1 = require(\"./utils/error\");\n\nvar TOKEN_EXPIRY_THRESHOLD_MILLIS = 5 * 60 * 1000;\n/**\n * Internals of a FirebaseApp instance.\n */\n\nvar FirebaseAppInternals =\n/** @class */\nfunction () {\n  function FirebaseAppInternals(credential_) {\n    this.credential_ = credential_;\n    this.tokenListeners_ = [];\n  }\n\n  FirebaseAppInternals.prototype.getToken = function (forceRefresh) {\n    if (forceRefresh === void 0) {\n      forceRefresh = false;\n    }\n\n    if (forceRefresh || this.shouldRefresh()) {\n      return this.refreshToken();\n    }\n\n    return Promise.resolve(this.cachedToken_);\n  };\n\n  FirebaseAppInternals.prototype.getCachedToken = function () {\n    return this.cachedToken_ || null;\n  };\n\n  FirebaseAppInternals.prototype.refreshToken = function () {\n    var _this = this;\n\n    return Promise.resolve(this.credential_.getAccessToken()).then(function (result) {\n      // Since the developer can provide the credential implementation, we want to weakly verify\n      // the return type until the type is properly exported.\n      if (!validator.isNonNullObject(result) || typeof result.expires_in !== 'number' || typeof result.access_token !== 'string') {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, \"Invalid access token generated: \\\"\" + JSON.stringify(result) + \"\\\". Valid access \" + 'tokens must be an object with the \"expires_in\" (number) and \"access_token\" ' + '(string) properties.');\n      }\n\n      var token = {\n        accessToken: result.access_token,\n        expirationTime: Date.now() + result.expires_in * 1000\n      };\n\n      if (!_this.cachedToken_ || _this.cachedToken_.accessToken !== token.accessToken || _this.cachedToken_.expirationTime !== token.expirationTime) {\n        // Update the cache before firing listeners. Listeners may directly query the\n        // cached token state.\n        _this.cachedToken_ = token;\n\n        _this.tokenListeners_.forEach(function (listener) {\n          listener(token.accessToken);\n        });\n      }\n\n      return token;\n    }).catch(function (error) {\n      var errorMessage = typeof error === 'string' ? error : error.message;\n      errorMessage = 'Credential implementation provided to initializeApp() via the ' + '\"credential\" property failed to fetch a valid Google OAuth2 access token with the ' + (\"following error: \\\"\" + errorMessage + \"\\\".\");\n\n      if (errorMessage.indexOf('invalid_grant') !== -1) {\n        errorMessage += ' There are two likely causes: (1) your server time is not properly ' + 'synced or (2) your certificate key file has been revoked. To solve (1), re-sync the ' + 'time on your server. To solve (2), make sure the key ID for your key file is still ' + 'present at https://console.firebase.google.com/iam-admin/serviceaccounts/project. If ' + 'not, generate a new key file at ' + 'https://console.firebase.google.com/project/_/settings/serviceaccounts/adminsdk.';\n      }\n\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_CREDENTIAL, errorMessage);\n    });\n  };\n\n  FirebaseAppInternals.prototype.shouldRefresh = function () {\n    return !this.cachedToken_ || this.cachedToken_.expirationTime - Date.now() <= TOKEN_EXPIRY_THRESHOLD_MILLIS;\n  };\n  /**\n   * Adds a listener that is called each time a token changes.\n   *\n   * @param listener The listener that will be called with each new token.\n   */\n\n\n  FirebaseAppInternals.prototype.addAuthTokenListener = function (listener) {\n    this.tokenListeners_.push(listener);\n\n    if (this.cachedToken_) {\n      listener(this.cachedToken_.accessToken);\n    }\n  };\n  /**\n   * Removes a token listener.\n   *\n   * @param listener The listener to remove.\n   */\n\n\n  FirebaseAppInternals.prototype.removeAuthTokenListener = function (listener) {\n    this.tokenListeners_ = this.tokenListeners_.filter(function (other) {\n      return other !== listener;\n    });\n  };\n\n  return FirebaseAppInternals;\n}();\n\nexports.FirebaseAppInternals = FirebaseAppInternals;\n/**\n * Global context object for a collection of services using a shared authentication state.\n */\n\nvar FirebaseApp =\n/** @class */\nfunction () {\n  function FirebaseApp(options, name, firebaseInternals_) {\n    this.firebaseInternals_ = firebaseInternals_;\n    this.services_ = {};\n    this.isDeleted_ = false;\n    this.name_ = name;\n    this.options_ = deep_copy_1.deepCopy(options);\n\n    if (!validator.isNonNullObject(this.options_)) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Invalid Firebase app options passed as the first argument to initializeApp() for the ' + (\"app named \\\"\" + this.name_ + \"\\\". Options must be a non-null object.\"));\n    }\n\n    var hasCredential = ('credential' in this.options_);\n\n    if (!hasCredential) {\n      this.options_.credential = credential_internal_1.getApplicationDefault(this.options_.httpAgent);\n    }\n\n    var credential = this.options_.credential;\n\n    if (typeof credential !== 'object' || credential === null || typeof credential.getAccessToken !== 'function') {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INVALID_APP_OPTIONS, 'Invalid Firebase app options passed as the first argument to initializeApp() for the ' + (\"app named \\\"\" + this.name_ + \"\\\". The \\\"credential\\\" property must be an object which implements \") + 'the Credential interface.');\n    }\n\n    this.INTERNAL = new FirebaseAppInternals(credential);\n  }\n  /**\n   * Returns the Auth service instance associated with this app.\n   *\n   * @return The Auth service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.auth = function () {\n    var _this = this;\n\n    return this.ensureService_('auth', function () {\n      var authService = require('./auth/auth').Auth;\n\n      return new authService(_this);\n    });\n  };\n  /**\n   * Returns the Database service for the specified URL, and the current app.\n   *\n   * @return The Database service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.database = function (url) {\n    var _this = this;\n\n    var service = this.ensureService_('database', function () {\n      var dbService = require('./database/database-internal').DatabaseService;\n\n      return new dbService(_this);\n    });\n    return service.getDatabase(url);\n  };\n  /**\n   * Returns the Messaging service instance associated with this app.\n   *\n   * @return The Messaging service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.messaging = function () {\n    var _this = this;\n\n    return this.ensureService_('messaging', function () {\n      var messagingService = require('./messaging/messaging').Messaging;\n\n      return new messagingService(_this);\n    });\n  };\n  /**\n   * Returns the Storage service instance associated with this app.\n   *\n   * @return The Storage service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.storage = function () {\n    var _this = this;\n\n    return this.ensureService_('storage', function () {\n      var storageService = require('./storage/storage').Storage;\n\n      return new storageService(_this);\n    });\n  };\n\n  FirebaseApp.prototype.firestore = function () {\n    var _this = this;\n\n    var service = this.ensureService_('firestore', function () {\n      var firestoreService = require('./firestore/firestore-internal').FirestoreService;\n\n      return new firestoreService(_this);\n    });\n    return service.client;\n  };\n  /**\n   * Returns the `Installations` service instance associated with this app.\n   *\n   * @return The `Installations` service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.installations = function () {\n    var _this = this;\n\n    return this.ensureService_('installations', function () {\n      var fisService = require('./installations/installations').Installations;\n\n      return new fisService(_this);\n    });\n  };\n  /**\n   * Returns the InstanceId service instance associated with this app.\n   *\n   * This API is deprecated. Use the `installations()` API instead.\n   *\n   * @return The InstanceId service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.instanceId = function () {\n    var _this = this;\n\n    return this.ensureService_('iid', function () {\n      var iidService = require('./instance-id/instance-id').InstanceId;\n\n      return new iidService(_this);\n    });\n  };\n  /**\n   * Returns the MachineLearning service instance associated with this app.\n   *\n   * @return The Machine Learning service instance of this app\n   */\n\n\n  FirebaseApp.prototype.machineLearning = function () {\n    var _this = this;\n\n    return this.ensureService_('machine-learning', function () {\n      var machineLearningService = require('./machine-learning/machine-learning').MachineLearning;\n\n      return new machineLearningService(_this);\n    });\n  };\n  /**\n   * Returns the ProjectManagement service instance associated with this app.\n   *\n   * @return The ProjectManagement service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.projectManagement = function () {\n    var _this = this;\n\n    return this.ensureService_('project-management', function () {\n      var projectManagementService = require('./project-management/project-management').ProjectManagement;\n\n      return new projectManagementService(_this);\n    });\n  };\n  /**\n   * Returns the SecurityRules service instance associated with this app.\n   *\n   * @return The SecurityRules service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.securityRules = function () {\n    var _this = this;\n\n    return this.ensureService_('security-rules', function () {\n      var securityRulesService = require('./security-rules/security-rules').SecurityRules;\n\n      return new securityRulesService(_this);\n    });\n  };\n  /**\n   * Returns the RemoteConfig service instance associated with this app.\n   *\n   * @return The RemoteConfig service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.remoteConfig = function () {\n    var _this = this;\n\n    return this.ensureService_('remoteConfig', function () {\n      var remoteConfigService = require('./remote-config/remote-config').RemoteConfig;\n\n      return new remoteConfigService(_this);\n    });\n  };\n  /**\n   * Returns the AppCheck service instance associated with this app.\n   *\n   * @return The AppCheck service instance of this app.\n   */\n\n\n  FirebaseApp.prototype.appCheck = function () {\n    var _this = this;\n\n    return this.ensureService_('appCheck', function () {\n      var appCheckService = require('./app-check/app-check').AppCheck;\n\n      return new appCheckService(_this);\n    });\n  };\n\n  Object.defineProperty(FirebaseApp.prototype, \"name\", {\n    /**\n     * Returns the name of the FirebaseApp instance.\n     *\n     * @return The name of the FirebaseApp instance.\n     */\n    get: function get() {\n      this.checkDestroyed_();\n      return this.name_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseApp.prototype, \"options\", {\n    /**\n     * Returns the options for the FirebaseApp instance.\n     *\n     * @return The options for the FirebaseApp instance.\n     */\n    get: function get() {\n      this.checkDestroyed_();\n      return deep_copy_1.deepCopy(this.options_);\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Deletes the FirebaseApp instance.\n   *\n   * @return An empty Promise fulfilled once the FirebaseApp instance is deleted.\n   */\n\n  FirebaseApp.prototype.delete = function () {\n    var _this = this;\n\n    this.checkDestroyed_();\n    this.firebaseInternals_.removeApp(this.name_);\n    return Promise.all(Object.keys(this.services_).map(function (serviceName) {\n      var service = _this.services_[serviceName];\n\n      if (isStateful(service)) {\n        return service.delete();\n      }\n\n      return Promise.resolve();\n    })).then(function () {\n      _this.services_ = {};\n      _this.isDeleted_ = true;\n    });\n  };\n\n  FirebaseApp.prototype.ensureService_ = function (serviceName, initializer) {\n    this.checkDestroyed_();\n\n    if (!(serviceName in this.services_)) {\n      this.services_[serviceName] = initializer();\n    }\n\n    return this.services_[serviceName];\n  };\n  /**\n   * Throws an Error if the FirebaseApp instance has already been deleted.\n   */\n\n\n  FirebaseApp.prototype.checkDestroyed_ = function () {\n    if (this.isDeleted_) {\n      throw new error_1.FirebaseAppError(error_1.AppErrorCodes.APP_DELETED, \"Firebase app named \\\"\" + this.name_ + \"\\\" has already been deleted.\");\n    }\n  };\n\n  return FirebaseApp;\n}();\n\nexports.FirebaseApp = FirebaseApp;\n\nfunction isStateful(service) {\n  return typeof service.delete === 'function';\n}","map":null,"metadata":{},"sourceType":"script"}