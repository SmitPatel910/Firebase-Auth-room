{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTopic = exports.isURL = exports.isUTCDateString = exports.isISODateString = exports.isPhoneNumber = exports.isEmail = exports.isPassword = exports.isUid = exports.isNonNullObject = exports.isObject = exports.isNonEmptyString = exports.isBase64String = exports.isString = exports.isNumber = exports.isBoolean = exports.isNonEmptyArray = exports.isArray = exports.isBuffer = void 0;\n\nvar url = require(\"url\");\n/**\n * Validates that a value is a byte buffer.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is byte buffer or not.\n */\n\n\nfunction isBuffer(value) {\n  return value instanceof Buffer;\n}\n\nexports.isBuffer = isBuffer;\n/**\n * Validates that a value is an array.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is an array or not.\n */\n\nfunction isArray(value) {\n  return Array.isArray(value);\n}\n\nexports.isArray = isArray;\n/**\n * Validates that a value is a non-empty array.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a non-empty array or not.\n */\n\nfunction isNonEmptyArray(value) {\n  return isArray(value) && value.length !== 0;\n}\n\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * Validates that a value is a boolean.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a boolean or not.\n */\n\nfunction isBoolean(value) {\n  return typeof value === 'boolean';\n}\n\nexports.isBoolean = isBoolean;\n/**\n * Validates that a value is a number.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a number or not.\n */\n\nfunction isNumber(value) {\n  return typeof value === 'number' && !isNaN(value);\n}\n\nexports.isNumber = isNumber;\n/**\n * Validates that a value is a string.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a string or not.\n */\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nexports.isString = isString;\n/**\n * Validates that a value is a base64 string.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a base64 string or not.\n */\n\nfunction isBase64String(value) {\n  if (!isString(value)) {\n    return false;\n  }\n\n  return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(value);\n}\n\nexports.isBase64String = isBase64String;\n/**\n * Validates that a value is a non-empty string.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a non-empty string or not.\n */\n\nfunction isNonEmptyString(value) {\n  return isString(value) && value !== '';\n}\n\nexports.isNonEmptyString = isNonEmptyString;\n/**\n * Validates that a value is a nullable object.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is an object or not.\n */\n\nfunction isObject(value) {\n  return typeof value === 'object' && !isArray(value);\n}\n\nexports.isObject = isObject;\n/**\n * Validates that a value is a non-null object.\n *\n * @param {any} value The value to validate.\n * @return {boolean} Whether the value is a non-null object or not.\n */\n\nfunction isNonNullObject(value) {\n  return isObject(value) && value !== null;\n}\n\nexports.isNonNullObject = isNonNullObject;\n/**\n * Validates that a string is a valid Firebase Auth uid.\n *\n * @param {any} uid The string to validate.\n * @return {boolean} Whether the string is a valid Firebase Auth uid.\n */\n\nfunction isUid(uid) {\n  return typeof uid === 'string' && uid.length > 0 && uid.length <= 128;\n}\n\nexports.isUid = isUid;\n/**\n * Validates that a string is a valid Firebase Auth password.\n *\n * @param {any} password The password string to validate.\n * @return {boolean} Whether the string is a valid Firebase Auth password.\n */\n\nfunction isPassword(password) {\n  // A password must be a string of at least 6 characters.\n  return typeof password === 'string' && password.length >= 6;\n}\n\nexports.isPassword = isPassword;\n/**\n * Validates that a string is a valid email.\n *\n * @param {any} email The string to validate.\n * @return {boolean} Whether the string is valid email or not.\n */\n\nfunction isEmail(email) {\n  if (typeof email !== 'string') {\n    return false;\n  } // There must at least one character before the @ symbol and another after.\n\n\n  var re = /^[^@]+@[^@]+$/;\n  return re.test(email);\n}\n\nexports.isEmail = isEmail;\n/**\n * Validates that a string is a valid phone number.\n *\n * @param {any} phoneNumber The string to validate.\n * @return {boolean} Whether the string is a valid phone number or not.\n */\n\nfunction isPhoneNumber(phoneNumber) {\n  if (typeof phoneNumber !== 'string') {\n    return false;\n  } // Phone number validation is very lax here. Backend will enforce E.164\n  // spec compliance and will normalize accordingly.\n  // The phone number string must be non-empty and starts with a plus sign.\n\n\n  var re1 = /^\\+/; // The phone number string must contain at least one alphanumeric character.\n\n  var re2 = /[\\da-zA-Z]+/;\n  return re1.test(phoneNumber) && re2.test(phoneNumber);\n}\n\nexports.isPhoneNumber = isPhoneNumber;\n/**\n * Validates that a string is a valid ISO date string.\n *\n * @param dateString The string to validate.\n * @return Whether the string is a valid ISO date string.\n */\n\nfunction isISODateString(dateString) {\n  try {\n    return isNonEmptyString(dateString) && new Date(dateString).toISOString() === dateString;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.isISODateString = isISODateString;\n/**\n * Validates that a string is a valid UTC date string.\n *\n * @param dateString The string to validate.\n * @return Whether the string is a valid UTC date string.\n */\n\nfunction isUTCDateString(dateString) {\n  try {\n    return isNonEmptyString(dateString) && new Date(dateString).toUTCString() === dateString;\n  } catch (e) {\n    return false;\n  }\n}\n\nexports.isUTCDateString = isUTCDateString;\n/**\n * Validates that a string is a valid web URL.\n *\n * @param {any} urlStr The string to validate.\n * @return {boolean} Whether the string is valid web URL or not.\n */\n\nfunction isURL(urlStr) {\n  if (typeof urlStr !== 'string') {\n    return false;\n  } // Lookup illegal characters.\n\n\n  var re = /[^a-z0-9:/?#[\\]@!$&'()*+,;=.\\-_~%]/i;\n\n  if (re.test(urlStr)) {\n    return false;\n  }\n\n  try {\n    var uri = url.parse(urlStr);\n    var scheme = uri.protocol;\n    var slashes = uri.slashes;\n    var hostname = uri.hostname;\n    var pathname = uri.pathname;\n\n    if (scheme !== 'http:' && scheme !== 'https:' || !slashes) {\n      return false;\n    } // Validate hostname: Can contain letters, numbers, underscore and dashes separated by a dot.\n    // Each zone must not start with a hyphen or underscore.\n\n\n    if (!hostname || !/^[a-zA-Z0-9]+[\\w-]*([.]?[a-zA-Z0-9]+[\\w-]*)*$/.test(hostname)) {\n      return false;\n    } // Allow for pathnames: (/chars+)*/?\n    // Where chars can be a combination of: a-z A-Z 0-9 - _ . ~ ! $ & ' ( ) * + , ; = : @ %\n\n\n    var pathnameRe = /^(\\/[\\w\\-.~!$'()*+,;=:@%]+)*\\/?$/; // Validate pathname.\n\n    if (pathname && pathname !== '/' && !pathnameRe.test(pathname)) {\n      return false;\n    } // Allow any query string and hash as long as no invalid character is used.\n\n  } catch (e) {\n    return false;\n  }\n\n  return true;\n}\n\nexports.isURL = isURL;\n/**\n * Validates that the provided topic is a valid FCM topic name.\n *\n * @param {any} topic The topic to validate.\n * @return {boolean} Whether the provided topic is a valid FCM topic name.\n */\n\nfunction isTopic(topic) {\n  if (typeof topic !== 'string') {\n    return false;\n  }\n\n  var VALID_TOPIC_REGEX = /^(\\/topics\\/)?(private\\/)?[a-zA-Z0-9-_.~%]+$/;\n  return VALID_TOPIC_REGEX.test(topic);\n}\n\nexports.isTopic = isTopic;","map":null,"metadata":{},"sourceType":"script"}