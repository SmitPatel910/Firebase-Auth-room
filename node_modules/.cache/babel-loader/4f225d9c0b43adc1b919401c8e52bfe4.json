{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar Queue = require('yocto-queue');\n\nvar pLimit = function pLimit(concurrency) {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n\n  var queue = new Queue();\n  var activeCount = 0;\n\n  var next = function next() {\n    activeCount--;\n\n    if (queue.size > 0) {\n      queue.dequeue()();\n    }\n  };\n\n  var run = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(fn, resolve) {\n      var _len,\n          args,\n          _key,\n          result,\n          _args2 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              for (_len = _args2.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n                args[_key - 2] = _args2[_key];\n              }\n\n              activeCount++;\n              result = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        return _context.abrupt(\"return\", fn.apply(void 0, args));\n\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }))();\n              resolve(result);\n              _context2.prev = 4;\n              _context2.next = 7;\n              return result;\n\n            case 7:\n              _context2.next = 11;\n              break;\n\n            case 9:\n              _context2.prev = 9;\n              _context2.t0 = _context2[\"catch\"](4);\n\n            case 11:\n              next();\n\n            case 12:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 9]]);\n    }));\n\n    return function run(_x, _x2) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var enqueue = function enqueue(fn, resolve) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n\n    queue.enqueue(run.bind.apply(run, [null, fn, resolve].concat(args)));\n\n    _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return Promise.resolve();\n\n            case 2:\n              if (activeCount < concurrency && queue.size > 0) {\n                queue.dequeue()();\n              }\n\n            case 3:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  };\n\n  var generator = function generator(fn) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    return new Promise(function (resolve) {\n      enqueue.apply(void 0, [fn, resolve].concat(args));\n    });\n  };\n\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: function get() {\n        return activeCount;\n      }\n    },\n    pendingCount: {\n      get: function get() {\n        return queue.size;\n      }\n    },\n    clearQueue: {\n      value: function value() {\n        queue.clear();\n      }\n    }\n  });\n  return generator;\n};\n\nmodule.exports = pLimit;","map":null,"metadata":{},"sourceType":"script"}