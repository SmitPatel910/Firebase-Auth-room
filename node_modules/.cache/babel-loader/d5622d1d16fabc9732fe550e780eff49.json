{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BatchRequestClient = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar PART_BOUNDARY = '__END_OF_PART__';\nvar TEN_SECONDS_IN_MILLIS = 10000;\n/**\n * An HTTP client that can be used to make batch requests. This client is not tied to any service\n * (FCM or otherwise). Therefore it can be used to make batch requests to any service that allows\n * it. If this requirement ever arises we can move this implementation to the utils module\n * where it can be easily shared among other modules.\n */\n\nvar BatchRequestClient =\n/** @class */\nfunction () {\n  /**\n   * @param {HttpClient} httpClient The client that will be used to make HTTP calls.\n   * @param {string} batchUrl The URL that accepts batch requests.\n   * @param {object=} commonHeaders Optional headers that will be included in all requests.\n   *\n   * @constructor\n   */\n  function BatchRequestClient(httpClient, batchUrl, commonHeaders) {\n    this.httpClient = httpClient;\n    this.batchUrl = batchUrl;\n    this.commonHeaders = commonHeaders;\n  }\n  /**\n   * Sends the given array of sub requests as a single batch, and parses the results into an array\n   * of HttpResponse objects.\n   *\n   * @param {SubRequest[]} requests An array of sub requests to send.\n   * @return {Promise<HttpResponse[]>} A promise that resolves when the send operation is complete.\n   */\n\n\n  BatchRequestClient.prototype.send = function (requests) {\n    var _this = this;\n\n    requests = requests.map(function (req) {\n      req.headers = Object.assign({}, _this.commonHeaders, req.headers);\n      return req;\n    });\n    var requestHeaders = {\n      'Content-Type': \"multipart/mixed; boundary=\" + PART_BOUNDARY\n    };\n    var request = {\n      method: 'POST',\n      url: this.batchUrl,\n      data: this.getMultipartPayload(requests),\n      headers: Object.assign({}, this.commonHeaders, requestHeaders),\n      timeout: TEN_SECONDS_IN_MILLIS\n    };\n    return this.httpClient.send(request).then(function (response) {\n      if (!response.multipart) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a multipart response.');\n      }\n\n      return response.multipart.map(function (buff) {\n        return api_request_1.parseHttpResponse(buff, request);\n      });\n    });\n  };\n\n  BatchRequestClient.prototype.getMultipartPayload = function (requests) {\n    var buffer = '';\n    requests.forEach(function (request, idx) {\n      buffer += createPart(request, PART_BOUNDARY, idx);\n    });\n    buffer += \"--\" + PART_BOUNDARY + \"--\\r\\n\";\n    return Buffer.from(buffer, 'utf-8');\n  };\n\n  return BatchRequestClient;\n}();\n\nexports.BatchRequestClient = BatchRequestClient;\n/**\n * Creates a single part in a multipart HTTP request body. The part consists of several headers\n * followed by the serialized sub request as the body. As per the requirements of the FCM batch\n * API, sets the content-type header to application/http, and the content-transfer-encoding to\n * binary.\n *\n * @param {SubRequest} request A sub request that will be used to populate the part.\n * @param {string} boundary Multipart boundary string.\n * @param {number} idx An index number that is used to set the content-id header.\n * @return {string} The part as a string that can be included in the HTTP body.\n */\n\nfunction createPart(request, boundary, idx) {\n  var serializedRequest = serializeSubRequest(request);\n  var part = \"--\" + boundary + \"\\r\\n\";\n  part += \"Content-Length: \" + serializedRequest.length + \"\\r\\n\";\n  part += 'Content-Type: application/http\\r\\n';\n  part += \"content-id: \" + (idx + 1) + \"\\r\\n\";\n  part += 'content-transfer-encoding: binary\\r\\n';\n  part += '\\r\\n';\n  part += serializedRequest + \"\\r\\n\";\n  return part;\n}\n/**\n * Serializes a sub request into a string that can be embedded in a multipart HTTP request. The\n * format of the string is the wire format of a typical HTTP request, consisting of a header and a\n * body.\n *\n * @param request {SubRequest} The sub request to be serialized.\n * @return {string} String representation of the SubRequest.\n */\n\n\nfunction serializeSubRequest(request) {\n  var requestBody = JSON.stringify(request.body);\n  var messagePayload = \"POST \" + request.url + \" HTTP/1.1\\r\\n\";\n  messagePayload += \"Content-Length: \" + requestBody.length + \"\\r\\n\";\n  messagePayload += 'Content-Type: application/json; charset=UTF-8\\r\\n';\n\n  if (request.headers) {\n    Object.keys(request.headers).forEach(function (key) {\n      messagePayload += key + \": \" + request.headers[key] + \"\\r\\n\";\n    });\n  }\n\n  messagePayload += '\\r\\n';\n  messagePayload += requestBody;\n  return messagePayload;\n}","map":null,"metadata":{},"sourceType":"script"}