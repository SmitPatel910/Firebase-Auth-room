{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nmodule.exports = writeFile;\nmodule.exports.sync = writeFileSync;\nmodule.exports._getTmpname = getTmpname; // for testing\n\nmodule.exports._cleanupOnExit = cleanupOnExit;\n\nvar fs = require('fs');\n\nvar MurmurHash3 = require('imurmurhash');\n\nvar onExit = require('signal-exit');\n\nvar path = require('path');\n\nvar isTypedArray = require('is-typedarray');\n\nvar typedArrayToBuffer = require('typedarray-to-buffer');\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar activeFiles = {}; // if we run inside of a worker_thread, `process.pid` is not unique\n\n/* istanbul ignore next */\n\nvar threadId = function getId() {\n  try {\n    var workerThreads = require('worker_threads'); /// if we are in main thread, this is set to `0`\n\n\n    return workerThreads.threadId;\n  } catch (e) {\n    // worker_threads are not available, fallback to 0\n    return 0;\n  }\n}();\n\nvar invocations = 0;\n\nfunction getTmpname(filename) {\n  return filename + '.' + MurmurHash3(__filename).hash(String(process.pid)).hash(String(threadId)).hash(String(++invocations)).result();\n}\n\nfunction cleanupOnExit(tmpfile) {\n  return function () {\n    try {\n      fs.unlinkSync(typeof tmpfile === 'function' ? tmpfile() : tmpfile);\n    } catch (_) {}\n  };\n}\n\nfunction serializeActiveFile(absoluteName) {\n  return new Promise(function (resolve) {\n    // make a queue if it doesn't already exist\n    if (!activeFiles[absoluteName]) activeFiles[absoluteName] = [];\n    activeFiles[absoluteName].push(resolve); // add this job to the queue\n\n    if (activeFiles[absoluteName].length === 1) resolve(); // kick off the first one\n  });\n} // https://github.com/isaacs/node-graceful-fs/blob/master/polyfills.js#L315-L342\n\n\nfunction isChownErrOk(err) {\n  if (err.code === 'ENOSYS') {\n    return true;\n  }\n\n  var nonroot = !process.getuid || process.getuid() !== 0;\n\n  if (nonroot) {\n    if (err.code === 'EINVAL' || err.code === 'EPERM') {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction writeFileAsync(_x, _x2) {\n  return _writeFileAsync.apply(this, arguments);\n}\n\nfunction _writeFileAsync() {\n  _writeFileAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filename, data) {\n    var options,\n        fd,\n        tmpfile,\n        removeOnExitHandler,\n        absoluteName,\n        truename,\n        stats,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n\n            if (typeof options === 'string') {\n              options = {\n                encoding: options\n              };\n            }\n\n            /* istanbul ignore next -- The closure only gets called when onExit triggers */\n            removeOnExitHandler = onExit(cleanupOnExit(function () {\n              return tmpfile;\n            }));\n            absoluteName = path.resolve(filename);\n            _context.prev = 4;\n            _context.next = 7;\n            return serializeActiveFile(absoluteName);\n\n          case 7:\n            _context.next = 9;\n            return promisify(fs.realpath)(filename).catch(function () {\n              return filename;\n            });\n\n          case 9:\n            truename = _context.sent;\n            tmpfile = getTmpname(truename);\n\n            if (!(!options.mode || !options.chown)) {\n              _context.next = 16;\n              break;\n            }\n\n            _context.next = 14;\n            return promisify(fs.stat)(truename).catch(function () {});\n\n          case 14:\n            stats = _context.sent;\n\n            if (stats) {\n              if (options.mode == null) {\n                options.mode = stats.mode;\n              }\n\n              if (options.chown == null && process.getuid) {\n                options.chown = {\n                  uid: stats.uid,\n                  gid: stats.gid\n                };\n              }\n            }\n\n          case 16:\n            _context.next = 18;\n            return promisify(fs.open)(tmpfile, 'w', options.mode);\n\n          case 18:\n            fd = _context.sent;\n\n            if (!options.tmpfileCreated) {\n              _context.next = 22;\n              break;\n            }\n\n            _context.next = 22;\n            return options.tmpfileCreated(tmpfile);\n\n          case 22:\n            if (isTypedArray(data)) {\n              data = typedArrayToBuffer(data);\n            }\n\n            if (!Buffer.isBuffer(data)) {\n              _context.next = 28;\n              break;\n            }\n\n            _context.next = 26;\n            return promisify(fs.write)(fd, data, 0, data.length, 0);\n\n          case 26:\n            _context.next = 31;\n            break;\n\n          case 28:\n            if (!(data != null)) {\n              _context.next = 31;\n              break;\n            }\n\n            _context.next = 31;\n            return promisify(fs.write)(fd, String(data), 0, String(options.encoding || 'utf8'));\n\n          case 31:\n            if (!(options.fsync !== false)) {\n              _context.next = 34;\n              break;\n            }\n\n            _context.next = 34;\n            return promisify(fs.fsync)(fd);\n\n          case 34:\n            _context.next = 36;\n            return promisify(fs.close)(fd);\n\n          case 36:\n            fd = null;\n\n            if (!options.chown) {\n              _context.next = 40;\n              break;\n            }\n\n            _context.next = 40;\n            return promisify(fs.chown)(tmpfile, options.chown.uid, options.chown.gid).catch(function (err) {\n              if (!isChownErrOk(err)) {\n                throw err;\n              }\n            });\n\n          case 40:\n            if (!options.mode) {\n              _context.next = 43;\n              break;\n            }\n\n            _context.next = 43;\n            return promisify(fs.chmod)(tmpfile, options.mode).catch(function (err) {\n              if (!isChownErrOk(err)) {\n                throw err;\n              }\n            });\n\n          case 43:\n            _context.next = 45;\n            return promisify(fs.rename)(tmpfile, truename);\n\n          case 45:\n            _context.prev = 45;\n\n            if (!fd) {\n              _context.next = 49;\n              break;\n            }\n\n            _context.next = 49;\n            return promisify(fs.close)(fd).catch(\n            /* istanbul ignore next */\n            function () {});\n\n          case 49:\n            removeOnExitHandler();\n            _context.next = 52;\n            return promisify(fs.unlink)(tmpfile).catch(function () {});\n\n          case 52:\n            activeFiles[absoluteName].shift(); // remove the element added by serializeSameFile\n\n            if (activeFiles[absoluteName].length > 0) {\n              activeFiles[absoluteName][0](); // start next job if one is pending\n            } else delete activeFiles[absoluteName];\n\n            return _context.finish(45);\n\n          case 55:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[4,, 45, 55]]);\n  }));\n  return _writeFileAsync.apply(this, arguments);\n}\n\nfunction writeFile(filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options;\n    options = {};\n  }\n\n  var promise = writeFileAsync(filename, data, options);\n\n  if (callback) {\n    promise.then(callback, callback);\n  }\n\n  return promise;\n}\n\nfunction writeFileSync(filename, data, options) {\n  if (typeof options === 'string') options = {\n    encoding: options\n  };else if (!options) options = {};\n\n  try {\n    filename = fs.realpathSync(filename);\n  } catch (ex) {// it's ok, it'll happen on a not yet existing file\n  }\n\n  var tmpfile = getTmpname(filename);\n\n  if (!options.mode || !options.chown) {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    try {\n      var stats = fs.statSync(filename);\n      options = Object.assign({}, options);\n\n      if (!options.mode) {\n        options.mode = stats.mode;\n      }\n\n      if (!options.chown && process.getuid) {\n        options.chown = {\n          uid: stats.uid,\n          gid: stats.gid\n        };\n      }\n    } catch (ex) {// ignore stat errors\n    }\n  }\n\n  var fd;\n  var cleanup = cleanupOnExit(tmpfile);\n  var removeOnExitHandler = onExit(cleanup);\n  var threw = true;\n\n  try {\n    fd = fs.openSync(tmpfile, 'w', options.mode || 438);\n\n    if (options.tmpfileCreated) {\n      options.tmpfileCreated(tmpfile);\n    }\n\n    if (isTypedArray(data)) {\n      data = typedArrayToBuffer(data);\n    }\n\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0);\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'));\n    }\n\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd);\n    }\n\n    fs.closeSync(fd);\n    fd = null;\n\n    if (options.chown) {\n      try {\n        fs.chownSync(tmpfile, options.chown.uid, options.chown.gid);\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      }\n    }\n\n    if (options.mode) {\n      try {\n        fs.chmodSync(tmpfile, options.mode);\n      } catch (err) {\n        if (!isChownErrOk(err)) {\n          throw err;\n        }\n      }\n    }\n\n    fs.renameSync(tmpfile, filename);\n    threw = false;\n  } finally {\n    if (fd) {\n      try {\n        fs.closeSync(fd);\n      } catch (ex) {// ignore close errors at this stage, error may have closed fd already.\n      }\n    }\n\n    removeOnExitHandler();\n\n    if (threw) {\n      cleanup();\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}