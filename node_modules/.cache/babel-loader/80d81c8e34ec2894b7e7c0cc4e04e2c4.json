{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ShaCertificate = exports.AndroidApp = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\n\nvar index_1 = require(\"./index\");\n\nvar AppPlatform = index_1.projectManagement.AppPlatform;\n\nvar AndroidApp =\n/** @class */\nfunction () {\n  function AndroidApp(appId, requestHandler) {\n    this.appId = appId;\n    this.requestHandler = requestHandler;\n\n    if (!validator.isNonEmptyString(appId)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n    }\n\n    this.resourceName = \"projects/-/androidApps/\" + appId;\n  }\n  /**\n   * Retrieves metadata about this Android app.\n   *\n   * @return A promise that resolves to the retrieved metadata about this Android app.\n   */\n\n\n  AndroidApp.prototype.getMetadata = function () {\n    return this.requestHandler.getResource(this.resourceName).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n      var requiredFieldsList = ['name', 'appId', 'projectId', 'packageName'];\n      requiredFieldsList.forEach(function (requiredField) {\n        project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(responseData[requiredField]), responseData, \"getMetadata()'s responseData.\" + requiredField + \" must be a non-empty string.\");\n      });\n      var metadata = {\n        platform: AppPlatform.ANDROID,\n        resourceName: responseData.name,\n        appId: responseData.appId,\n        displayName: responseData.displayName || null,\n        projectId: responseData.projectId,\n        packageName: responseData.packageName\n      };\n      return metadata;\n    });\n  };\n  /**\n   * Sets the optional user-assigned display name of the app.\n   *\n   * @param newDisplayName The new display name to set.\n   *\n   * @return A promise that resolves when the display name has been set.\n   */\n\n\n  AndroidApp.prototype.setDisplayName = function (newDisplayName) {\n    return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n  };\n  /**\n   * Gets the list of SHA certificates associated with this Android app in Firebase.\n   *\n   * @return The list of SHA-1 and SHA-256 certificates associated with this Android app in\n   *     Firebase.\n   */\n\n\n  AndroidApp.prototype.getShaCertificates = function () {\n    return this.requestHandler.getAndroidShaCertificates(this.resourceName).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getShaCertificates()\\'s responseData must be a non-null object.');\n\n      if (!responseData.certificates) {\n        return [];\n      }\n\n      project_management_api_request_internal_1.assertServerResponse(validator.isArray(responseData.certificates), responseData, '\"certificates\" field must be present in the getShaCertificates() response data.');\n      var requiredFieldsList = ['name', 'shaHash'];\n      return responseData.certificates.map(function (certificateJson) {\n        requiredFieldsList.forEach(function (requiredField) {\n          project_management_api_request_internal_1.assertServerResponse(validator.isNonEmptyString(certificateJson[requiredField]), responseData, \"getShaCertificates()'s responseData.certificates[].\" + requiredField + \" must be a \" + 'non-empty string.');\n        });\n        return new ShaCertificate(certificateJson.shaHash, certificateJson.name);\n      });\n    });\n  };\n  /**\n   * Adds the given SHA certificate to this Android app.\n   *\n   * @param certificateToAdd The SHA certificate to add.\n   *\n   * @return A promise that resolves when the given certificate\n   *     has been added to the Android app.\n   */\n\n\n  AndroidApp.prototype.addShaCertificate = function (certificateToAdd) {\n    return this.requestHandler.addAndroidShaCertificate(this.resourceName, certificateToAdd);\n  };\n  /**\n   * Deletes the specified SHA certificate from this Android app.\n   *\n   * @param  certificateToDelete The SHA certificate to delete.\n   *\n   * @return A promise that resolves when the specified\n   *     certificate has been removed from the Android app.\n   */\n\n\n  AndroidApp.prototype.deleteShaCertificate = function (certificateToDelete) {\n    if (!certificateToDelete.resourceName) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'Specified certificate does not include a resourceName. (Use AndroidApp.getShaCertificates() to retrieve ' + 'certificates with a resourceName.');\n    }\n\n    return this.requestHandler.deleteResource(certificateToDelete.resourceName);\n  };\n  /**\n   * Gets the configuration artifact associated with this app.\n   *\n   * @return A promise that resolves to the Android app's\n   *     Firebase config file, in UTF-8 string format. This string is typically\n   *     intended to be written to a JSON file that gets shipped with your Android\n   *     app.\n   */\n\n\n  AndroidApp.prototype.getConfig = function () {\n    return this.requestHandler.getConfig(this.resourceName).then(function (responseData) {\n      project_management_api_request_internal_1.assertServerResponse(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n      var base64ConfigFileContents = responseData.configFileContents;\n      project_management_api_request_internal_1.assertServerResponse(validator.isBase64String(base64ConfigFileContents), responseData, 'getConfig()\\'s responseData.configFileContents must be a base64 string.');\n      return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n    });\n  };\n\n  return AndroidApp;\n}();\n\nexports.AndroidApp = AndroidApp;\n/**\n * A SHA-1 or SHA-256 certificate.\n *\n * Do not call this constructor directly. Instead, use\n * [`projectManagement.shaCertificate()`](projectManagement.ProjectManagement#shaCertificate).\n */\n\nvar ShaCertificate =\n/** @class */\nfunction () {\n  /**\n   * Creates a ShaCertificate using the given hash. The ShaCertificate's type (eg. 'sha256') is\n   * automatically determined from the hash itself.\n   *\n   * @param shaHash The sha256 or sha1 hash for this certificate.\n   * @example\n   * ```javascript\n   * var shaHash = shaCertificate.shaHash;\n   * ```\n   * @param resourceName The Firebase resource name for this certificate. This does not need to be\n   *     set when creating a new certificate.\n   * @example\n   * ```javascript\n   * var resourceName = shaCertificate.resourceName;\n   * ```\n   */\n  function ShaCertificate(shaHash, resourceName) {\n    this.shaHash = shaHash;\n    this.resourceName = resourceName;\n\n    if (/^[a-fA-F0-9]{40}$/.test(shaHash)) {\n      this.certType = 'sha1';\n    } else if (/^[a-fA-F0-9]{64}$/.test(shaHash)) {\n      this.certType = 'sha256';\n    } else {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'shaHash must be either a sha256 hash or a sha1 hash.');\n    }\n  }\n\n  return ShaCertificate;\n}();\n\nexports.ShaCertificate = ShaCertificate;","map":null,"metadata":{},"sourceType":"script"}