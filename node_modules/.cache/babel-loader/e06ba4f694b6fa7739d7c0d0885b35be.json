{"ast":null,"code":"var JWT = require('jose').JWT;\n\nvar _require = require('../errors'),\n    ArgumentError = _require.ArgumentError;\n\nvar _require2 = require('../JwksClient'),\n    JwksClient = _require2.JwksClient;\n\nvar supportedAlg = require('./config');\n\nvar handleSigningKeyError = function handleSigningKeyError(err, cb) {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  } // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n\n\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.passportJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError('An options object must be provided when initializing passportJwtSecret');\n  }\n\n  if (!options.jwksUri) {\n    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');\n  }\n\n  var client = new JwksClient(options);\n  var onError = options.handleSigningKeyError || handleSigningKeyError;\n  return function secretProvider(req, rawJwtToken, cb) {\n    var decoded;\n\n    try {\n      decoded = JWT.decode(rawJwtToken, {\n        complete: true\n      });\n    } catch (err) {\n      decoded = null;\n    }\n\n    if (!decoded || !supportedAlg.includes(decoded.header.alg)) {\n      return cb(null, null);\n    }\n\n    client.getSigningKey(decoded.header.kid).then(function (key) {\n      cb(null, key.publicKey || key.rsaPublicKey);\n    }).catch(function (err) {\n      onError(err, function (newError) {\n        return cb(newError, null);\n      });\n    });\n  };\n};","map":null,"metadata":{},"sourceType":"script"}