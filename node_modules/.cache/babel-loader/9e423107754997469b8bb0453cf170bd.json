{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseMessagingRequestHandler = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar messaging_errors_internal_1 = require(\"./messaging-errors-internal\");\n\nvar batch_request_internal_1 = require(\"./batch-request-internal\");\n\nvar index_1 = require(\"../utils/index\"); // FCM backend constants\n\n\nvar FIREBASE_MESSAGING_TIMEOUT = 10000;\nvar FIREBASE_MESSAGING_BATCH_URL = 'https://fcm.googleapis.com/batch';\nvar FIREBASE_MESSAGING_HTTP_METHOD = 'POST';\nvar FIREBASE_MESSAGING_HEADERS = {\n  'X-Firebase-Client': \"fire-admin-node/\" + index_1.getSdkVersion()\n};\nvar LEGACY_FIREBASE_MESSAGING_HEADERS = {\n  'X-Firebase-Client': \"fire-admin-node/\" + index_1.getSdkVersion(),\n  'access_token_auth': 'true'\n};\n/**\n * Class that provides a mechanism to send requests to the Firebase Cloud Messaging backend.\n */\n\nvar FirebaseMessagingRequestHandler =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n   * @constructor\n   */\n  function FirebaseMessagingRequestHandler(app) {\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    this.batchClient = new batch_request_internal_1.BatchRequestClient(this.httpClient, FIREBASE_MESSAGING_BATCH_URL, FIREBASE_MESSAGING_HEADERS);\n  }\n  /**\n   * Invokes the request handler with the provided request data.\n   *\n   * @param {string} host The host to which to send the request.\n   * @param {string} path The path to which to send the request.\n   * @param {object} requestData The request data.\n   * @return {Promise<object>} A promise that resolves with the response.\n   */\n\n\n  FirebaseMessagingRequestHandler.prototype.invokeRequestHandler = function (host, path, requestData) {\n    var request = {\n      method: FIREBASE_MESSAGING_HTTP_METHOD,\n      url: \"https://\" + host + path,\n      data: requestData,\n      headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\n      timeout: FIREBASE_MESSAGING_TIMEOUT\n    };\n    return this.httpClient.send(request).then(function (response) {\n      // Send non-JSON responses to the catch() below where they will be treated as errors.\n      if (!response.isJson()) {\n        throw new api_request_1.HttpError(response);\n      } // Check for backend errors in the response.\n\n\n      var errorCode = messaging_errors_internal_1.getErrorCode(response.data);\n\n      if (errorCode) {\n        throw new api_request_1.HttpError(response);\n      } // Return entire response.\n\n\n      return response.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        throw messaging_errors_internal_1.createFirebaseError(err);\n      } // Re-throw the error if it already has the proper format.\n\n\n      throw err;\n    });\n  };\n  /**\n   * Sends the given array of sub requests as a single batch to FCM, and parses the result into\n   * a BatchResponse object.\n   *\n   * @param {SubRequest[]} requests An array of sub requests to send.\n   * @return {Promise<BatchResponse>} A promise that resolves when the send operation is complete.\n   */\n\n\n  FirebaseMessagingRequestHandler.prototype.sendBatchRequest = function (requests) {\n    var _this = this;\n\n    return this.batchClient.send(requests).then(function (responses) {\n      return responses.map(function (part) {\n        return _this.buildSendResponse(part);\n      });\n    }).then(function (responses) {\n      var successCount = responses.filter(function (resp) {\n        return resp.success;\n      }).length;\n      return {\n        responses: responses,\n        successCount: successCount,\n        failureCount: responses.length - successCount\n      };\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        throw messaging_errors_internal_1.createFirebaseError(err);\n      } // Re-throw the error if it already has the proper format.\n\n\n      throw err;\n    });\n  };\n\n  FirebaseMessagingRequestHandler.prototype.buildSendResponse = function (response) {\n    var result = {\n      success: response.status === 200\n    };\n\n    if (result.success) {\n      result.messageId = response.data.name;\n    } else {\n      result.error = messaging_errors_internal_1.createFirebaseError(new api_request_1.HttpError(response));\n    }\n\n    return result;\n  };\n\n  return FirebaseMessagingRequestHandler;\n}();\n\nexports.FirebaseMessagingRequestHandler = FirebaseMessagingRequestHandler;","map":null,"metadata":{},"sourceType":"script"}