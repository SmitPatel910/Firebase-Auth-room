{"ast":null,"code":"const CACHE_NAME = \"version-1\";\nconst urlsToCache = ['index.html', 'offline.html'];\nconst self = this; // Install SW\n\nself.addEventListener('install', event => {\n  event.waitUntil(caches.open(CACHE_NAME).then(cache => {\n    console.log('Opened cache');\n    return cache.addAll(urlsToCache);\n  }));\n}); // Listen for requests\n\nself.addEventListener('fetch', event => {\n  event.respondWith(caches.match(event.request).then(() => {\n    return fetch(event.request).catch(() => caches.match('offline.html'));\n  }));\n}); // Activate the SW\n\nself.addEventListener('activate', event => {\n  const cacheWhitelist = [];\n  cacheWhitelist.push(CACHE_NAME);\n  event.waitUntil(caches.keys().then(cacheNames => Promise.all(cacheNames.map(cacheName => {\n    if (!cacheWhitelist.includes(cacheName)) {\n      return caches.delete(cacheName);\n    }\n  }))));\n});","map":{"version":3,"sources":["C:/Users/Smit/OneDrive/Desktop/RTC-React/Frontend/src/serviceWorker.js"],"names":["CACHE_NAME","urlsToCache","self","addEventListener","event","waitUntil","caches","open","then","cache","console","log","addAll","respondWith","match","request","fetch","catch","cacheWhitelist","push","keys","cacheNames","Promise","all","map","cacheName","includes","delete"],"mappings":"AAAA,MAAMA,UAAU,GAAG,WAAnB;AACA,MAAMC,WAAW,GAAG,CAAE,YAAF,EAAgB,cAAhB,CAApB;AAEA,MAAMC,IAAI,GAAG,IAAb,C,CAEA;;AACAA,IAAI,CAACC,gBAAL,CAAsB,SAAtB,EAAkCC,KAAD,IAAW;AACxCA,EAAAA,KAAK,CAACC,SAAN,CACIC,MAAM,CAACC,IAAP,CAAYP,UAAZ,EACKQ,IADL,CACWC,KAAD,IAAW;AACbC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,WAAOF,KAAK,CAACG,MAAN,CAAaX,WAAb,CAAP;AACH,GAJL,CADJ;AAOH,CARD,E,CAUA;;AACAC,IAAI,CAACC,gBAAL,CAAsB,OAAtB,EAAgCC,KAAD,IAAW;AACtCA,EAAAA,KAAK,CAACS,WAAN,CACIP,MAAM,CAACQ,KAAP,CAAaV,KAAK,CAACW,OAAnB,EACKP,IADL,CACU,MAAM;AACR,WAAOQ,KAAK,CAACZ,KAAK,CAACW,OAAP,CAAL,CACFE,KADE,CACI,MAAMX,MAAM,CAACQ,KAAP,CAAa,cAAb,CADV,CAAP;AAEH,GAJL,CADJ;AAOH,CARD,E,CAUA;;AACAZ,IAAI,CAACC,gBAAL,CAAsB,UAAtB,EAAmCC,KAAD,IAAW;AACzC,QAAMc,cAAc,GAAG,EAAvB;AACAA,EAAAA,cAAc,CAACC,IAAf,CAAoBnB,UAApB;AAEAI,EAAAA,KAAK,CAACC,SAAN,CACIC,MAAM,CAACc,IAAP,GAAcZ,IAAd,CAAoBa,UAAD,IAAgBC,OAAO,CAACC,GAAR,CAC/BF,UAAU,CAACG,GAAX,CAAgBC,SAAD,IAAe;AAC1B,QAAG,CAACP,cAAc,CAACQ,QAAf,CAAwBD,SAAxB,CAAJ,EAAwC;AACpC,aAAOnB,MAAM,CAACqB,MAAP,CAAcF,SAAd,CAAP;AACH;AACJ,GAJD,CAD+B,CAAnC,CADJ;AAUH,CAdD","sourcesContent":["const CACHE_NAME = \"version-1\";\nconst urlsToCache = [ 'index.html', 'offline.html' ];\n\nconst self = this;\n\n// Install SW\nself.addEventListener('install', (event) => {\n    event.waitUntil(\n        caches.open(CACHE_NAME)\n            .then((cache) => {\n                console.log('Opened cache');\n                return cache.addAll(urlsToCache);\n            })\n    )\n});\n\n// Listen for requests\nself.addEventListener('fetch', (event) => {\n    event.respondWith(\n        caches.match(event.request)\n            .then(() => {\n                return fetch(event.request) \n                    .catch(() => caches.match('offline.html'))\n            })\n    )\n});\n\n// Activate the SW\nself.addEventListener('activate', (event) => {\n    const cacheWhitelist = [];\n    cacheWhitelist.push(CACHE_NAME);\n\n    event.waitUntil(\n        caches.keys().then((cacheNames) => Promise.all(\n            cacheNames.map((cacheName) => {\n                if(!cacheWhitelist.includes(cacheName)) {\n                    return caches.delete(cacheName);\n                }\n            })\n        ))\n            \n    )\n});\n"]},"metadata":{},"sourceType":"module"}