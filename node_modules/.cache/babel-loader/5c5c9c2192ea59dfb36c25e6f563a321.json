{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Enum; // extends ReflectionObject\n\nvar ReflectionObject = require(\"./object\");\n\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\n\nvar Namespace = require(\"./namespace\"),\n    util = require(\"./util\");\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n */\n\n\nfunction Enum(name, values, options, comment, comments) {\n  ReflectionObject.call(this, name, options);\n  if (values && typeof values !== \"object\") throw TypeError(\"values must be an object\");\n  /**\n   * Enum values by id.\n   * @type {Object.<number,string>}\n   */\n\n  this.valuesById = {};\n  /**\n   * Enum values by name.\n   * @type {Object.<string,number>}\n   */\n\n  this.values = Object.create(this.valuesById); // toJSON, marker\n\n  /**\n   * Enum comment text.\n   * @type {string|null}\n   */\n\n  this.comment = comment;\n  /**\n   * Value comment texts, if any.\n   * @type {Object.<string,string>}\n   */\n\n  this.comments = comments || {};\n  /**\n   * Reserved ranges, if any.\n   * @type {Array.<number[]|string>}\n   */\n\n  this.reserved = undefined; // toJSON\n  // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n  // compatible enum. This is used by pbts to write actual enum definitions that work for\n  // static and reflection code alike instead of emitting generic object definitions.\n\n  if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n    if (typeof values[keys[i]] === \"number\") // use forward entries only\n      this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];\n  }\n}\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\n\n\nEnum.fromJSON = function fromJSON(name, json) {\n  var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n  enm.reserved = json.reserved;\n  return enm;\n};\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\n\n\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"values\", this.values, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"comment\", keepComments ? this.comment : undefined, \"comments\", keepComments ? this.comments : undefined]);\n};\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\n\n\nEnum.prototype.add = function add(name, id, comment) {\n  // utilized by the parser but not by .fromJSON\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (!util.isInteger(id)) throw TypeError(\"id must be an integer\");\n  if (this.values[name] !== undefined) throw Error(\"duplicate name '\" + name + \"' in \" + this);\n  if (this.isReservedId(id)) throw Error(\"id \" + id + \" is reserved in \" + this);\n  if (this.isReservedName(name)) throw Error(\"name '\" + name + \"' is reserved in \" + this);\n\n  if (this.valuesById[id] !== undefined) {\n    if (!(this.options && this.options.allow_alias)) throw Error(\"duplicate id \" + id + \" in \" + this);\n    this.values[name] = id;\n  } else this.valuesById[this.values[name] = id] = name;\n\n  this.comments[name] = comment || null;\n  return this;\n};\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\n\n\nEnum.prototype.remove = function remove(name) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  var val = this.values[name];\n  if (val == null) throw Error(\"name '\" + name + \"' does not exist in \" + this);\n  delete this.valuesById[val];\n  delete this.values[name];\n  delete this.comments[name];\n  return this;\n};\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\n\n\nEnum.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\n\n\nEnum.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};","map":null,"metadata":{},"sourceType":"script"}