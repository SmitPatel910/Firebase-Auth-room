{"ast":null,"code":"var _require = require('util'),\n    inherits = _require.inherits;\n\nvar DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n}\n\ninherits(PEMDecoder, DERDecoder);\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n  var label = options.label.toUpperCase();\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n\n    if (match === null) {\n      continue;\n    }\n\n    if (match[2] !== label) {\n      continue;\n    }\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN') {\n        break;\n      }\n\n      start = i;\n    } else {\n      if (match[1] !== 'END') {\n        break;\n      }\n\n      end = i;\n      break;\n    }\n  }\n\n  if (start === -1 || end === -1) {\n    throw new Error(\"PEM section not found for: \".concat(label));\n  }\n\n  var base64 = lines.slice(start + 1, end).join(''); // Remove excessive symbols\n\n  base64.replace(/[^a-z0-9+/=]+/gi, '');\n  var input = Buffer.from(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n\nmodule.exports = PEMDecoder;","map":null,"metadata":{},"sourceType":"script"}