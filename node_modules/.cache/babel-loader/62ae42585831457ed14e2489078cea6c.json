{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSessionCookieVerifier = exports.createIdTokenVerifier = exports.FirebaseTokenVerifier = exports.SESSION_COOKIE_INFO = exports.ID_TOKEN_INFO = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar util = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar jwt_1 = require(\"../utils/jwt\"); // Audience to use for Firebase Auth Custom tokens\n\n\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit'; // URL containing the public keys for the Google certs (whose private keys are used to sign Firebase\n// Auth ID tokens)\n\nvar CLIENT_CERT_URL = 'https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com'; // URL containing the public keys for Firebase session cookies. This will be updated to a different URL soon.\n\nvar SESSION_COOKIE_CERT_URL = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/publicKeys';\nvar EMULATOR_VERIFIER = new jwt_1.EmulatorSignatureVerifier();\n/** User facing token information related to the Firebase ID token. */\n\nexports.ID_TOKEN_INFO = {\n  url: 'https://firebase.google.com/docs/auth/admin/verify-id-tokens',\n  verifyApiName: 'verifyIdToken()',\n  jwtName: 'Firebase ID token',\n  shortName: 'ID token',\n  expiredErrorCode: error_1.AuthClientErrorCode.ID_TOKEN_EXPIRED\n};\n/** User facing token information related to the Firebase session cookie. */\n\nexports.SESSION_COOKIE_INFO = {\n  url: 'https://firebase.google.com/docs/auth/admin/manage-cookies',\n  verifyApiName: 'verifySessionCookie()',\n  jwtName: 'Firebase session cookie',\n  shortName: 'session cookie',\n  expiredErrorCode: error_1.AuthClientErrorCode.SESSION_COOKIE_EXPIRED\n};\n/**\n * Class for verifying ID tokens and session cookies.\n */\n\nvar FirebaseTokenVerifier =\n/** @class */\nfunction () {\n  function FirebaseTokenVerifier(clientCertUrl, issuer, tokenInfo, app) {\n    this.issuer = issuer;\n    this.tokenInfo = tokenInfo;\n    this.app = app;\n\n    if (!validator.isURL(clientCertUrl)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided public client certificate URL is an invalid URL.');\n    } else if (!validator.isURL(issuer)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT issuer is an invalid URL.');\n    } else if (!validator.isNonNullObject(tokenInfo)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT information is not an object or null.');\n    } else if (!validator.isURL(tokenInfo.url)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT verification documentation URL is invalid.');\n    } else if (!validator.isNonEmptyString(tokenInfo.verifyApiName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT verify API name must be a non-empty string.');\n    } else if (!validator.isNonEmptyString(tokenInfo.jwtName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public full name must be a non-empty string.');\n    } else if (!validator.isNonEmptyString(tokenInfo.shortName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public short name must be a non-empty string.');\n    } else if (!validator.isNonNullObject(tokenInfo.expiredErrorCode) || !('code' in tokenInfo.expiredErrorCode)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT expiration error code must be a non-null ErrorInfo object.');\n    }\n\n    this.shortNameArticle = tokenInfo.shortName.charAt(0).match(/[aeiou]/i) ? 'an' : 'a';\n    this.signatureVerifier = jwt_1.PublicKeySignatureVerifier.withCertificateUrl(clientCertUrl, app.options.httpAgent); // For backward compatibility, the project ID is validated in the verification call.\n  }\n  /**\n   * Verifies the format and signature of a Firebase Auth JWT token.\n   *\n   * @param jwtToken The Firebase Auth JWT token to verify.\n   * @param isEmulator Whether to accept Auth Emulator tokens.\n   * @return A promise fulfilled with the decoded claims of the Firebase Auth ID token.\n   */\n\n\n  FirebaseTokenVerifier.prototype.verifyJWT = function (jwtToken, isEmulator) {\n    var _this = this;\n\n    if (isEmulator === void 0) {\n      isEmulator = false;\n    }\n\n    if (!validator.isString(jwtToken)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"First argument to \" + this.tokenInfo.verifyApiName + \" must be a \" + this.tokenInfo.jwtName + \" string.\");\n    }\n\n    return this.ensureProjectId().then(function (projectId) {\n      return _this.decodeAndVerify(jwtToken, projectId, isEmulator);\n    }).then(function (decoded) {\n      var decodedIdToken = decoded.payload;\n      decodedIdToken.uid = decodedIdToken.sub;\n      return decodedIdToken;\n    });\n  };\n\n  FirebaseTokenVerifier.prototype.ensureProjectId = function () {\n    var _this = this;\n\n    return util.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Must initialize app with a cert credential or set your Firebase project ID as the ' + (\"GOOGLE_CLOUD_PROJECT environment variable to call \" + _this.tokenInfo.verifyApiName + \".\"));\n      }\n\n      return Promise.resolve(projectId);\n    });\n  };\n\n  FirebaseTokenVerifier.prototype.decodeAndVerify = function (token, projectId, isEmulator) {\n    var _this = this;\n\n    return this.safeDecode(token).then(function (decodedToken) {\n      _this.verifyContent(decodedToken, projectId, isEmulator);\n\n      return _this.verifySignature(token, isEmulator).then(function () {\n        return decodedToken;\n      });\n    });\n  };\n\n  FirebaseTokenVerifier.prototype.safeDecode = function (jwtToken) {\n    var _this = this;\n\n    return jwt_1.decodeJwt(jwtToken).catch(function (err) {\n      if (err.code == jwt_1.JwtErrorCode.INVALID_ARGUMENT) {\n        var verifyJwtTokenDocsMessage = \" See \" + _this.tokenInfo.url + \" \" + (\"for details on how to retrieve \" + _this.shortNameArticle + \" \" + _this.tokenInfo.shortName + \".\");\n        var errorMessage = \"Decoding \" + _this.tokenInfo.jwtName + \" failed. Make sure you passed \" + (\"the entire string JWT which represents \" + _this.shortNameArticle + \" \") + (_this.tokenInfo.shortName + \".\") + verifyJwtTokenDocsMessage;\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n      }\n\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, err.message);\n    });\n  };\n  /**\n   * Verifies the content of a Firebase Auth JWT.\n   *\n   * @param fullDecodedToken The decoded JWT.\n   * @param projectId The Firebase Project Id.\n   * @param isEmulator Whether the token is an Emulator token.\n   */\n\n\n  FirebaseTokenVerifier.prototype.verifyContent = function (fullDecodedToken, projectId, isEmulator) {\n    var header = fullDecodedToken && fullDecodedToken.header;\n    var payload = fullDecodedToken && fullDecodedToken.payload;\n    var projectIdMatchMessage = \" Make sure the \" + this.tokenInfo.shortName + \" comes from the same \" + 'Firebase project as the service account used to authenticate this SDK.';\n    var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" + (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\n    var errorMessage;\n\n    if (!isEmulator && typeof header.kid === 'undefined') {\n      var isCustomToken = payload.aud === FIREBASE_AUDIENCE;\n      var isLegacyCustomToken = header.alg === 'HS256' && payload.v === 0 && 'd' in payload && 'uid' in payload.d;\n\n      if (isCustomToken) {\n        errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" + (this.tokenInfo.shortName + \", but was given a custom token.\");\n      } else if (isLegacyCustomToken) {\n        errorMessage = this.tokenInfo.verifyApiName + \" expects \" + this.shortNameArticle + \" \" + (this.tokenInfo.shortName + \", but was given a legacy custom token.\");\n      } else {\n        errorMessage = 'Firebase ID token has no \"kid\" claim.';\n      }\n\n      errorMessage += verifyJwtTokenDocsMessage;\n    } else if (!isEmulator && header.alg !== jwt_1.ALGORITHM_RS256) {\n      errorMessage = this.tokenInfo.jwtName + \" has incorrect algorithm. Expected \\\"\" + jwt_1.ALGORITHM_RS256 + '\" but got ' + '\"' + header.alg + '\".' + verifyJwtTokenDocsMessage;\n    } else if (payload.aud !== projectId) {\n      errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"aud\\\" (audience) claim. Expected \\\"\" + projectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n    } else if (payload.iss !== this.issuer + projectId) {\n      errorMessage = this.tokenInfo.jwtName + \" has incorrect \\\"iss\\\" (issuer) claim. Expected \" + (\"\\\"\" + this.issuer) + projectId + '\" but got \"' + payload.iss + '\".' + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n    } else if (typeof payload.sub !== 'string') {\n      errorMessage = this.tokenInfo.jwtName + \" has no \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\n    } else if (payload.sub === '') {\n      errorMessage = this.tokenInfo.jwtName + \" has an empty string \\\"sub\\\" (subject) claim.\" + verifyJwtTokenDocsMessage;\n    } else if (payload.sub.length > 128) {\n      errorMessage = this.tokenInfo.jwtName + \" has \\\"sub\\\" (subject) claim longer than 128 characters.\" + verifyJwtTokenDocsMessage;\n    }\n\n    if (errorMessage) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n  };\n\n  FirebaseTokenVerifier.prototype.verifySignature = function (jwtToken, isEmulator) {\n    var _this = this;\n\n    var verifier = isEmulator ? EMULATOR_VERIFIER : this.signatureVerifier;\n    return verifier.verify(jwtToken).catch(function (error) {\n      throw _this.mapJwtErrorToAuthError(error);\n    });\n  };\n  /**\n   * Maps JwtError to FirebaseAuthError\n   *\n   * @param error JwtError to be mapped.\n   * @returns FirebaseAuthError or Error instance.\n   */\n\n\n  FirebaseTokenVerifier.prototype.mapJwtErrorToAuthError = function (error) {\n    var verifyJwtTokenDocsMessage = \" See \" + this.tokenInfo.url + \" \" + (\"for details on how to retrieve \" + this.shortNameArticle + \" \" + this.tokenInfo.shortName + \".\");\n\n    if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n      var errorMessage = this.tokenInfo.jwtName + \" has expired. Get a fresh \" + this.tokenInfo.shortName + (\" from your client app and try again (auth/\" + this.tokenInfo.expiredErrorCode.code + \").\") + verifyJwtTokenDocsMessage;\n      return new error_1.FirebaseAuthError(this.tokenInfo.expiredErrorCode, errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n      var errorMessage = this.tokenInfo.jwtName + \" has invalid signature.\" + verifyJwtTokenDocsMessage;\n      return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n      var errorMessage = this.tokenInfo.jwtName + \" has \\\"kid\\\" claim which does not \" + (\"correspond to a known public key. Most likely the \" + this.tokenInfo.shortName + \" \") + 'is expired, so get a fresh token from your client app and try again.';\n      return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n\n    return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, error.message);\n  };\n\n  return FirebaseTokenVerifier;\n}();\n\nexports.FirebaseTokenVerifier = FirebaseTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase ID tokens.\n *\n * @param app Firebase app instance.\n * @return FirebaseTokenVerifier\n */\n\nfunction createIdTokenVerifier(app) {\n  return new FirebaseTokenVerifier(CLIENT_CERT_URL, 'https://securetoken.google.com/', exports.ID_TOKEN_INFO, app);\n}\n\nexports.createIdTokenVerifier = createIdTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase session cookies.\n *\n * @param app Firebase app instance.\n * @return FirebaseTokenVerifier\n */\n\nfunction createSessionCookieVerifier(app) {\n  return new FirebaseTokenVerifier(SESSION_COOKIE_CERT_URL, 'https://session.firebase.google.com/', exports.SESSION_COOKIE_INFO, app);\n}\n\nexports.createSessionCookieVerifier = createSessionCookieVerifier;","map":null,"metadata":{},"sourceType":"script"}