{"ast":null,"code":"\"use strict\"; // Copyright 2018 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEnv = exports.clear = exports.GCPEnv = void 0;\n\nvar gcpMetadata = require(\"gcp-metadata\");\n\nvar GCPEnv;\n\n(function (GCPEnv) {\n  GCPEnv[\"APP_ENGINE\"] = \"APP_ENGINE\";\n  GCPEnv[\"KUBERNETES_ENGINE\"] = \"KUBERNETES_ENGINE\";\n  GCPEnv[\"CLOUD_FUNCTIONS\"] = \"CLOUD_FUNCTIONS\";\n  GCPEnv[\"COMPUTE_ENGINE\"] = \"COMPUTE_ENGINE\";\n  GCPEnv[\"CLOUD_RUN\"] = \"CLOUD_RUN\";\n  GCPEnv[\"NONE\"] = \"NONE\";\n})(GCPEnv = exports.GCPEnv || (exports.GCPEnv = {}));\n\nvar envPromise;\n\nfunction clear() {\n  envPromise = undefined;\n}\n\nexports.clear = clear;\n\nfunction getEnv() {\n  return _getEnv.apply(this, arguments);\n}\n\nfunction _getEnv() {\n  _getEnv = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!envPromise) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", envPromise);\n\n          case 2:\n            envPromise = getEnvMemoized();\n            return _context.abrupt(\"return\", envPromise);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getEnv.apply(this, arguments);\n}\n\nexports.getEnv = getEnv;\n\nfunction getEnvMemoized() {\n  return _getEnvMemoized.apply(this, arguments);\n}\n\nfunction _getEnvMemoized() {\n  _getEnvMemoized = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var env;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            env = GCPEnv.NONE;\n\n            if (!isAppEngine()) {\n              _context2.next = 5;\n              break;\n            }\n\n            env = GCPEnv.APP_ENGINE;\n            _context2.next = 22;\n            break;\n\n          case 5:\n            if (!isCloudFunction()) {\n              _context2.next = 9;\n              break;\n            }\n\n            env = GCPEnv.CLOUD_FUNCTIONS;\n            _context2.next = 22;\n            break;\n\n          case 9:\n            _context2.next = 11;\n            return isComputeEngine();\n\n          case 11:\n            if (!_context2.sent) {\n              _context2.next = 21;\n              break;\n            }\n\n            _context2.next = 14;\n            return isKubernetesEngine();\n\n          case 14:\n            if (!_context2.sent) {\n              _context2.next = 18;\n              break;\n            }\n\n            env = GCPEnv.KUBERNETES_ENGINE;\n            _context2.next = 19;\n            break;\n\n          case 18:\n            if (isCloudRun()) {\n              env = GCPEnv.CLOUD_RUN;\n            } else {\n              env = GCPEnv.COMPUTE_ENGINE;\n            }\n\n          case 19:\n            _context2.next = 22;\n            break;\n\n          case 21:\n            env = GCPEnv.NONE;\n\n          case 22:\n            return _context2.abrupt(\"return\", env);\n\n          case 23:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getEnvMemoized.apply(this, arguments);\n}\n\nfunction isAppEngine() {\n  return !!(process.env.GAE_SERVICE || process.env.GAE_MODULE_NAME);\n}\n\nfunction isCloudFunction() {\n  return !!(process.env.FUNCTION_NAME || process.env.FUNCTION_TARGET);\n}\n/**\n * This check only verifies that the environment is running knative.\n * This must be run *after* checking for Kubernetes, otherwise it will\n * return a false positive.\n */\n\n\nfunction isCloudRun() {\n  return !!process.env.K_CONFIGURATION;\n}\n\nfunction isKubernetesEngine() {\n  return _isKubernetesEngine.apply(this, arguments);\n}\n\nfunction _isKubernetesEngine() {\n  _isKubernetesEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return gcpMetadata.instance('attributes/cluster-name');\n\n          case 3:\n            return _context3.abrupt(\"return\", true);\n\n          case 6:\n            _context3.prev = 6;\n            _context3.t0 = _context3[\"catch\"](0);\n            return _context3.abrupt(\"return\", false);\n\n          case 9:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 6]]);\n  }));\n  return _isKubernetesEngine.apply(this, arguments);\n}\n\nfunction isComputeEngine() {\n  return _isComputeEngine.apply(this, arguments);\n}\n\nfunction _isComputeEngine() {\n  _isComputeEngine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            return _context4.abrupt(\"return\", gcpMetadata.isAvailable());\n\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _isComputeEngine.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"script"}