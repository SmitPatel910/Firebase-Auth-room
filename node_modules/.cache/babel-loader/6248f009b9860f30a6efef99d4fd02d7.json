{"ast":null,"code":"var _require = require('crypto'),\n    publicEncrypt = _require.publicEncrypt,\n    privateDecrypt = _require.privateDecrypt,\n    constants = _require.constants;\n\nvar _require2 = require('../help/runtime_support'),\n    oaepHashSupported = _require2.oaepHashSupported;\n\nvar _require3 = require('../help/consts'),\n    KEYOBJECT = _require3.KEYOBJECT;\n\nvar _require4 = require('../help/key_object'),\n    asInput = _require4.asInput;\n\nvar resolvePadding = function resolvePadding(alg) {\n  switch (alg) {\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      return constants.RSA_PKCS1_OAEP_PADDING;\n\n    case 'RSA1_5':\n      return constants.RSA_PKCS1_PADDING;\n  }\n};\n\nvar resolveOaepHash = function resolveOaepHash(alg) {\n  switch (alg) {\n    case 'RSA-OAEP':\n      return 'sha1';\n\n    case 'RSA-OAEP-256':\n      return 'sha256';\n\n    case 'RSA-OAEP-384':\n      return 'sha384';\n\n    case 'RSA-OAEP-512':\n      return 'sha512';\n\n    default:\n      return undefined;\n  }\n};\n\nvar wrapKey = function wrapKey(padding, oaepHash, _ref, payload) {\n  var keyObject = _ref[KEYOBJECT];\n  var key = asInput(keyObject, true);\n  return {\n    wrapped: publicEncrypt({\n      key: key,\n      oaepHash: oaepHash,\n      padding: padding\n    }, payload)\n  };\n};\n\nvar unwrapKey = function unwrapKey(padding, oaepHash, _ref2, payload) {\n  var keyObject = _ref2[KEYOBJECT];\n  var key = asInput(keyObject, false);\n  return privateDecrypt({\n    key: key,\n    oaepHash: oaepHash,\n    padding: padding\n  }, payload);\n};\n\nvar LENGTHS = {\n  RSA1_5: 0,\n  'RSA-OAEP': 592,\n  'RSA-OAEP-256': 784,\n  'RSA-OAEP-384': 1040,\n  'RSA-OAEP-512': 1296\n};\n\nmodule.exports = function (JWA, JWK) {\n  var algs = ['RSA-OAEP', 'RSA1_5'];\n\n  if (oaepHashSupported) {\n    algs.splice(1, 0, 'RSA-OAEP-256', 'RSA-OAEP-384', 'RSA-OAEP-512');\n  }\n\n  algs.forEach(function (jwaAlg) {\n    var padding = resolvePadding(jwaAlg);\n    var oaepHash = resolveOaepHash(jwaAlg);\n    JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, padding, oaepHash));\n    JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, padding, oaepHash));\n\n    JWK.RSA.wrapKey[jwaAlg] = function (key) {\n      return (key.use === 'enc' || key.use === undefined) && key.length >= LENGTHS[jwaAlg];\n    };\n\n    JWK.RSA.unwrapKey[jwaAlg] = function (key) {\n      return key.private && (key.use === 'enc' || key.use === undefined) && key.length >= LENGTHS[jwaAlg];\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"script"}