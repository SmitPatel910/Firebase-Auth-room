{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getErrorCode = exports.createFirebaseError = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n/**\n * Creates a new FirebaseMessagingError by extracting the error code, message and other relevant\n * details from an HTTP error response.\n *\n * @param {HttpError} err The HttpError to convert into a Firebase error\n * @return {FirebaseMessagingError} A Firebase error that can be returned to the user.\n */\n\n\nfunction createFirebaseError(err) {\n  if (err.response.isJson()) {\n    // For JSON responses, map the server response to a client-side error.\n    var json = err.response.data;\n    var errorCode = getErrorCode(json);\n    var errorMessage = getErrorMessage(json);\n    return error_1.FirebaseMessagingError.fromServerError(errorCode, errorMessage, json);\n  } // Non-JSON response\n\n\n  var error;\n\n  switch (err.response.status) {\n    case 400:\n      error = error_1.MessagingClientErrorCode.INVALID_ARGUMENT;\n      break;\n\n    case 401:\n    case 403:\n      error = error_1.MessagingClientErrorCode.AUTHENTICATION_ERROR;\n      break;\n\n    case 500:\n      error = error_1.MessagingClientErrorCode.INTERNAL_ERROR;\n      break;\n\n    case 503:\n      error = error_1.MessagingClientErrorCode.SERVER_UNAVAILABLE;\n      break;\n\n    default:\n      // Treat non-JSON responses with unexpected status codes as unknown errors.\n      error = error_1.MessagingClientErrorCode.UNKNOWN_ERROR;\n  }\n\n  return new error_1.FirebaseMessagingError({\n    code: error.code,\n    message: error.message + \" Raw server response: \\\"\" + err.response.text + \"\\\". Status code: \" + (err.response.status + \".\")\n  });\n}\n\nexports.createFirebaseError = createFirebaseError;\n/**\n * @param {object} response The response to check for errors.\n * @return {string|null} The error code if present; null otherwise.\n */\n\nfunction getErrorCode(response) {\n  if (validator.isNonNullObject(response) && 'error' in response) {\n    var error = response.error;\n\n    if (validator.isString(error)) {\n      return error;\n    }\n\n    if (validator.isArray(error.details)) {\n      var fcmErrorType = 'type.googleapis.com/google.firebase.fcm.v1.FcmError';\n\n      for (var _i = 0, _a = error.details; _i < _a.length; _i++) {\n        var element = _a[_i];\n\n        if (element['@type'] === fcmErrorType) {\n          return element.errorCode;\n        }\n      }\n    }\n\n    if ('status' in error) {\n      return error.status;\n    } else {\n      return error.message;\n    }\n  }\n\n  return null;\n}\n\nexports.getErrorCode = getErrorCode;\n/**\n * Extracts error message from the given response object.\n *\n * @param {object} response The response to check for errors.\n * @return {string|null} The error message if present; null otherwise.\n */\n\nfunction getErrorMessage(response) {\n  if (validator.isNonNullObject(response) && 'error' in response && validator.isNonEmptyString(response.error.message)) {\n    return response.error.message;\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"script"}