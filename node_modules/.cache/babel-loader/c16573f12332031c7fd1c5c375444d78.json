{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ActionCodeSettingsBuilder = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar error_1 = require(\"../utils/error\");\n/**\n * Defines the ActionCodeSettings builder class used to convert the\n * ActionCodeSettings object to its corresponding server request.\n */\n\n\nvar ActionCodeSettingsBuilder =\n/** @class */\nfunction () {\n  /**\n   * ActionCodeSettingsBuilder constructor.\n   *\n   * @param {ActionCodeSettings} actionCodeSettings The ActionCodeSettings\n   *     object used to initiliaze this server request builder.\n   * @constructor\n   */\n  function ActionCodeSettingsBuilder(actionCodeSettings) {\n    if (!validator.isNonNullObject(actionCodeSettings)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings\" must be a non-null object.');\n    }\n\n    if (typeof actionCodeSettings.url === 'undefined') {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISSING_CONTINUE_URI);\n    } else if (!validator.isURL(actionCodeSettings.url)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CONTINUE_URI);\n    }\n\n    this.continueUrl = actionCodeSettings.url;\n\n    if (typeof actionCodeSettings.handleCodeInApp !== 'undefined' && !validator.isBoolean(actionCodeSettings.handleCodeInApp)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.handleCodeInApp\" must be a boolean.');\n    }\n\n    this.canHandleCodeInApp = actionCodeSettings.handleCodeInApp || false;\n\n    if (typeof actionCodeSettings.dynamicLinkDomain !== 'undefined' && !validator.isNonEmptyString(actionCodeSettings.dynamicLinkDomain)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DYNAMIC_LINK_DOMAIN);\n    }\n\n    this.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n\n    if (typeof actionCodeSettings.iOS !== 'undefined') {\n      if (!validator.isNonNullObject(actionCodeSettings.iOS)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.iOS\" must be a valid non-null object.');\n      } else if (typeof actionCodeSettings.iOS.bundleId === 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISSING_IOS_BUNDLE_ID);\n      } else if (!validator.isNonEmptyString(actionCodeSettings.iOS.bundleId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.iOS.bundleId\" must be a valid non-empty string.');\n      }\n\n      this.ibi = actionCodeSettings.iOS.bundleId;\n    }\n\n    if (typeof actionCodeSettings.android !== 'undefined') {\n      if (!validator.isNonNullObject(actionCodeSettings.android)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.android\" must be a valid non-null object.');\n      } else if (typeof actionCodeSettings.android.packageName === 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISSING_ANDROID_PACKAGE_NAME);\n      } else if (!validator.isNonEmptyString(actionCodeSettings.android.packageName)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.android.packageName\" must be a valid non-empty string.');\n      } else if (typeof actionCodeSettings.android.minimumVersion !== 'undefined' && !validator.isNonEmptyString(actionCodeSettings.android.minimumVersion)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.android.minimumVersion\" must be a valid non-empty string.');\n      } else if (typeof actionCodeSettings.android.installApp !== 'undefined' && !validator.isBoolean(actionCodeSettings.android.installApp)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"ActionCodeSettings.android.installApp\" must be a valid boolean.');\n      }\n\n      this.apn = actionCodeSettings.android.packageName;\n      this.amv = actionCodeSettings.android.minimumVersion;\n      this.installApp = actionCodeSettings.android.installApp || false;\n    }\n  }\n  /**\n   * Returns the corresponding constructed server request corresponding to the\n   * current ActionCodeSettings.\n   *\n   * @return {EmailActionCodeRequest} The constructed EmailActionCodeRequest request.\n   */\n\n\n  ActionCodeSettingsBuilder.prototype.buildRequest = function () {\n    var request = {\n      continueUrl: this.continueUrl,\n      canHandleCodeInApp: this.canHandleCodeInApp,\n      dynamicLinkDomain: this.dynamicLinkDomain,\n      androidPackageName: this.apn,\n      androidMinimumVersion: this.amv,\n      androidInstallApp: this.installApp,\n      iOSBundleId: this.ibi\n    }; // Remove all null and undefined fields from request.\n\n    for (var key in request) {\n      if (Object.prototype.hasOwnProperty.call(request, key)) {\n        if (typeof request[key] === 'undefined' || request[key] === null) {\n          delete request[key];\n        }\n      }\n    }\n\n    return request;\n  };\n\n  return ActionCodeSettingsBuilder;\n}();\n\nexports.ActionCodeSettingsBuilder = ActionCodeSettingsBuilder;","map":null,"metadata":{},"sourceType":"script"}