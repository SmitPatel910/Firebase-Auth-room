{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar assert = require(\"assert\");\n\nvar logger_1 = require(\"./logger\");\n\nvar util_1 = require(\"./util\");\n\nexports.CLIENT_TERMINATED_ERROR_MSG = 'The client has already been terminated';\n/**\n * An auto-resizing pool that distributes concurrent operations over multiple\n * clients of type `T`.\n *\n * ClientPool is used within Firestore to manage a pool of GAPIC clients and\n * automatically initializes multiple clients if we issue more than 100\n * concurrent operations.\n *\n * @private\n * @internal\n */\n\nvar ClientPool = /*#__PURE__*/function () {\n  /**\n   * @param concurrentOperationLimit The number of operations that each client\n   * can handle.\n   * @param maxIdleClients The maximum number of idle clients to keep before\n   * garbage collecting.\n   * @param clientFactory A factory function called as needed when new clients\n   * are required.\n   * @param clientDestructor A cleanup function that is called when a client is\n   * disposed of.\n   */\n  function ClientPool(concurrentOperationLimit, maxIdleClients, clientFactory) {\n    var clientDestructor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : function () {\n      return Promise.resolve();\n    };\n\n    _classCallCheck(this, ClientPool);\n\n    this.concurrentOperationLimit = concurrentOperationLimit;\n    this.maxIdleClients = maxIdleClients;\n    this.clientFactory = clientFactory;\n    this.clientDestructor = clientDestructor;\n    /**\n     * Stores each active clients and how many operations it has outstanding.\n     */\n\n    this.activeClients = new Map();\n    /**\n     * A set of clients that have seen RST_STREAM errors (see\n     * https://github.com/googleapis/nodejs-firestore/issues/1023) and should\n     * no longer be used.\n     */\n\n    this.failedClients = new Set();\n    /**\n     * Whether the Firestore instance has been terminated. Once terminated, the\n     * ClientPool can longer schedule new operations.\n     */\n\n    this.terminated = false;\n    /**\n     * Deferred promise that is resolved when there are no active operations on\n     * the client pool after terminate() has been called.\n     */\n\n    this.terminateDeferred = new util_1.Deferred();\n  }\n  /**\n   * Returns an already existing client if it has less than the maximum number\n   * of concurrent operations or initializes and returns a new client.\n   *\n   * @private\n   * @internal\n   */\n\n\n  _createClass(ClientPool, [{\n    key: \"acquire\",\n    value: function acquire(requestTag) {\n      var selectedClient = null;\n      var selectedClientRequestCount = -1;\n\n      var _iterator = _createForOfIteratorHelper(this.activeClients),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              client = _step$value[0],\n              requestCount = _step$value[1];\n\n          // Use the \"most-full\" client that can still accommodate the request\n          // in order to maximize the number of idle clients as operations start to\n          // complete.\n          if (!this.failedClients.has(client) && requestCount > selectedClientRequestCount && requestCount < this.concurrentOperationLimit) {\n            selectedClient = client;\n            selectedClientRequestCount = requestCount;\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (selectedClient) {\n        logger_1.logger('ClientPool.acquire', requestTag, 'Re-using existing client with %s remaining operations', this.concurrentOperationLimit - selectedClientRequestCount);\n      } else {\n        logger_1.logger('ClientPool.acquire', requestTag, 'Creating a new client');\n        selectedClient = this.clientFactory();\n        selectedClientRequestCount = 0;\n        assert(!this.activeClients.has(selectedClient), 'The provided client factory returned an existing instance');\n      }\n\n      this.activeClients.set(selectedClient, selectedClientRequestCount + 1);\n      return selectedClient;\n    }\n    /**\n     * Reduces the number of operations for the provided client, potentially\n     * removing it from the pool of active clients.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"release\",\n    value: function () {\n      var _release = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(requestTag, client) {\n        var requestCount;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                requestCount = this.activeClients.get(client) || 0;\n                assert(requestCount > 0, 'No active requests');\n                this.activeClients.set(client, requestCount - 1);\n\n                if (this.terminated && this.opCount === 0) {\n                  this.terminateDeferred.resolve();\n                }\n\n                if (!this.shouldGarbageCollectClient(client)) {\n                  _context.next = 10;\n                  break;\n                }\n\n                this.activeClients.delete(client);\n                this.failedClients.delete(client);\n                _context.next = 9;\n                return this.clientDestructor(client);\n\n              case 9:\n                logger_1.logger('ClientPool.release', requestTag, 'Garbage collected 1 client');\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function release(_x, _x2) {\n        return _release.apply(this, arguments);\n      }\n\n      return release;\n    }()\n    /**\n     * Given the current operation counts, determines if the given client should\n     * be garbage collected.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"shouldGarbageCollectClient\",\n    value: function shouldGarbageCollectClient(client) {\n      // Don't garbage collect clients that have active requests.\n      if (this.activeClients.get(client) !== 0) {\n        return false;\n      } // Idle clients that have received RST_STREAM errors are always garbage\n      // collected.\n\n\n      if (this.failedClients.has(client)) {\n        return true;\n      } // Otherwise, only garbage collect if we have too much idle capacity (e.g.\n      // more than 100 idle capacity with default settings) .\n\n\n      var idleCapacityCount = 0;\n\n      var _iterator2 = _createForOfIteratorHelper(this.activeClients),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _step2$value = _slicedToArray(_step2.value, 2),\n              count = _step2$value[1];\n\n          idleCapacityCount += this.concurrentOperationLimit - count;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      return idleCapacityCount > this.maxIdleClients * this.concurrentOperationLimit;\n    }\n    /**\n     * The number of currently registered clients.\n     *\n     * @return Number of currently registered clients.\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n\n  }, {\n    key: \"run\",\n\n    /**\n     * Runs the provided operation in this pool. This function may create an\n     * additional client if all existing clients already operate at the concurrent\n     * operation limit.\n     *\n     * @param requestTag A unique client-assigned identifier for this operation.\n     * @param op A callback function that returns a Promise. The client T will\n     * be returned to the pool when callback finishes.\n     * @return A Promise that resolves with the result of `op`.\n     * @private\n     * @internal\n     */\n    value: function run(requestTag, op) {\n      var _this = this;\n\n      if (this.terminated) {\n        return Promise.reject(new Error(exports.CLIENT_TERMINATED_ERROR_MSG));\n      }\n\n      var client = this.acquire(requestTag);\n      return op(client).catch( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(err) {\n          var _a;\n\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if ((_a = err.message) === null || _a === void 0 ? void 0 : _a.match(/RST_STREAM/)) {\n                    // Once a client has seen a RST_STREAM error, the GRPC channel can\n                    // no longer be used. We mark the client as failed, which ensures that\n                    // we open a new GRPC channel for the next request.\n                    _this.failedClients.add(client);\n                  }\n\n                  _context2.next = 3;\n                  return _this.release(requestTag, client);\n\n                case 3:\n                  return _context2.abrupt(\"return\", Promise.reject(err));\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        return function (_x3) {\n          return _ref.apply(this, arguments);\n        };\n      }()).then( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(res) {\n          return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return _this.release(requestTag, client);\n\n                case 2:\n                  return _context3.abrupt(\"return\", res);\n\n                case 3:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3);\n        }));\n\n        return function (_x4) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"terminate\",\n    value: function () {\n      var _terminate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _iterator3, _step3, _step3$value, client;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.terminated = true; // Wait for all pending operations to complete before terminating.\n\n                if (!(this.opCount > 0)) {\n                  _context4.next = 5;\n                  break;\n                }\n\n                logger_1.logger('ClientPool.terminate',\n                /* requestTag= */\n                null, 'Waiting for %s pending operations to complete before terminating', this.opCount);\n                _context4.next = 5;\n                return this.terminateDeferred.promise;\n\n              case 5:\n                _iterator3 = _createForOfIteratorHelper(this.activeClients);\n                _context4.prev = 6;\n\n                _iterator3.s();\n\n              case 8:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context4.next = 15;\n                  break;\n                }\n\n                _step3$value = _slicedToArray(_step3.value, 1), client = _step3$value[0];\n                this.activeClients.delete(client);\n                _context4.next = 13;\n                return this.clientDestructor(client);\n\n              case 13:\n                _context4.next = 8;\n                break;\n\n              case 15:\n                _context4.next = 20;\n                break;\n\n              case 17:\n                _context4.prev = 17;\n                _context4.t0 = _context4[\"catch\"](6);\n\n                _iterator3.e(_context4.t0);\n\n              case 20:\n                _context4.prev = 20;\n\n                _iterator3.f();\n\n                return _context4.finish(20);\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[6, 17, 20, 23]]);\n      }));\n\n      function terminate() {\n        return _terminate.apply(this, arguments);\n      }\n\n      return terminate;\n    }()\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.activeClients.size;\n    }\n    /**\n     * The number of currently active operations.\n     *\n     * @return Number of currently active operations.\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n\n  }, {\n    key: \"opCount\",\n    get: function get() {\n      var activeOperationCount = 0;\n      this.activeClients.forEach(function (count) {\n        return activeOperationCount += count;\n      });\n      return activeOperationCount;\n    }\n  }]);\n\n  return ClientPool;\n}();\n\nexports.ClientPool = ClientPool;","map":null,"metadata":{},"sourceType":"script"}