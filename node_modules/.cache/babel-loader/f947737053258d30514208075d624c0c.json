{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transcode = exports.getFieldNameOnBehavior = exports.isRequiredField = exports.isProto3OptionalField = exports.requestChangeCaseAndCleanup = exports.flattenObject = exports.match = exports.applyPattern = exports.encodeWithoutSlashes = exports.encodeWithSlashes = exports.buildQueryStringComponents = exports.deleteField = exports.deepCopy = exports.getField = void 0;\n\nvar util_1 = require(\"./util\");\n\nvar httpOptionName = '(google.api.http)';\nvar fieldBehaviorOptionName = '(google.api.field_behavior)';\nvar proto3OptionalName = 'proto3_optional'; // List of methods as defined in google/api/http.proto (see HttpRule)\n\nvar supportedHttpMethods = ['get', 'post', 'put', 'patch', 'delete'];\n\nfunction getField(request, field) {\n  var parts = field.split('.');\n  var value = request;\n\n  var _iterator = _createForOfIteratorHelper(parts),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var part = _step.value;\n\n      if (typeof value !== 'object') {\n        return undefined;\n      }\n\n      value = value[part];\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  if (typeof value === 'object' && !Array.isArray(value) && value !== null) {\n    return undefined;\n  }\n\n  return value;\n}\n\nexports.getField = getField;\n\nfunction deepCopy(request) {\n  if (typeof request !== 'object' || request === null) {\n    return request;\n  }\n\n  var copy = Object.assign({}, request);\n\n  for (var key in copy) {\n    if (Array.isArray(copy[key])) {\n      copy[key] = copy[key].map(deepCopy);\n    } else if (typeof copy[key] === 'object' && copy[key] !== null) {\n      copy[key] = deepCopy(copy[key]);\n    }\n  }\n\n  return copy;\n}\n\nexports.deepCopy = deepCopy;\n\nfunction deleteField(request, field) {\n  var parts = field.split('.');\n\n  while (parts.length > 1) {\n    if (typeof request !== 'object') {\n      return;\n    }\n\n    var _part = parts.shift();\n\n    request = request[_part];\n  }\n\n  var part = parts.shift();\n\n  if (typeof request !== 'object') {\n    return;\n  }\n\n  delete request[part];\n}\n\nexports.deleteField = deleteField;\n\nfunction buildQueryStringComponents(request) {\n  var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var resultList = [];\n\n  for (var key in request) {\n    if (Array.isArray(request[key])) {\n      var _iterator2 = _createForOfIteratorHelper(request[key]),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var value = _step2.value;\n          resultList.push(\"\".concat(prefix).concat(encodeWithoutSlashes(key), \"=\").concat(encodeWithoutSlashes(value.toString())));\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    } else if (typeof request[key] === 'object' && request[key] !== null) {\n      resultList.push.apply(resultList, _toConsumableArray(buildQueryStringComponents(request[key], \"\".concat(key, \".\"))));\n    } else {\n      resultList.push(\"\".concat(prefix).concat(encodeWithoutSlashes(key), \"=\").concat(encodeWithoutSlashes(request[key] === null ? 'null' : request[key].toString())));\n    }\n  }\n\n  return resultList;\n}\n\nexports.buildQueryStringComponents = buildQueryStringComponents;\n\nfunction encodeWithSlashes(str) {\n  return str.split('').map(function (c) {\n    return c.match(/[-_.~0-9a-zA-Z]/) ? c : encodeURIComponent(c);\n  }).join('');\n}\n\nexports.encodeWithSlashes = encodeWithSlashes;\n\nfunction encodeWithoutSlashes(str) {\n  return str.split('').map(function (c) {\n    return c.match(/[-_.~0-9a-zA-Z/]/) ? c : encodeURIComponent(c);\n  }).join('');\n}\n\nexports.encodeWithoutSlashes = encodeWithoutSlashes;\n\nfunction escapeRegExp(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n}\n\nfunction applyPattern(pattern, fieldValue) {\n  if (!pattern || pattern === '*') {\n    return encodeWithSlashes(fieldValue);\n  }\n\n  if (!pattern.includes('*') && pattern !== fieldValue) {\n    return undefined;\n  } // since we're converting the pattern to a regex, make necessary precautions:\n\n\n  var regex = new RegExp('^' + escapeRegExp(pattern).replace(/\\\\\\*\\\\\\*/g, '(.+)').replace(/\\\\\\*/g, '([^/]+)') + '$');\n\n  if (!fieldValue.match(regex)) {\n    return undefined;\n  }\n\n  return encodeWithoutSlashes(fieldValue);\n}\n\nexports.applyPattern = applyPattern;\n\nfunction match(request, pattern) {\n  var url = pattern;\n  var matchedFields = [];\n\n  for (;;) {\n    var _match = url.match(/^(.*)\\{([^}=]+)(?:=([^}]*))?\\}(.*)/);\n\n    if (!_match) {\n      break;\n    }\n\n    var _match2 = _slicedToArray(_match, 5),\n        before = _match2[1],\n        field = _match2[2],\n        _pattern = _match2[3],\n        after = _match2[4];\n\n    matchedFields.push(field);\n    var fieldValue = getField(request, field);\n\n    if (typeof fieldValue === 'undefined') {\n      return undefined;\n    }\n\n    var appliedPattern = applyPattern(_pattern, fieldValue === null ? 'null' : fieldValue.toString());\n\n    if (typeof appliedPattern === 'undefined') {\n      return undefined;\n    }\n\n    url = before + appliedPattern + after;\n  }\n\n  return {\n    matchedFields: matchedFields,\n    url: url\n  };\n}\n\nexports.match = match;\n\nfunction flattenObject(request) {\n  var result = {};\n\n  for (var key in request) {\n    if (typeof request[key] === 'undefined') {\n      continue;\n    }\n\n    if (Array.isArray(request[key])) {\n      // According to the http.proto comments, a repeated field may only\n      // contain primitive types, so no extra recursion here.\n      result[key] = request[key];\n      continue;\n    }\n\n    if (typeof request[key] === 'object' && request[key] !== null) {\n      var nested = flattenObject(request[key]);\n\n      for (var nestedKey in nested) {\n        result[\"\".concat(key, \".\").concat(nestedKey)] = nested[nestedKey];\n      }\n\n      continue;\n    }\n\n    result[key] = request[key];\n  }\n\n  return result;\n}\n\nexports.flattenObject = flattenObject;\n\nfunction requestChangeCaseAndCleanup(request, caseChangeFunc) {\n  if (!request || typeof request !== 'object') {\n    return request;\n  }\n\n  var convertedRequest = {};\n\n  for (var field in request) {\n    // cleaning up inherited properties\n    if (!Object.prototype.hasOwnProperty.call(request, field)) {\n      continue;\n    }\n\n    var convertedField = caseChangeFunc(field);\n    var value = request[field];\n\n    if (Array.isArray(value)) {\n      convertedRequest[convertedField] = value.map(function (v) {\n        return requestChangeCaseAndCleanup(v, caseChangeFunc);\n      });\n    } else {\n      convertedRequest[convertedField] = requestChangeCaseAndCleanup(value, caseChangeFunc);\n    }\n  }\n\n  return convertedRequest;\n}\n\nexports.requestChangeCaseAndCleanup = requestChangeCaseAndCleanup;\n\nfunction isProto3OptionalField(field) {\n  return field && field.options && field.options[proto3OptionalName];\n}\n\nexports.isProto3OptionalField = isProto3OptionalField;\n\nfunction isRequiredField(field) {\n  return field && field.options && field.options[fieldBehaviorOptionName] === 'REQUIRED';\n}\n\nexports.isRequiredField = isRequiredField;\n\nfunction getFieldNameOnBehavior(fields) {\n  var requiredFields = new Set();\n  var optionalFields = new Set();\n\n  for (var fieldName in fields) {\n    var field = fields[fieldName];\n\n    if (isRequiredField(field)) {\n      requiredFields.add(fieldName);\n    }\n\n    if (isProto3OptionalField(field)) {\n      optionalFields.add(fieldName);\n    }\n  }\n\n  return {\n    requiredFields: requiredFields,\n    optionalFields: optionalFields\n  };\n}\n\nexports.getFieldNameOnBehavior = getFieldNameOnBehavior;\n\nfunction transcode(request, parsedOptions, requestFields) {\n  var _getFieldNameOnBehavi = getFieldNameOnBehavior(requestFields),\n      requiredFields = _getFieldNameOnBehavi.requiredFields,\n      optionalFields = _getFieldNameOnBehavi.optionalFields; // all fields annotated as REQUIRED MUST be emitted in the body.\n\n\n  var _iterator3 = _createForOfIteratorHelper(requiredFields),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var requiredField = _step3.value;\n\n      if (!(requiredField in request) || request[requiredField] === 'undefined') {\n        throw new Error(\"Required field \".concat(requiredField, \" is not present in the request.\"));\n      }\n    } // request is supposed to have keys in camelCase.\n\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  var snakeRequest = requestChangeCaseAndCleanup(request, util_1.camelToSnakeCase);\n  var httpRules = [];\n\n  var _iterator4 = _createForOfIteratorHelper(parsedOptions),\n      _step4;\n\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var option = _step4.value;\n\n      if (!(httpOptionName in option)) {\n        continue;\n      }\n\n      var _httpRule = option[httpOptionName];\n      httpRules.push(_httpRule);\n\n      if (_httpRule === null || _httpRule === void 0 ? void 0 : _httpRule.additional_bindings) {\n        var additionalBindings = Array.isArray(_httpRule.additional_bindings) ? _httpRule.additional_bindings : [_httpRule.additional_bindings];\n        httpRules.push.apply(httpRules, _toConsumableArray(additionalBindings));\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n\n  for (var _i = 0, _httpRules = httpRules; _i < _httpRules.length; _i++) {\n    var httpRule = _httpRules[_i];\n\n    var _iterator5 = _createForOfIteratorHelper(supportedHttpMethods),\n        _step5;\n\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var httpMethod = _step5.value;\n\n        if (!(httpMethod in httpRule)) {\n          continue;\n        }\n\n        var pathTemplate = httpRule[httpMethod];\n        var matchResult = match(snakeRequest, pathTemplate);\n\n        if (typeof matchResult === 'undefined') {\n          continue;\n        }\n\n        var url = matchResult.url,\n            matchedFields = matchResult.matchedFields;\n\n        if (httpRule.body === '*') {\n          // all fields except the matched fields go to request data\n          var _data = deepCopy(snakeRequest);\n\n          var _iterator6 = _createForOfIteratorHelper(matchedFields),\n              _step6;\n\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var field = _step6.value;\n              deleteField(_data, field);\n            } // Remove unset proto3 optional field from the request body.\n\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n\n          for (var key in _data) {\n            if (optionalFields.has(util_1.snakeToCamelCase(key)) && (!(key in snakeRequest) || snakeRequest[key] === 'undefined')) {\n              delete _data[key];\n            }\n          } // HTTP endpoint expects camelCase but we have snake_case at this point\n\n\n          var _camelCaseData = requestChangeCaseAndCleanup(_data, util_1.snakeToCamelCase);\n\n          return {\n            httpMethod: httpMethod,\n            url: url,\n            queryString: '',\n            data: _camelCaseData\n          };\n        } // one field possibly goes to request data, others go to query string\n\n\n        var body = httpRule.body;\n        var data = '';\n        var queryStringObject = deepCopy(request); // use camel case for query string\n\n        if (body) {\n          deleteField(queryStringObject, util_1.snakeToCamelCase(body)); // Unset optional field should not add in body request.\n\n          data = optionalFields.has(body) && snakeRequest[body] === 'undefined' ? '' : snakeRequest[body];\n        }\n\n        var _iterator7 = _createForOfIteratorHelper(matchedFields),\n            _step7;\n\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var _field = _step7.value;\n            deleteField(queryStringObject, util_1.snakeToCamelCase(_field));\n          } // Unset proto3 optional field does not appear in the query params.\n\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n\n        for (var _key in queryStringObject) {\n          if (optionalFields.has(_key) && request[_key] === 'undefined') {\n            delete queryStringObject[_key];\n          }\n        }\n\n        var queryStringComponents = buildQueryStringComponents(queryStringObject);\n        var queryString = queryStringComponents.join('&');\n        var camelCaseData = void 0;\n\n        if (typeof data === 'string') {\n          camelCaseData = data;\n        } else {\n          camelCaseData = requestChangeCaseAndCleanup(data, util_1.snakeToCamelCase);\n        }\n\n        return {\n          httpMethod: httpMethod,\n          url: url,\n          queryString: queryString,\n          data: camelCaseData\n        };\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n  }\n\n  return undefined;\n}\n\nexports.transcode = transcode;","map":null,"metadata":{},"sourceType":"script"}