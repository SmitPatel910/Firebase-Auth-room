{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get2 = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar stream_1 = require(\"stream\");\n\nvar deepEqual = require(\"fast-deep-equal\");\n\nvar document_1 = require(\"./document\");\n\nvar document_change_1 = require(\"./document-change\");\n\nvar logger_1 = require(\"./logger\");\n\nvar order_1 = require(\"./order\");\n\nvar path_1 = require(\"./path\");\n\nvar serializer_1 = require(\"./serializer\");\n\nvar timestamp_1 = require(\"./timestamp\");\n\nvar types_1 = require(\"./types\");\n\nvar util_1 = require(\"./util\");\n\nvar validate_1 = require(\"./validate\");\n\nvar write_batch_1 = require(\"./write-batch\");\n/**\n * The direction of a `Query.orderBy()` clause is specified as 'desc' or 'asc'\n * (descending or ascending).\n *\n * @private\n * @internal\n */\n\n\nvar directionOperators = {\n  asc: 'ASCENDING',\n  desc: 'DESCENDING'\n};\n/**\n * Filter conditions in a `Query.where()` clause are specified using the\n * strings '<', '<=', '==', '!=', '>=', '>', 'array-contains', 'in', 'not-in',\n * and 'array-contains-any'.\n *\n * @private\n * @internal\n */\n\nvar comparisonOperators = {\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  '==': 'EQUAL',\n  '!=': 'NOT_EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS',\n  in: 'IN',\n  'not-in': 'NOT_IN',\n  'array-contains-any': 'ARRAY_CONTAINS_ANY'\n};\n/**\n * onSnapshot() callback that receives a QuerySnapshot.\n *\n * @callback querySnapshotCallback\n * @param {QuerySnapshot} snapshot A query snapshot.\n */\n\n/**\n * onSnapshot() callback that receives a DocumentSnapshot.\n *\n * @callback documentSnapshotCallback\n * @param {DocumentSnapshot} snapshot A document snapshot.\n */\n\n/**\n * onSnapshot() callback that receives an error.\n *\n * @callback errorCallback\n * @param {Error} err An error from a listen.\n */\n\n/**\n * A DocumentReference refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist. A DocumentReference can\n * also be used to create a\n * [CollectionReference]{@link CollectionReference} to a\n * subcollection.\n *\n * @class DocumentReference\n */\n\nvar DocumentReference = /*#__PURE__*/function () {\n  /**\n   * @hideconstructor\n   *\n   * @param _firestore The Firestore Database client.\n   * @param _path The Path of this reference.\n   */\n  function DocumentReference(_firestore, _path) {\n    var _converter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : types_1.defaultConverter();\n\n    _classCallCheck(this, DocumentReference);\n\n    this._firestore = _firestore;\n    this._path = _path;\n    this._converter = _converter;\n  }\n  /**\n   * The string representation of the DocumentReference's location.\n   * @private\n   * @internal\n   * @type {string}\n   * @name DocumentReference#formattedName\n   */\n\n\n  _createClass(DocumentReference, [{\n    key: \"get\",\n\n    /**\n     * Reads the document referred to by this DocumentReference.\n     *\n     * @returns {Promise.<DocumentSnapshot>} A Promise resolved with a\n     * DocumentSnapshot for the retrieved document on success. For missing\n     * documents, DocumentSnapshot.exists will be false. If the get() fails for\n     * other reasons, the Promise will be rejected.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.get().then(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log('Document retrieved successfully.');\n     *   }\n     * });\n     */\n    value: function get() {\n      return this._firestore.getAll(this).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            result = _ref2[0];\n\n        return result;\n      });\n    }\n    /**\n     * Gets a [CollectionReference]{@link CollectionReference} instance\n     * that refers to the collection at the specified path.\n     *\n     * @param {string} collectionPath A slash-separated path to a collection.\n     * @returns {CollectionReference} A reference to the new\n     * subcollection.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     * let subcollection = documentRef.collection('subcollection');\n     * console.log(`Path to subcollection: ${subcollection.path}`);\n     */\n\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      path_1.validateResourcePath('collectionPath', collectionPath);\n\n      var path = this._path.append(collectionPath);\n\n      if (!path.isCollection) {\n        throw new Error(\"Value for argument \\\"collectionPath\\\" must point to a collection, but was \\\"\".concat(collectionPath, \"\\\". Your path does not contain an odd number of components.\"));\n      }\n\n      return new CollectionReference(this._firestore, path);\n    }\n    /**\n     * Fetches the subcollections that are direct children of this document.\n     *\n     * @returns {Promise.<Array.<CollectionReference>>} A Promise that resolves\n     * with an array of CollectionReferences.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.listCollections().then(collections => {\n     *   for (let collection of collections) {\n     *     console.log(`Found subcollection with id: ${collection.id}`);\n     *   }\n     * });\n     */\n\n  }, {\n    key: \"listCollections\",\n    value: function listCollections() {\n      var _this = this;\n\n      var tag = util_1.requestTag();\n      return this.firestore.initializeIfNeeded(tag).then(function () {\n        var request = {\n          parent: _this.formattedName,\n          // Setting `pageSize` to an arbitrarily large value lets the backend cap\n          // the page size (currently to 300). Note that the backend rejects\n          // MAX_INT32 (b/146883794).\n          pageSize: Math.pow(2, 16) - 1\n        };\n        return _this._firestore.request('listCollectionIds', request, tag).then(function (collectionIds) {\n          var collections = []; // We can just sort this list using the default comparator since it\n          // will only contain collection ids.\n\n          collectionIds.sort();\n\n          var _iterator = _createForOfIteratorHelper(collectionIds),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var collectionId = _step.value;\n              collections.push(_this.collection(collectionId));\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          return collections;\n        });\n      });\n    }\n    /**\n     * Create a document with the provided object values. This will fail the write\n     * if a document exists at its location.\n     *\n     * @param {DocumentData} data An object that contains the fields and data to\n     * serialize as the document.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this create.\n     *\n     * @example\n     * let documentRef = firestore.collection('col').doc();\n     *\n     * documentRef.create({foo: 'bar'}).then((res) => {\n     *   console.log(`Document created at ${res.updateTime}`);\n     * }).catch((err) => {\n     *   console.log(`Failed to create document: ${err}`);\n     * });\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(data) {\n      var writeBatch = new write_batch_1.WriteBatch(this._firestore);\n      return writeBatch.create(this, data).commit().then(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            writeResult = _ref4[0];\n\n        return writeResult;\n      });\n    }\n    /**\n     * Deletes the document referred to by this `DocumentReference`.\n     *\n     * A delete for a non-existing document is treated as a success (unless\n     * lastUptimeTime is provided).\n     *\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the delete if the\n     * document was last updated at a different time.\n     * @param {boolean=} precondition.exists If set, enforces that the target\n     * document must or must not exist.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * delete time.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.delete().then(() => {\n     *   console.log('Document successfully deleted.');\n     * });\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(precondition) {\n      var writeBatch = new write_batch_1.WriteBatch(this._firestore);\n      return writeBatch.delete(this, precondition).commit().then(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 1),\n            writeResult = _ref6[0];\n\n        return writeResult;\n      });\n    }\n    /**\n     * Writes to the document referred to by this DocumentReference. If the\n     * document does not yet exist, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into an\n     * existing document.\n     *\n     * @param {T|Partial<T>} data A map of the fields and values for the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge If true, set() merges the values specified\n     * in its data argument. Fields omitted from this set() call remain untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {Promise.<WriteResult>} A Promise that resolves with the\n     * write time of this set.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.set({foo: 'bar'}).then(res => {\n     *   console.log(`Document written at ${res.updateTime}`);\n     * });\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(data, options) {\n      var writeBatch = new write_batch_1.WriteBatch(this._firestore);\n      return writeBatch.set(this, data, options).commit().then(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 1),\n            writeResult = _ref8[0];\n\n        return writeResult;\n      });\n    }\n    /**\n     * Updates fields in the document referred to by this DocumentReference.\n     * If the document doesn't yet exist, the update fails and the returned\n     * Promise will be rejected.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {UpdateData|string|FieldPath} dataOrField An object containing the\n     * fields and values with which to update the document or the path of the\n     * first field to update.\n     * @param {\n     * ...(*|string|FieldPath|Precondition)} preconditionOrValues An alternating\n     * list of field paths and values to update or a Precondition to restrict\n     * this update.\n     * @returns {Promise.<WriteResult>} A Promise that resolves once the\n     * data has been successfully written to the backend.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * documentRef.update({foo: 'bar'}).then(res => {\n     *   console.log(`Document updated at ${res.updateTime}`);\n     * });\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(dataOrField) {\n      for (var _len = arguments.length, preconditionOrValues = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        preconditionOrValues[_key - 1] = arguments[_key];\n      }\n\n      // eslint-disable-next-line prefer-rest-params\n      validate_1.validateMinNumberOfArguments('DocumentReference.update', arguments, 1);\n      var writeBatch = new write_batch_1.WriteBatch(this._firestore);\n      return writeBatch.update.apply(writeBatch, [this, dataOrField].concat(preconditionOrValues)).commit().then(function (_ref9) {\n        var _ref10 = _slicedToArray(_ref9, 1),\n            writeResult = _ref10[0];\n\n        return writeResult;\n      });\n    }\n    /**\n     * Attaches a listener for DocumentSnapshot events.\n     *\n     * @param {documentSnapshotCallback} onNext A callback to be called every\n     * time a new `DocumentSnapshot` is available.\n     * @param {errorCallback=} onError A callback to be called if the listen fails\n     * or is cancelled. No further callbacks will occur. If unset, errors will be\n     * logged to the console.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     *\n     * let unsubscribe = documentRef.onSnapshot(documentSnapshot => {\n     *   if (documentSnapshot.exists) {\n     *     console.log(documentSnapshot.data());\n     *   }\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     */\n\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot(onNext, onError) {\n      var _this2 = this;\n\n      validate_1.validateFunction('onNext', onNext);\n      validate_1.validateFunction('onError', onError, {\n        optional: true\n      });\n      var watch = new (require('./watch').DocumentWatch)(this.firestore, this);\n      return watch.onSnapshot(function (readTime, size, docs) {\n        var _iterator2 = _createForOfIteratorHelper(docs()),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var _document = _step2.value;\n\n            if (_document.ref.path === _this2.path) {\n              onNext(_document);\n              return;\n            }\n          } // The document is missing.\n\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        var ref = new DocumentReference(_this2._firestore, _this2._path, _this2._converter);\n        var document = new document_1.DocumentSnapshotBuilder(ref);\n        document.readTime = readTime;\n        onNext(document.build());\n      }, onError || console.error);\n    }\n    /**\n     * Returns true if this `DocumentReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `DocumentReference` is equal to the provided\n     * value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof DocumentReference && this._firestore === other._firestore && this._path.isEqual(other._path) && this._converter === other._converter;\n    }\n    /**\n     * Converts this DocumentReference to the Firestore Proto representation.\n     *\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"toProto\",\n    value: function toProto() {\n      return {\n        referenceValue: this.formattedName\n      };\n    }\n    /**\n     * Applies a custom data converter to this DocumentReference, allowing you to\n     * use your own custom model objects with Firestore. When you call set(),\n     * get(), etc. on the returned DocumentReference instance, the provided\n     * converter will convert between Firestore data and your custom type U.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A DocumentReference<U> that uses the provided converter.\n     */\n\n  }, {\n    key: \"withConverter\",\n    value: function withConverter(converter) {\n      return new DocumentReference(this.firestore, this._path, converter !== null && converter !== void 0 ? converter : types_1.defaultConverter());\n    }\n  }, {\n    key: \"formattedName\",\n    get: function get() {\n      var projectId = this.firestore.projectId;\n      return this._path.toQualifiedResourcePath(projectId).formattedName;\n    }\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name DocumentReference#firestore\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     */\n\n  }, {\n    key: \"firestore\",\n    get: function get() {\n      return this._firestore;\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name DocumentReference#path\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document at '${documentReference.path}'`);\n     * });\n     */\n\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._path.relativeName;\n    }\n    /**\n     * The last path element of the referenced document.\n     *\n     * @type {string}\n     * @name DocumentReference#id\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name '${documentReference.id}'`);\n     * });\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._path.id;\n    }\n    /**\n     * Returns a resource path for this document.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"_resourcePath\",\n    get: function get() {\n      return this._path;\n    }\n    /**\n     * A reference to the collection to which this DocumentReference belongs.\n     *\n     * @name DocumentReference#parent\n     * @type {CollectionReference}\n     * @readonly\n     *\n     * @example\n     * let documentRef = firestore.doc('col/doc');\n     * let collectionRef = documentRef.parent;\n     *\n     * collectionRef.where('foo', '==', 'bar').get().then(results => {\n     *   console.log(`Found ${results.size} matches in parent collection`);\n     * }):\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      return new CollectionReference(this._firestore, this._path.parent(), this._converter);\n    }\n  }]);\n\n  return DocumentReference;\n}();\n\nexports.DocumentReference = DocumentReference;\n/**\n * A Query order-by field.\n *\n * @private\n * @internal\n * @class\n */\n\nvar FieldOrder = /*#__PURE__*/function () {\n  /**\n   * @param field The name of a document field (member) on which to order query\n   * results.\n   * @param direction One of 'ASCENDING' (default) or 'DESCENDING' to\n   * set the ordering direction to ascending or descending, respectively.\n   */\n  function FieldOrder(field) {\n    var direction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ASCENDING';\n\n    _classCallCheck(this, FieldOrder);\n\n    this.field = field;\n    this.direction = direction;\n  }\n  /**\n   * Generates the proto representation for this field order.\n   * @private\n   * @internal\n   */\n\n\n  _createClass(FieldOrder, [{\n    key: \"toProto\",\n    value: function toProto() {\n      return {\n        field: {\n          fieldPath: this.field.formattedName\n        },\n        direction: this.direction\n      };\n    }\n  }]);\n\n  return FieldOrder;\n}();\n\nexports.FieldOrder = FieldOrder;\n/**\n * A field constraint for a Query where clause.\n *\n * @private\n * @internal\n * @class\n */\n\nvar FieldFilter = /*#__PURE__*/function () {\n  /**\n   * @param serializer The Firestore serializer\n   * @param field The path of the property value to compare.\n   * @param op A comparison operation.\n   * @param value The value to which to compare the field for inclusion in a\n   * query.\n   */\n  function FieldFilter(serializer, field, op, value) {\n    _classCallCheck(this, FieldFilter);\n\n    this.serializer = serializer;\n    this.field = field;\n    this.op = op;\n    this.value = value;\n  }\n  /**\n   * Returns whether this FieldFilter uses an equals comparison.\n   *\n   * @private\n   * @internal\n   */\n\n\n  _createClass(FieldFilter, [{\n    key: \"isInequalityFilter\",\n    value: function isInequalityFilter() {\n      switch (this.op) {\n        case 'GREATER_THAN':\n        case 'GREATER_THAN_OR_EQUAL':\n        case 'LESS_THAN':\n        case 'LESS_THAN_OR_EQUAL':\n          return true;\n\n        default:\n          return false;\n      }\n    }\n    /**\n     * Generates the proto representation for this field filter.\n     *\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"toProto\",\n    value: function toProto() {\n      if (typeof this.value === 'number' && isNaN(this.value)) {\n        return {\n          unaryFilter: {\n            field: {\n              fieldPath: this.field.formattedName\n            },\n            op: this.op === 'EQUAL' ? 'IS_NAN' : 'IS_NOT_NAN'\n          }\n        };\n      }\n\n      if (this.value === null) {\n        return {\n          unaryFilter: {\n            field: {\n              fieldPath: this.field.formattedName\n            },\n            op: this.op === 'EQUAL' ? 'IS_NULL' : 'IS_NOT_NULL'\n          }\n        };\n      }\n\n      return {\n        fieldFilter: {\n          field: {\n            fieldPath: this.field.formattedName\n          },\n          op: this.op,\n          value: this.serializer.encodeValue(this.value)\n        }\n      };\n    }\n  }]);\n\n  return FieldFilter;\n}();\n/**\n * A QuerySnapshot contains zero or more\n * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} objects\n * representing the results of a query. The documents can be accessed as an\n * array via the [documents]{@link QuerySnapshot#documents} property\n * or enumerated using the [forEach]{@link QuerySnapshot#forEach}\n * method. The number of documents can be determined via the\n * [empty]{@link QuerySnapshot#empty} and\n * [size]{@link QuerySnapshot#size} properties.\n *\n * @class QuerySnapshot\n */\n\n\nvar QuerySnapshot = /*#__PURE__*/function () {\n  /**\n   * @hideconstructor\n   *\n   * @param _query The originating query.\n   * @param _readTime The time when this query snapshot was obtained.\n   * @param _size The number of documents in the result set.\n   * @param docs A callback returning a sorted array of documents matching\n   * this query\n   * @param changes A callback returning a sorted array of document change\n   * events for this snapshot.\n   */\n  function QuerySnapshot(_query, _readTime, _size, docs, changes) {\n    _classCallCheck(this, QuerySnapshot);\n\n    this._query = _query;\n    this._readTime = _readTime;\n    this._size = _size;\n    this._materializedDocs = null;\n    this._materializedChanges = null;\n    this._docs = null;\n    this._changes = null;\n    this._docs = docs;\n    this._changes = changes;\n  }\n  /**\n   * The query on which you called get() or onSnapshot() in order to get this\n   * QuerySnapshot.\n   *\n   * @type {Query}\n   * @name QuerySnapshot#query\n   * @readonly\n   *\n   * @example\n   * let query = firestore.collection('col').where('foo', '==', 'bar');\n   *\n   * query.limit(10).get().then(querySnapshot => {\n   *   console.log(`Returned first batch of results`);\n   *   let query = querySnapshot.query;\n   *   return query.offset(10).get();\n   * }).then(() => {\n   *   console.log(`Returned second batch of results`);\n   * });\n   */\n\n\n  _createClass(QuerySnapshot, [{\n    key: \"docChanges\",\n\n    /**\n     * Returns an array of the documents changes since the last snapshot. If\n     * this is the first snapshot, all documents will be in the list as added\n     * changes.\n     *\n     * @return {Array.<DocumentChange>}\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.onSnapshot(querySnapshot => {\n     *   let changes = querySnapshot.docChanges();\n     *   for (let change of changes) {\n     *     console.log(`A document was ${change.type}.`);\n     *   }\n     * });\n     */\n    value: function docChanges() {\n      if (this._materializedChanges) {\n        return this._materializedChanges;\n      }\n\n      this._materializedChanges = this._changes();\n      this._changes = null;\n      return this._materializedChanges;\n    }\n    /**\n     * Enumerates all of the documents in the QuerySnapshot. This is a convenience\n     * method for running the same callback on each {@link QueryDocumentSnapshot}\n     * that is returned.\n     *\n     * @param {function} callback A callback to be called with a\n     * [QueryDocumentSnapshot]{@link QueryDocumentSnapshot} for each document in\n     * the snapshot.\n     * @param {*=} thisArg The `this` binding for the callback..\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Document found at path: ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(callback, thisArg) {\n      validate_1.validateFunction('callback', callback);\n\n      var _iterator3 = _createForOfIteratorHelper(this.docs),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var doc = _step3.value;\n          callback.call(thisArg, doc);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n    /**\n     * Returns true if the document data in this `QuerySnapshot` is equal to the\n     * provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `QuerySnapshot` is equal to the provided\n     * value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      // Since the read time is different on every query read, we explicitly\n      // ignore all metadata in this comparison.\n      if (this === other) {\n        return true;\n      }\n\n      if (!(other instanceof QuerySnapshot)) {\n        return false;\n      }\n\n      if (this._size !== other._size) {\n        return false;\n      }\n\n      if (!this._query.isEqual(other._query)) {\n        return false;\n      }\n\n      if (this._materializedDocs && !this._materializedChanges) {\n        // If we have only materialized the documents, we compare them first.\n        return isArrayEqual(this.docs, other.docs) && isArrayEqual(this.docChanges(), other.docChanges());\n      } // Otherwise, we compare the changes first as we expect there to be fewer.\n\n\n      return isArrayEqual(this.docChanges(), other.docChanges()) && isArrayEqual(this.docs, other.docs);\n    }\n  }, {\n    key: \"query\",\n    get: function get() {\n      return this._query;\n    }\n    /**\n     * An array of all the documents in this QuerySnapshot.\n     *\n     * @type {Array.<QueryDocumentSnapshot>}\n     * @name QuerySnapshot#docs\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   let docs = querySnapshot.docs;\n     *   for (let doc of docs) {\n     *     console.log(`Document found at path: ${doc.ref.path}`);\n     *   }\n     * });\n     */\n\n  }, {\n    key: \"docs\",\n    get: function get() {\n      if (this._materializedDocs) {\n        return this._materializedDocs;\n      }\n\n      this._materializedDocs = this._docs();\n      this._docs = null;\n      return this._materializedDocs;\n    }\n    /**\n     * True if there are no documents in the QuerySnapshot.\n     *\n     * @type {boolean}\n     * @name QuerySnapshot#empty\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   if (querySnapshot.empty) {\n     *     console.log('No documents found.');\n     *   }\n     * });\n     */\n\n  }, {\n    key: \"empty\",\n    get: function get() {\n      return this._size === 0;\n    }\n    /**\n     * The number of documents in the QuerySnapshot.\n     *\n     * @type {number}\n     * @name QuerySnapshot#size\n     * @readonly\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   console.log(`Found ${querySnapshot.size} documents.`);\n     * });\n     */\n\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this._size;\n    }\n    /**\n     * The time this query snapshot was obtained.\n     *\n     * @type {Timestamp}\n     * @name QuerySnapshot#readTime\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then((querySnapshot) => {\n     *   let readTime = querySnapshot.readTime;\n     *   console.log(`Query results returned at '${readTime.toDate()}'`);\n     * });\n     */\n\n  }, {\n    key: \"readTime\",\n    get: function get() {\n      return this._readTime;\n    }\n  }]);\n\n  return QuerySnapshot;\n}();\n\nexports.QuerySnapshot = QuerySnapshot;\n/*!\n * Denotes whether a provided limit is applied to the beginning or the end of\n * the result set.\n */\n\nvar LimitType;\n\n(function (LimitType) {\n  LimitType[LimitType[\"First\"] = 0] = \"First\";\n  LimitType[LimitType[\"Last\"] = 1] = \"Last\";\n})(LimitType || (LimitType = {}));\n/**\n * Internal class representing custom Query options.\n *\n * These options are immutable. Modified options can be created using `with()`.\n * @private\n * @internal\n */\n\n\nvar QueryOptions = /*#__PURE__*/function () {\n  function QueryOptions(parentPath, collectionId, converter, allDescendants, fieldFilters, fieldOrders, startAt, endAt, limit, limitType, offset, projection) {\n    var kindless = arguments.length > 12 && arguments[12] !== undefined ? arguments[12] : false;\n    var requireConsistency = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : true;\n\n    _classCallCheck(this, QueryOptions);\n\n    this.parentPath = parentPath;\n    this.collectionId = collectionId;\n    this.converter = converter;\n    this.allDescendants = allDescendants;\n    this.fieldFilters = fieldFilters;\n    this.fieldOrders = fieldOrders;\n    this.startAt = startAt;\n    this.endAt = endAt;\n    this.limit = limit;\n    this.limitType = limitType;\n    this.offset = offset;\n    this.projection = projection;\n    this.kindless = kindless;\n    this.requireConsistency = requireConsistency;\n  }\n  /**\n   * Returns query options for a collection group query.\n   * @private\n   * @internal\n   */\n\n\n  _createClass(QueryOptions, [{\n    key: \"with\",\n\n    /**\n     * Returns the union of the current and the provided options.\n     * @private\n     * @internal\n     */\n    value: function _with(settings) {\n      return new QueryOptions(coalesce(settings.parentPath, this.parentPath), coalesce(settings.collectionId, this.collectionId), this.converter, coalesce(settings.allDescendants, this.allDescendants), coalesce(settings.fieldFilters, this.fieldFilters), coalesce(settings.fieldOrders, this.fieldOrders), coalesce(settings.startAt, this.startAt), coalesce(settings.endAt, this.endAt), coalesce(settings.limit, this.limit), coalesce(settings.limitType, this.limitType), coalesce(settings.offset, this.offset), coalesce(settings.projection, this.projection), coalesce(settings.kindless, this.kindless), coalesce(settings.requireConsistency, this.requireConsistency));\n    }\n  }, {\n    key: \"withConverter\",\n    value: function withConverter(converter) {\n      return new QueryOptions(this.parentPath, this.collectionId, converter, this.allDescendants, this.fieldFilters, this.fieldOrders, this.startAt, this.endAt, this.limit, this.limitType, this.offset, this.projection);\n    }\n  }, {\n    key: \"hasFieldOrders\",\n    value: function hasFieldOrders() {\n      return this.fieldOrders.length > 0;\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof QueryOptions && this.parentPath.isEqual(other.parentPath) && this.collectionId === other.collectionId && this.converter === other.converter && this.allDescendants === other.allDescendants && this.limit === other.limit && this.offset === other.offset && deepEqual(this.fieldFilters, other.fieldFilters) && deepEqual(this.fieldOrders, other.fieldOrders) && deepEqual(this.startAt, other.startAt) && deepEqual(this.endAt, other.endAt) && deepEqual(this.projection, other.projection) && this.kindless === other.kindless && this.requireConsistency === other.requireConsistency;\n    }\n  }], [{\n    key: \"forCollectionGroupQuery\",\n    value: function forCollectionGroupQuery(collectionId) {\n      var converter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : types_1.defaultConverter();\n      return new QueryOptions(\n      /*parentPath=*/\n      path_1.ResourcePath.EMPTY, collectionId, converter,\n      /*allDescendants=*/\n      true,\n      /*fieldFilters=*/\n      [],\n      /*fieldOrders=*/\n      []);\n    }\n    /**\n     * Returns query options for a single-collection query.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"forCollectionQuery\",\n    value: function forCollectionQuery(collectionRef) {\n      var converter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : types_1.defaultConverter();\n      return new QueryOptions(collectionRef.parent(), collectionRef.id, converter,\n      /*allDescendants=*/\n      false,\n      /*fieldFilters=*/\n      [],\n      /*fieldOrders=*/\n      []);\n    }\n    /**\n     * Returns query options for a query that fetches all descendants under the\n     * specified reference.\n     *\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"forKindlessAllDescendants\",\n    value: function forKindlessAllDescendants(parent, id) {\n      var requireConsistency = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var options = new QueryOptions(parent, id, types_1.defaultConverter(),\n      /*allDescendants=*/\n      true,\n      /*fieldFilters=*/\n      [],\n      /*fieldOrders=*/\n      []);\n      options = options.with({\n        kindless: true,\n        requireConsistency: requireConsistency\n      });\n      return options;\n    }\n  }]);\n\n  return QueryOptions;\n}();\n\nexports.QueryOptions = QueryOptions;\n/**\n * A Query refers to a query which you can read or stream from. You can also\n * construct refined Query objects by adding filters and ordering.\n *\n * @class Query\n */\n\nvar Query = /*#__PURE__*/function () {\n  /**\n   * @hideconstructor\n   *\n   * @param _firestore The Firestore Database client.\n   * @param _queryOptions Options that define the query.\n   */\n  function Query(_firestore, _queryOptions) {\n    _classCallCheck(this, Query);\n\n    this._firestore = _firestore;\n    this._queryOptions = _queryOptions;\n    this._serializer = new serializer_1.Serializer(_firestore);\n    this._allowUndefined = !!this._firestore._settings.ignoreUndefinedProperties;\n  }\n  /**\n   * Extracts field values from the DocumentSnapshot based on the provided\n   * field order.\n   *\n   * @private\n   * @internal\n   * @param documentSnapshot The document to extract the fields from.\n   * @param fieldOrders The field order that defines what fields we should\n   * extract.\n   * @return {Array.<*>} The field values to use.\n   * @private\n   * @internal\n   */\n\n\n  _createClass(Query, [{\n    key: \"where\",\n\n    /**\n     * Creates and returns a new [Query]{@link Query} with the additional filter\n     * that documents must contain the specified field and that its value should\n     * satisfy the relation constraint provided.\n     *\n     * Returns a new Query that constrains the value of a Document property.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the filter.\n     *\n     * @param {string|FieldPath} fieldPath The name of a property value to compare.\n     * @param {string} opStr A comparison operation in the form of a string\n     * (e.g., \"<\").\n     * @param {*} value The value to which to compare the field for inclusion in\n     * a query.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.where('foo', '==', 'bar').get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n    value: function where(fieldPath, opStr, value) {\n      var _this3 = this;\n\n      path_1.validateFieldPath('fieldPath', fieldPath);\n      opStr = validateQueryOperator('opStr', opStr, value);\n      validateQueryValue('value', value, this._allowUndefined);\n\n      if (this._queryOptions.startAt || this._queryOptions.endAt) {\n        throw new Error('Cannot specify a where() filter after calling startAt(), ' + 'startAfter(), endBefore() or endAt().');\n      }\n\n      var path = path_1.FieldPath.fromArgument(fieldPath);\n\n      if (path_1.FieldPath.documentId().isEqual(path)) {\n        if (opStr === 'array-contains' || opStr === 'array-contains-any') {\n          throw new Error(\"Invalid Query. You can't perform '\".concat(opStr, \"' \") + 'queries on FieldPath.documentId().');\n        }\n\n        if (opStr === 'in' || opStr === 'not-in') {\n          if (!Array.isArray(value) || value.length === 0) {\n            throw new Error(\"Invalid Query. A non-empty array is required for '\".concat(opStr, \"' filters.\"));\n          }\n\n          value = value.map(function (el) {\n            return _this3.validateReference(el);\n          });\n        } else {\n          value = this.validateReference(value);\n        }\n      }\n\n      var fieldFilter = new FieldFilter(this._serializer, path, comparisonOperators[opStr], value);\n\n      var options = this._queryOptions.with({\n        fieldFilters: this._queryOptions.fieldFilters.concat(fieldFilter)\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} instance that applies a\n     * field mask to the result and returns only the specified subset of fields.\n     * You can specify a list of field paths to return, or use an empty list to\n     * only return the references of matching documents.\n     *\n     * Queries that contain field masks cannot be listened to via `onSnapshot()`\n     * listeners.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {...(string|FieldPath)} fieldPaths The field paths to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     * let documentRef = collectionRef.doc('doc');\n     *\n     * return documentRef.set({x:10, y:5}).then(() => {\n     *   return collectionRef.where('x', '>', 5).select('y').get();\n     * }).then((res) => {\n     *   console.log(`y is ${res.docs[0].get('y')}.`);\n     * });\n     */\n\n  }, {\n    key: \"select\",\n    value: function select() {\n      var fields = [];\n\n      if (arguments.length === 0) {\n        fields.push({\n          fieldPath: path_1.FieldPath.documentId().formattedName\n        });\n      } else {\n        for (var i = 0; i < arguments.length; ++i) {\n          path_1.validateFieldPath(i, i < 0 || arguments.length <= i ? undefined : arguments[i]);\n          fields.push({\n            fieldPath: path_1.FieldPath.fromArgument(i < 0 || arguments.length <= i ? undefined : arguments[i]).formattedName\n          });\n        }\n      } // By specifying a field mask, the query result no longer conforms to type\n      // `T`. We there return `Query<DocumentData>`;\n\n\n      var options = this._queryOptions.with({\n        projection: {\n          fields: fields\n        }\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that's additionally sorted\n     * by the specified field, optionally in descending order instead of\n     * ascending.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the field mask.\n     *\n     * @param {string|FieldPath} fieldPath The field to sort by.\n     * @param {string=} directionStr Optional direction to sort by ('asc' or\n     * 'desc'). If not specified, order will be ascending.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.orderBy('foo', 'desc').get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(fieldPath, directionStr) {\n      path_1.validateFieldPath('fieldPath', fieldPath);\n      directionStr = validateQueryOrder('directionStr', directionStr);\n\n      if (this._queryOptions.startAt || this._queryOptions.endAt) {\n        throw new Error('Cannot specify an orderBy() constraint after calling ' + 'startAt(), startAfter(), endBefore() or endAt().');\n      }\n\n      var newOrder = new FieldOrder(path_1.FieldPath.fromArgument(fieldPath), directionOperators[directionStr || 'asc']);\n\n      var options = this._queryOptions.with({\n        fieldOrders: this._queryOptions.fieldOrders.concat(newOrder)\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that only returns the\n     * first matching documents.\n     *\n     * This function returns a new (immutable) instance of the Query (rather than\n     * modify the existing instance) to impose the limit.\n     *\n     * @param {number} limit The maximum number of items to return.\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(1).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      validate_1.validateInteger('limit', _limit);\n\n      var options = this._queryOptions.with({\n        limit: _limit,\n        limitType: LimitType.First\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that only returns the\n     * last matching documents.\n     *\n     * You must specify at least one orderBy clause for limitToLast queries,\n     * otherwise an exception will be thrown during execution.\n     *\n     * Results for limitToLast queries cannot be streamed via the `stream()` API.\n     *\n     * @param limit The maximum number of items to return.\n     * @return The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limitToLast(1).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Last matching document is ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(limit) {\n      validate_1.validateInteger('limitToLast', limit);\n\n      var options = this._queryOptions.with({\n        limit: limit,\n        limitType: LimitType.Last\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Specifies the offset of the returned results.\n     *\n     * This function returns a new (immutable) instance of the\n     * [Query]{@link Query} (rather than modify the existing instance)\n     * to impose the offset.\n     *\n     * @param {number} offset The offset to apply to the Query results\n     * @returns {Query} The created Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '>', 42);\n     *\n     * query.limit(10).offset(20).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"offset\",\n    value: function offset(_offset) {\n      validate_1.validateInteger('offset', _offset);\n\n      var options = this._queryOptions.with({\n        offset: _offset\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Returns true if this `Query` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `Query` is equal to the provided value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof Query && this._queryOptions.isEqual(other._queryOptions);\n    }\n    /**\n     * Computes the backend ordering semantics for DocumentSnapshot cursors.\n     *\n     * @private\n     * @internal\n     * @param cursorValuesOrDocumentSnapshot The snapshot of the document or the\n     * set of field values to use as the boundary.\n     * @returns The implicit ordering semantics.\n     */\n\n  }, {\n    key: \"createImplicitOrderBy\",\n    value: function createImplicitOrderBy(cursorValuesOrDocumentSnapshot) {\n      // Add an implicit orderBy if the only cursor value is a DocumentSnapshot\n      // or a DocumentReference.\n      if (cursorValuesOrDocumentSnapshot.length !== 1 || !(cursorValuesOrDocumentSnapshot[0] instanceof document_1.DocumentSnapshot || cursorValuesOrDocumentSnapshot[0] instanceof DocumentReference)) {\n        return this._queryOptions.fieldOrders;\n      }\n\n      var fieldOrders = this._queryOptions.fieldOrders.slice(); // If no explicit ordering is specified, use the first inequality to\n      // define an implicit order.\n\n\n      if (fieldOrders.length === 0) {\n        var _iterator4 = _createForOfIteratorHelper(this._queryOptions.fieldFilters),\n            _step4;\n\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var fieldFilter = _step4.value;\n\n            if (fieldFilter.isInequalityFilter()) {\n              fieldOrders.push(new FieldOrder(fieldFilter.field));\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n      }\n\n      var hasDocumentId = !!fieldOrders.find(function (fieldOrder) {\n        return path_1.FieldPath.documentId().isEqual(fieldOrder.field);\n      });\n\n      if (!hasDocumentId) {\n        // Add implicit sorting by name, using the last specified direction.\n        var lastDirection = fieldOrders.length === 0 ? directionOperators.ASC : fieldOrders[fieldOrders.length - 1].direction;\n        fieldOrders.push(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));\n      }\n\n      return fieldOrders;\n    }\n    /**\n     * Builds a Firestore 'Position' proto message.\n     *\n     * @private\n     * @internal\n     * @param {Array.<FieldOrder>} fieldOrders The field orders to use for this\n     * cursor.\n     * @param {Array.<DocumentSnapshot|*>} cursorValuesOrDocumentSnapshot The\n     * snapshot of the document or the set of field values to use as the boundary.\n     * @param before Whether the query boundary lies just before or after the\n     * provided data.\n     * @returns {Object} The proto message.\n     */\n\n  }, {\n    key: \"createCursor\",\n    value: function createCursor(fieldOrders, cursorValuesOrDocumentSnapshot, before) {\n      var fieldValues;\n\n      if (cursorValuesOrDocumentSnapshot.length === 1 && cursorValuesOrDocumentSnapshot[0] instanceof document_1.DocumentSnapshot) {\n        fieldValues = Query._extractFieldValues(cursorValuesOrDocumentSnapshot[0], fieldOrders);\n      } else {\n        fieldValues = cursorValuesOrDocumentSnapshot;\n      }\n\n      if (fieldValues.length > fieldOrders.length) {\n        throw new Error('Too many cursor values specified. The specified ' + 'values must match the orderBy() constraints of the query.');\n      }\n\n      var options = {\n        values: [],\n        before: before\n      };\n\n      for (var i = 0; i < fieldValues.length; ++i) {\n        var fieldValue = fieldValues[i];\n\n        if (path_1.FieldPath.documentId().isEqual(fieldOrders[i].field)) {\n          fieldValue = this.validateReference(fieldValue);\n        }\n\n        validateQueryValue(i, fieldValue, this._allowUndefined);\n        options.values.push(this._serializer.encodeValue(fieldValue));\n      }\n\n      return options;\n    }\n    /**\n     * Validates that a value used with FieldValue.documentId() is either a\n     * string or a DocumentReference that is part of the query`s result set.\n     * Throws a validation error or returns a DocumentReference that can\n     * directly be used in the Query.\n     *\n     * @param val The value to validate.\n     * @throws If the value cannot be used for this query.\n     * @return If valid, returns a DocumentReference that can be used with the\n     * query.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"validateReference\",\n    value: function validateReference(val) {\n      var basePath = this._queryOptions.allDescendants ? this._queryOptions.parentPath : this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n      var reference;\n\n      if (typeof val === 'string') {\n        var path = basePath.append(val);\n\n        if (this._queryOptions.allDescendants) {\n          if (!path.isDocument) {\n            throw new Error('When querying a collection group and ordering by ' + 'FieldPath.documentId(), the corresponding value must result in ' + \"a valid document path, but '\".concat(val, \"' is not because it \") + 'contains an odd number of segments.');\n          }\n        } else if (val.indexOf('/') !== -1) {\n          throw new Error('When querying a collection and ordering by FieldPath.documentId(), ' + \"the corresponding value must be a plain document ID, but '\".concat(val, \"' \") + 'contains a slash.');\n        }\n\n        reference = new DocumentReference(this._firestore, basePath.append(val), this._queryOptions.converter);\n      } else if (val instanceof DocumentReference) {\n        reference = val;\n\n        if (!basePath.isPrefixOf(reference._path)) {\n          throw new Error(\"\\\"\".concat(reference.path, \"\\\" is not part of the query result set and \") + 'cannot be used as a query boundary.');\n        }\n      } else {\n        throw new Error('The corresponding value for FieldPath.documentId() must be a ' + \"string or a DocumentReference, but was \\\"\".concat(val, \"\\\".\"));\n      }\n\n      if (!this._queryOptions.allDescendants && reference._path.parent().compareTo(basePath) !== 0) {\n        throw new Error('Only a direct child can be used as a query boundary. ' + \"Found: \\\"\".concat(reference.path, \"\\\".\"));\n      }\n\n      return reference;\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start at or the field values to\n     * start this query at, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"startAt\",\n    value: function startAt() {\n      for (var _len2 = arguments.length, fieldValuesOrDocumentSnapshot = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        fieldValuesOrDocumentSnapshot[_key2] = arguments[_key2];\n      }\n\n      validate_1.validateMinNumberOfArguments('Query.startAt', fieldValuesOrDocumentSnapshot, 1);\n      var fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n      var startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n\n      var options = this._queryOptions.with({\n        fieldOrders: fieldOrders,\n        startAt: startAt\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that starts after the\n     * provided set of field values relative to the order of the query. The order\n     * of the provided values must match the order of the order by clauses of the\n     * query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should start after or the field values to\n     * start this query after, in order of the query's order by.\n     * @returns {Query} A query with the new starting point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').startAfter(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"startAfter\",\n    value: function startAfter() {\n      for (var _len3 = arguments.length, fieldValuesOrDocumentSnapshot = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        fieldValuesOrDocumentSnapshot[_key3] = arguments[_key3];\n      }\n\n      validate_1.validateMinNumberOfArguments('Query.startAfter', fieldValuesOrDocumentSnapshot, 1);\n      var fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n      var startAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n\n      var options = this._queryOptions.with({\n        fieldOrders: fieldOrders,\n        startAt: startAt\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends before the set of\n     * field values relative to the order of the query. The order of the provided\n     * values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end before or the field values to\n     * end this query before, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endBefore(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"endBefore\",\n    value: function endBefore() {\n      for (var _len4 = arguments.length, fieldValuesOrDocumentSnapshot = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        fieldValuesOrDocumentSnapshot[_key4] = arguments[_key4];\n      }\n\n      validate_1.validateMinNumberOfArguments('Query.endBefore', fieldValuesOrDocumentSnapshot, 1);\n      var fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n      var endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, true);\n\n      var options = this._queryOptions.with({\n        fieldOrders: fieldOrders,\n        endAt: endAt\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Creates and returns a new [Query]{@link Query} that ends at the provided\n     * set of field values relative to the order of the query. The order of the\n     * provided values must match the order of the order by clauses of the query.\n     *\n     * @param {...*|DocumentSnapshot} fieldValuesOrDocumentSnapshot The snapshot\n     * of the document the query results should end at or the field values to end\n     * this query at, in order of the query's order by.\n     * @returns {Query} A query with the new ending point.\n     *\n     * @example\n     * let query = firestore.collection('col');\n     *\n     * query.orderBy('foo').endAt(42).get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"endAt\",\n    value: function endAt() {\n      for (var _len5 = arguments.length, fieldValuesOrDocumentSnapshot = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        fieldValuesOrDocumentSnapshot[_key5] = arguments[_key5];\n      }\n\n      validate_1.validateMinNumberOfArguments('Query.endAt', fieldValuesOrDocumentSnapshot, 1);\n      var fieldOrders = this.createImplicitOrderBy(fieldValuesOrDocumentSnapshot);\n      var endAt = this.createCursor(fieldOrders, fieldValuesOrDocumentSnapshot, false);\n\n      var options = this._queryOptions.with({\n        fieldOrders: fieldOrders,\n        endAt: endAt\n      });\n\n      return new Query(this._firestore, options);\n    }\n    /**\n     * Executes the query and returns the results as a\n     * [QuerySnapshot]{@link QuerySnapshot}.\n     *\n     * @returns {Promise.<QuerySnapshot>} A Promise that resolves with the results\n     * of the Query.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * query.get().then(querySnapshot => {\n     *   querySnapshot.forEach(documentSnapshot => {\n     *     console.log(`Found document at ${documentSnapshot.ref.path}`);\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      return this._get();\n    }\n    /**\n     * Internal get() method that accepts an optional transaction id.\n     *\n     * @private\n     * @internal\n     * @param {bytes=} transactionId A transaction ID.\n     */\n\n  }, {\n    key: \"_get\",\n    value: function _get(transactionId) {\n      var _this4 = this;\n\n      var docs = []; // Capture the error stack to preserve stack tracing across async calls.\n\n      var stack = Error().stack;\n      return new Promise(function (resolve, reject) {\n        var readTime;\n\n        _this4._stream(transactionId).on('error', function (err) {\n          reject(util_1.wrapError(err, stack));\n        }).on('data', function (result) {\n          readTime = result.readTime;\n\n          if (result.document) {\n            docs.push(result.document);\n          }\n        }).on('end', function () {\n          if (_this4._queryOptions.limitType === LimitType.Last) {\n            // The results for limitToLast queries need to be flipped since\n            // we reversed the ordering constraints before sending the query\n            // to the backend.\n            docs.reverse();\n          }\n\n          resolve(new QuerySnapshot(_this4, readTime, docs.length, function () {\n            return docs;\n          }, function () {\n            var changes = [];\n\n            for (var i = 0; i < docs.length; ++i) {\n              changes.push(new document_change_1.DocumentChange('added', docs[i], -1, i));\n            }\n\n            return changes;\n          }));\n        });\n      });\n    }\n    /**\n     * Executes the query and streams the results as\n     * [QueryDocumentSnapshots]{@link QueryDocumentSnapshot}.\n     *\n     * @returns {Stream.<QueryDocumentSnapshot>} A stream of\n     * QueryDocumentSnapshots.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let count = 0;\n     *\n     * query.stream().on('data', (documentSnapshot) => {\n     *   console.log(`Found document with name '${documentSnapshot.id}'`);\n     *   ++count;\n     * }).on('end', () => {\n     *   console.log(`Total count is ${count}`);\n     * });\n     */\n\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      if (this._queryOptions.limitType === LimitType.Last) {\n        throw new Error('Query results for queries that include limitToLast() ' + 'constraints cannot be streamed. Use Query.get() instead.');\n      }\n\n      var responseStream = this._stream();\n\n      var transform = new stream_1.Transform({\n        objectMode: true,\n        transform: function transform(chunk, encoding, callback) {\n          callback(undefined, chunk.document);\n        }\n      });\n      responseStream.pipe(transform);\n      responseStream.on('error', function (e) {\n        return transform.destroy(e);\n      });\n      return transform;\n    }\n    /**\n     * Converts a QueryCursor to its proto representation.\n     *\n     * @param cursor The original cursor value\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"toCursor\",\n    value: function toCursor(cursor) {\n      if (cursor) {\n        return cursor.before ? {\n          before: true,\n          values: cursor.values\n        } : {\n          values: cursor.values\n        };\n      }\n\n      return undefined;\n    }\n    /**\n     * Internal method for serializing a query to its RunQuery proto\n     * representation with an optional transaction id or read time.\n     *\n     * @param transactionIdOrReadTime A transaction ID or the read time at which\n     * to execute the query.\n     * @private\n     * @internal\n     * @returns Serialized JSON for the query.\n     */\n\n  }, {\n    key: \"toProto\",\n    value: function toProto(transactionIdOrReadTime) {\n      var projectId = this.firestore.projectId;\n\n      var parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId);\n\n      var structuredQuery = this.toStructuredQuery(); // For limitToLast queries, the structured query has to be translated to a version with\n      // reversed ordered, and flipped startAt/endAt to work properly.\n\n      if (this._queryOptions.limitType === LimitType.Last) {\n        if (!this._queryOptions.hasFieldOrders()) {\n          throw new Error('limitToLast() queries require specifying at least one orderBy() clause.');\n        }\n\n        structuredQuery.orderBy = this._queryOptions.fieldOrders.map(function (order) {\n          // Flip the orderBy directions since we want the last results\n          var dir = order.direction === 'DESCENDING' ? 'ASCENDING' : 'DESCENDING';\n          return new FieldOrder(order.field, dir).toProto();\n        }); // Swap the cursors to match the now-flipped query ordering.\n\n        structuredQuery.startAt = this._queryOptions.endAt ? this.toCursor({\n          values: this._queryOptions.endAt.values,\n          before: !this._queryOptions.endAt.before\n        }) : undefined;\n        structuredQuery.endAt = this._queryOptions.startAt ? this.toCursor({\n          values: this._queryOptions.startAt.values,\n          before: !this._queryOptions.startAt.before\n        }) : undefined;\n      }\n\n      var runQueryRequest = {\n        parent: parentPath.formattedName,\n        structuredQuery: structuredQuery\n      };\n\n      if (transactionIdOrReadTime instanceof Uint8Array) {\n        runQueryRequest.transaction = transactionIdOrReadTime;\n      } else if (transactionIdOrReadTime instanceof timestamp_1.Timestamp) {\n        runQueryRequest.readTime = transactionIdOrReadTime.toProto().timestampValue;\n      }\n\n      return runQueryRequest;\n    }\n    /**\n     * Converts current Query to an IBundledQuery.\n     *\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"_toBundledQuery\",\n    value: function _toBundledQuery() {\n      var projectId = this.firestore.projectId;\n\n      var parentPath = this._queryOptions.parentPath.toQualifiedResourcePath(projectId);\n\n      var structuredQuery = this.toStructuredQuery();\n      var bundledQuery = {\n        parent: parentPath.formattedName,\n        structuredQuery: structuredQuery\n      };\n\n      if (this._queryOptions.limitType === LimitType.First) {\n        bundledQuery.limitType = 'FIRST';\n      } else if (this._queryOptions.limitType === LimitType.Last) {\n        bundledQuery.limitType = 'LAST';\n      }\n\n      return bundledQuery;\n    }\n  }, {\n    key: \"toStructuredQuery\",\n    value: function toStructuredQuery() {\n      var structuredQuery = {\n        from: [{}]\n      };\n\n      if (this._queryOptions.allDescendants) {\n        structuredQuery.from[0].allDescendants = true;\n      } // Kindless queries select all descendant documents, so we remove the\n      // collectionId field.\n\n\n      if (!this._queryOptions.kindless) {\n        structuredQuery.from[0].collectionId = this._queryOptions.collectionId;\n      }\n\n      if (this._queryOptions.fieldFilters.length === 1) {\n        structuredQuery.where = this._queryOptions.fieldFilters[0].toProto();\n      } else if (this._queryOptions.fieldFilters.length > 1) {\n        var filters = [];\n\n        var _iterator5 = _createForOfIteratorHelper(this._queryOptions.fieldFilters),\n            _step5;\n\n        try {\n          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n            var fieldFilter = _step5.value;\n            filters.push(fieldFilter.toProto());\n          }\n        } catch (err) {\n          _iterator5.e(err);\n        } finally {\n          _iterator5.f();\n        }\n\n        structuredQuery.where = {\n          compositeFilter: {\n            op: 'AND',\n            filters: filters\n          }\n        };\n      }\n\n      if (this._queryOptions.hasFieldOrders()) {\n        structuredQuery.orderBy = this._queryOptions.fieldOrders.map(function (o) {\n          return o.toProto();\n        });\n      }\n\n      structuredQuery.startAt = this.toCursor(this._queryOptions.startAt);\n      structuredQuery.endAt = this.toCursor(this._queryOptions.endAt);\n\n      if (this._queryOptions.limit) {\n        structuredQuery.limit = {\n          value: this._queryOptions.limit\n        };\n      }\n\n      structuredQuery.offset = this._queryOptions.offset;\n      structuredQuery.select = this._queryOptions.projection;\n      return structuredQuery;\n    }\n    /**\n     * Internal streaming method that accepts an optional transaction ID.\n     *\n     * @param transactionId A transaction ID.\n     * @private\n     * @internal\n     * @returns A stream of document results.\n     */\n\n  }, {\n    key: \"_stream\",\n    value: function _stream(transactionId) {\n      var _this5 = this;\n\n      var tag = util_1.requestTag();\n      var lastReceivedDocument = null;\n      var stream = new stream_1.Transform({\n        objectMode: true,\n        transform: function transform(proto, enc, callback) {\n          var readTime = timestamp_1.Timestamp.fromProto(proto.readTime);\n\n          if (proto.document) {\n            var document = _this5.firestore.snapshot_(proto.document, proto.readTime);\n\n            var finalDoc = new document_1.DocumentSnapshotBuilder(document.ref.withConverter(_this5._queryOptions.converter)); // Recreate the QueryDocumentSnapshot with the DocumentReference\n            // containing the original converter.\n\n            finalDoc.fieldsProto = document._fieldsProto;\n            finalDoc.readTime = document.readTime;\n            finalDoc.createTime = document.createTime;\n            finalDoc.updateTime = document.updateTime;\n            lastReceivedDocument = finalDoc.build();\n            callback(undefined, {\n              document: lastReceivedDocument,\n              readTime: readTime\n            });\n          } else {\n            callback(undefined, {\n              readTime: readTime\n            });\n          }\n        }\n      });\n      this.firestore.initializeIfNeeded(tag).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var request, streamActive, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // `toProto()` might throw an exception. We rely on the behavior of an\n                // async function to convert this exception into the rejected Promise we\n                // catch below.\n                request = _this5.toProto(transactionId);\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var backendStream;\n                  return _regeneratorRuntime.wrap(function _loop$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          streamActive = new util_1.Deferred();\n                          _context.next = 3;\n                          return _this5._firestore.requestStream('runQuery', request, tag);\n\n                        case 3:\n                          backendStream = _context.sent;\n                          backendStream.on('error', function (err) {\n                            backendStream.unpipe(stream); // If a non-transactional query failed, attempt to restart.\n                            // Transactional queries are retried via the transaction runner.\n\n                            if (!transactionId && !util_1.isPermanentRpcError(err, 'runQuery')) {\n                              logger_1.logger('Query._stream', tag, 'Query failed with retryable stream error:', err);\n\n                              if (lastReceivedDocument) {\n                                // Restart the query but use the last document we received as the\n                                // query cursor. Note that we do not use backoff here. The call to\n                                // `requestStream()` will backoff should the restart fail before\n                                // delivering any results.\n                                if (_this5._queryOptions.requireConsistency) {\n                                  request = _this5.startAfter(lastReceivedDocument).toProto(lastReceivedDocument.readTime);\n                                } else {\n                                  request = _this5.startAfter(lastReceivedDocument).toProto();\n                                }\n                              }\n\n                              streamActive.resolve(\n                              /* active= */\n                              true);\n                            } else {\n                              logger_1.logger('Query._stream', tag, 'Query failed with stream error:', err);\n                              stream.destroy(err);\n                              streamActive.resolve(\n                              /* active= */\n                              false);\n                            }\n                          });\n                          backendStream.on('end', function () {\n                            streamActive.resolve(\n                            /* active= */\n                            false);\n                          });\n                          backendStream.resume();\n                          backendStream.pipe(stream);\n\n                        case 8:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n              case 2:\n                return _context2.delegateYield(_loop(), \"t0\", 3);\n\n              case 3:\n                _context2.next = 5;\n                return streamActive.promise;\n\n              case 5:\n                if (_context2.sent) {\n                  _context2.next = 2;\n                  break;\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee);\n      }))).catch(function (e) {\n        return stream.destroy(e);\n      });\n      return stream;\n    }\n    /**\n     * Attaches a listener for QuerySnapshot events.\n     *\n     * @param {querySnapshotCallback} onNext A callback to be called every time\n     * a new [QuerySnapshot]{@link QuerySnapshot} is available.\n     * @param {errorCallback=} onError A callback to be called if the listen\n     * fails or is cancelled. No further callbacks will occur.\n     *\n     * @returns {function()} An unsubscribe function that can be called to cancel\n     * the snapshot listener.\n     *\n     * @example\n     * let query = firestore.collection('col').where('foo', '==', 'bar');\n     *\n     * let unsubscribe = query.onSnapshot(querySnapshot => {\n     *   console.log(`Received query snapshot of size ${querySnapshot.size}`);\n     * }, err => {\n     *   console.log(`Encountered error: ${err}`);\n     * });\n     *\n     * // Remove this listener.\n     * unsubscribe();\n     */\n\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot(onNext, onError) {\n      var _this6 = this;\n\n      validate_1.validateFunction('onNext', onNext);\n      validate_1.validateFunction('onError', onError, {\n        optional: true\n      });\n      var watch = new (require('./watch').QueryWatch)(this.firestore, this, this._queryOptions.converter);\n      return watch.onSnapshot(function (readTime, size, docs, changes) {\n        onNext(new QuerySnapshot(_this6, readTime, size, docs, changes));\n      }, onError || console.error);\n    }\n    /**\n     * Returns a function that can be used to sort QueryDocumentSnapshots\n     * according to the sort criteria of this query.\n     *\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"comparator\",\n    value: function comparator() {\n      var _this7 = this;\n\n      return function (doc1, doc2) {\n        // Add implicit sorting by name, using the last specified direction.\n        var lastDirection = _this7._queryOptions.hasFieldOrders() ? _this7._queryOptions.fieldOrders[_this7._queryOptions.fieldOrders.length - 1].direction : 'ASCENDING';\n\n        var orderBys = _this7._queryOptions.fieldOrders.concat(new FieldOrder(path_1.FieldPath.documentId(), lastDirection));\n\n        var _iterator6 = _createForOfIteratorHelper(orderBys),\n            _step6;\n\n        try {\n          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n            var orderBy = _step6.value;\n            var comp = void 0;\n\n            if (path_1.FieldPath.documentId().isEqual(orderBy.field)) {\n              comp = doc1.ref._path.compareTo(doc2.ref._path);\n            } else {\n              var v1 = doc1.protoField(orderBy.field);\n              var v2 = doc2.protoField(orderBy.field);\n\n              if (v1 === undefined || v2 === undefined) {\n                throw new Error('Trying to compare documents on fields that ' + \"don't exist. Please include the fields you are ordering on \" + 'in your select() call.');\n              }\n\n              comp = order_1.compare(v1, v2);\n            }\n\n            if (comp !== 0) {\n              var direction = orderBy.direction === 'ASCENDING' ? 1 : -1;\n              return direction * comp;\n            }\n          }\n        } catch (err) {\n          _iterator6.e(err);\n        } finally {\n          _iterator6.f();\n        }\n\n        return 0;\n      };\n    }\n    /**\n     * Applies a custom data converter to this Query, allowing you to use your\n     * own custom model objects with Firestore. When you call get() on the\n     * returned Query, the provided converter will convert between Firestore\n     * data and your custom type U.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A Query<U> that uses the provided converter.\n     */\n\n  }, {\n    key: \"withConverter\",\n    value: function withConverter(converter) {\n      return new Query(this.firestore, this._queryOptions.withConverter(converter !== null && converter !== void 0 ? converter : types_1.defaultConverter()));\n    }\n  }, {\n    key: \"firestore\",\n\n    /**\n     * The [Firestore]{@link Firestore} instance for the Firestore\n     * database (useful for performing transactions, etc.).\n     *\n     * @type {Firestore}\n     * @name Query#firestore\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   let firestore = documentReference.firestore;\n     *   console.log(`Root location for document is ${firestore.formattedName}`);\n     * });\n     */\n    get: function get() {\n      return this._firestore;\n    }\n  }], [{\n    key: \"_extractFieldValues\",\n    value: function _extractFieldValues(documentSnapshot, fieldOrders) {\n      var fieldValues = [];\n\n      var _iterator7 = _createForOfIteratorHelper(fieldOrders),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var fieldOrder = _step7.value;\n\n          if (path_1.FieldPath.documentId().isEqual(fieldOrder.field)) {\n            fieldValues.push(documentSnapshot.ref);\n          } else {\n            var fieldValue = documentSnapshot.get(fieldOrder.field);\n\n            if (fieldValue === undefined) {\n              throw new Error(\"Field \\\"\".concat(fieldOrder.field, \"\\\" is missing in the provided DocumentSnapshot. \") + 'Please provide a document that contains values for all specified ' + 'orderBy() and where() constraints.');\n            } else {\n              fieldValues.push(fieldValue);\n            }\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      return fieldValues;\n    }\n  }]);\n\n  return Query;\n}();\n\nexports.Query = Query;\n/**\n * A CollectionReference object can be used for adding documents, getting\n * document references, and querying for documents (using the methods\n * inherited from [Query]{@link Query}).\n *\n * @class CollectionReference\n * @extends Query\n */\n\nvar CollectionReference = /*#__PURE__*/function (_Query) {\n  _inherits(CollectionReference, _Query);\n\n  /**\n   * @hideconstructor\n   *\n   * @param firestore The Firestore Database client.\n   * @param path The Path of this collection.\n   */\n  function CollectionReference(firestore, path, converter) {\n    _classCallCheck(this, CollectionReference);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CollectionReference).call(this, firestore, QueryOptions.forCollectionQuery(path, converter)));\n  }\n  /**\n   * Returns a resource path for this collection.\n   * @private\n   * @internal\n   */\n\n\n  _createClass(CollectionReference, [{\n    key: \"listDocuments\",\n\n    /**\n     * Retrieves the list of documents in this collection.\n     *\n     * The document references returned may include references to \"missing\n     * documents\", i.e. document locations that have no document present but\n     * which contain subcollections with documents. Attempting to read such a\n     * document reference (e.g. via `.get()` or `.onSnapshot()`) will return a\n     * `DocumentSnapshot` whose `.exists` property is false.\n     *\n     * @return {Promise<DocumentReference[]>} The list of documents in this\n     * collection.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     *\n     * return collectionRef.listDocuments().then(documentRefs => {\n     *    return firestore.getAll(...documentRefs);\n     * }).then(documentSnapshots => {\n     *    for (let documentSnapshot of documentSnapshots) {\n     *       if (documentSnapshot.exists) {\n     *         console.log(`Found document with data: ${documentSnapshot.id}`);\n     *       } else {\n     *         console.log(`Found missing document: ${documentSnapshot.id}`);\n     *       }\n     *    }\n     * });\n     */\n    value: function listDocuments() {\n      var _this8 = this;\n\n      var tag = util_1.requestTag();\n      return this.firestore.initializeIfNeeded(tag).then(function () {\n        var parentPath = _this8._queryOptions.parentPath.toQualifiedResourcePath(_this8.firestore.projectId);\n\n        var request = {\n          parent: parentPath.formattedName,\n          collectionId: _this8.id,\n          showMissing: true,\n          // Setting `pageSize` to an arbitrarily large value lets the backend cap\n          // the page size (currently to 300). Note that the backend rejects\n          // MAX_INT32 (b/146883794).\n          pageSize: Math.pow(2, 16) - 1,\n          mask: {\n            fieldPaths: []\n          }\n        };\n        return _this8.firestore.request('listDocuments', request, tag).then(function (documents) {\n          // Note that the backend already orders these documents by name,\n          // so we do not need to manually sort them.\n          return documents.map(function (doc) {\n            var path = path_1.QualifiedResourcePath.fromSlashSeparatedString(doc.name);\n            return _this8.doc(path.id);\n          });\n        });\n      });\n    }\n    /**\n     * Gets a [DocumentReference]{@link DocumentReference} instance that\n     * refers to the document at the specified path. If no path is specified, an\n     * automatically-generated unique ID will be used for the returned\n     * DocumentReference.\n     *\n     * @param {string=} documentPath A slash-separated path to a document.\n     * @returns {DocumentReference} The `DocumentReference`\n     * instance.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     * let documentRefWithName = collectionRef.doc('doc');\n     * let documentRefWithAutoId = collectionRef.doc();\n     * console.log(`Reference with name: ${documentRefWithName.path}`);\n     * console.log(`Reference with auto-id: ${documentRefWithAutoId.path}`);\n     */\n\n  }, {\n    key: \"doc\",\n    value: function doc(documentPath) {\n      if (arguments.length === 0) {\n        documentPath = util_1.autoId();\n      } else {\n        path_1.validateResourcePath('documentPath', documentPath);\n      }\n\n      var path = this._resourcePath.append(documentPath);\n\n      if (!path.isDocument) {\n        throw new Error(\"Value for argument \\\"documentPath\\\" must point to a document, but was \\\"\".concat(documentPath, \"\\\". Your path does not contain an even number of components.\"));\n      }\n\n      return new DocumentReference(this.firestore, path, this._queryOptions.converter);\n    }\n    /**\n     * Add a new document to this collection with the specified data, assigning\n     * it a document ID automatically.\n     *\n     * @param {DocumentData} data An Object containing the data for the new\n     * document.\n     * @returns {Promise.<DocumentReference>} A Promise resolved with a\n     * [DocumentReference]{@link DocumentReference} pointing to the\n     * newly created document.\n     *\n     * @example\n     * let collectionRef = firestore.collection('col');\n     * collectionRef.add({foo: 'bar'}).then(documentReference => {\n     *   console.log(`Added document with name: ${documentReference.id}`);\n     * });\n     */\n\n  }, {\n    key: \"add\",\n    value: function add(data) {\n      var firestoreData = this._queryOptions.converter.toFirestore(data);\n\n      write_batch_1.validateDocumentData('data', firestoreData,\n      /*allowDeletes=*/\n      false, this._allowUndefined);\n      var documentRef = this.doc();\n      return documentRef.create(data).then(function () {\n        return documentRef;\n      });\n    }\n    /**\n     * Returns true if this `CollectionReference` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `CollectionReference` is equal to the\n     * provided value.\n     */\n\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      return this === other || other instanceof CollectionReference && _get2(_getPrototypeOf(CollectionReference.prototype), \"isEqual\", this).call(this, other);\n    }\n    /**\n     * Applies a custom data converter to this CollectionReference, allowing you\n     * to use your own custom model objects with Firestore. When you call add() on\n     * the returned CollectionReference instance, the provided converter will\n     * convert between Firestore data and your custom type U.\n     *\n     * Using the converter allows you to specify generic type arguments when\n     * storing and retrieving objects from Firestore.\n     *\n     * Passing in `null` as the converter parameter removes the current\n     * converter.\n     *\n     * @example\n     * class Post {\n     *   constructor(readonly title: string, readonly author: string) {}\n     *\n     *   toString(): string {\n     *     return this.title + ', by ' + this.author;\n     *   }\n     * }\n     *\n     * const postConverter = {\n     *   toFirestore(post: Post): FirebaseFirestore.DocumentData {\n     *     return {title: post.title, author: post.author};\n     *   },\n     *   fromFirestore(\n     *     snapshot: FirebaseFirestore.QueryDocumentSnapshot\n     *   ): Post {\n     *     const data = snapshot.data();\n     *     return new Post(data.title, data.author);\n     *   }\n     * };\n     *\n     * const postSnap = await Firestore()\n     *   .collection('posts')\n     *   .withConverter(postConverter)\n     *   .doc().get();\n     * const post = postSnap.data();\n     * if (post !== undefined) {\n     *   post.title; // string\n     *   post.toString(); // Should be defined\n     *   post.someNonExistentProperty; // TS error\n     * }\n     *\n     * @param {FirestoreDataConverter | null} converter Converts objects to and\n     * from Firestore. Passing in `null` removes the current converter.\n     * @return A CollectionReference<U> that uses the provided converter.\n     */\n\n  }, {\n    key: \"withConverter\",\n    value: function withConverter(converter) {\n      return new CollectionReference(this.firestore, this._resourcePath, converter !== null && converter !== void 0 ? converter : types_1.defaultConverter());\n    }\n  }, {\n    key: \"_resourcePath\",\n    get: function get() {\n      return this._queryOptions.parentPath.append(this._queryOptions.collectionId);\n    }\n    /**\n     * The last path element of the referenced collection.\n     *\n     * @type {string}\n     * @name CollectionReference#id\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * console.log(`ID of the subcollection: ${collectionRef.id}`);\n     */\n\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._queryOptions.collectionId;\n    }\n    /**\n     * A reference to the containing Document if this is a subcollection, else\n     * null.\n     *\n     * @type {DocumentReference|null}\n     * @name CollectionReference#parent\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * let documentRef = collectionRef.parent;\n     * console.log(`Parent name: ${documentRef.path}`);\n     */\n\n  }, {\n    key: \"parent\",\n    get: function get() {\n      if (this._queryOptions.parentPath.isDocument) {\n        return new DocumentReference(this.firestore, this._queryOptions.parentPath);\n      }\n\n      return null;\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     *\n     * @type {string}\n     * @name CollectionReference#path\n     * @readonly\n     *\n     * @example\n     * let collectionRef = firestore.collection('col/doc/subcollection');\n     * console.log(`Path of the subcollection: ${collectionRef.path}`);\n     */\n\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._resourcePath.relativeName;\n    }\n  }]);\n\n  return CollectionReference;\n}(Query);\n\nexports.CollectionReference = CollectionReference;\n/**\n * Validates the input string as a field order direction.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Order direction to validate.\n * @throws when the direction is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\n\nfunction validateQueryOrder(arg, op) {\n  // For backwards compatibility, we support both lower and uppercase values.\n  op = typeof op === 'string' ? op.toLowerCase() : op;\n  validate_1.validateEnumValue(arg, op, Object.keys(directionOperators), {\n    optional: true\n  });\n  return op;\n}\n\nexports.validateQueryOrder = validateQueryOrder;\n/**\n * Validates the input string as a field comparison operator.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param op Field comparison operator to validate.\n * @param fieldValue Value that is used in the filter.\n * @throws when the comparison operation is invalid\n * @return a validated input value, which may be different from the provided\n * value.\n */\n\nfunction validateQueryOperator(arg, op, fieldValue) {\n  // For backwards compatibility, we support both `=` and `==` for \"equals\".\n  if (op === '=') {\n    op = '==';\n  }\n\n  validate_1.validateEnumValue(arg, op, Object.keys(comparisonOperators));\n\n  if (typeof fieldValue === 'number' && isNaN(fieldValue) && op !== '==' && op !== '!=') {\n    throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on NaN.\");\n  }\n\n  if (fieldValue === null && op !== '==' && op !== '!=') {\n    throw new Error(\"Invalid query. You can only perform '==' and '!=' comparisons on Null.\");\n  }\n\n  return op;\n}\n\nexports.validateQueryOperator = validateQueryOperator;\n/**\n * Validates that 'value' is a DocumentReference.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @return the DocumentReference if valid\n */\n\nfunction validateDocumentReference(arg, value) {\n  if (!(value instanceof DocumentReference)) {\n    throw new Error(validate_1.invalidArgumentMessage(arg, 'DocumentReference'));\n  }\n\n  return value;\n}\n\nexports.validateDocumentReference = validateDocumentReference;\n/**\n * Validates that 'value' can be used as a query value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The argument to validate.\n * @param allowUndefined Whether to allow nested properties that are `undefined`.\n */\n\nfunction validateQueryValue(arg, value, allowUndefined) {\n  serializer_1.validateUserInput(arg, value, 'query constraint', {\n    allowDeletes: 'none',\n    allowTransforms: false,\n    allowUndefined: allowUndefined\n  });\n}\n/**\n * Verifies equality for an array of objects using the `isEqual` interface.\n *\n * @private\n * @internal\n * @param left Array of objects supporting `isEqual`.\n * @param right Array of objects supporting `isEqual`.\n * @return True if arrays are equal.\n */\n\n\nfunction isArrayEqual(left, right) {\n  if (left.length !== right.length) {\n    return false;\n  }\n\n  for (var i = 0; i < left.length; ++i) {\n    if (!left[i].isEqual(right[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Returns the first non-undefined value or `undefined` if no such value exists.\n * @private\n * @internal\n */\n\n\nfunction coalesce() {\n  for (var _len6 = arguments.length, values = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n    values[_key6] = arguments[_key6];\n  }\n\n  return values.find(function (value) {\n    return value !== undefined;\n  });\n}","map":null,"metadata":{},"sourceType":"script"}