{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateMessage = exports.BLACKLISTED_OPTIONS_KEYS = exports.BLACKLISTED_DATA_PAYLOAD_KEYS = void 0;\n\nvar index_1 = require(\"../utils/index\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\"); // Keys which are not allowed in the messaging data payload object.\n\n\nexports.BLACKLISTED_DATA_PAYLOAD_KEYS = ['from']; // Keys which are not allowed in the messaging options object.\n\nexports.BLACKLISTED_OPTIONS_KEYS = ['condition', 'data', 'notification', 'registrationIds', 'registration_ids', 'to'];\n/**\n * Checks if the given Message object is valid. Recursively validates all the child objects\n * included in the message (android, apns, data etc.). If successful, transforms the message\n * in place by renaming the keys to what's expected by the remote FCM service.\n *\n * @param {Message} Message An object to be validated.\n */\n\nfunction validateMessage(message) {\n  if (!validator.isNonNullObject(message)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Message must be a non-null object');\n  }\n\n  var anyMessage = message;\n\n  if (anyMessage.topic) {\n    // If the topic name is prefixed, remove it.\n    if (anyMessage.topic.startsWith('/topics/')) {\n      anyMessage.topic = anyMessage.topic.replace(/^\\/topics\\//, '');\n    } // Checks for illegal characters and empty string.\n\n\n    if (!/^[a-zA-Z0-9-_.~%]+$/.test(anyMessage.topic)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Malformed topic name');\n    }\n  }\n\n  var targets = [anyMessage.token, anyMessage.topic, anyMessage.condition];\n\n  if (targets.filter(function (v) {\n    return validator.isNonEmptyString(v);\n  }).length !== 1) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Exactly one of topic, token or condition is required');\n  }\n\n  validateStringMap(message.data, 'data');\n  validateAndroidConfig(message.android);\n  validateWebpushConfig(message.webpush);\n  validateApnsConfig(message.apns);\n  validateFcmOptions(message.fcmOptions);\n  validateNotification(message.notification);\n}\n\nexports.validateMessage = validateMessage;\n/**\n * Checks if the given object only contains strings as child values.\n *\n * @param {object} map An object to be validated.\n * @param {string} label A label to be included in the errors thrown.\n */\n\nfunction validateStringMap(map, label) {\n  if (typeof map === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(map)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, label + \" must be a non-null object\");\n  }\n\n  Object.keys(map).forEach(function (key) {\n    if (!validator.isString(map[key])) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, label + \" must only contain string values\");\n    }\n  });\n}\n/**\n * Checks if the given WebpushConfig object is valid. The object must have valid headers and data.\n *\n * @param {WebpushConfig} config An object to be validated.\n */\n\n\nfunction validateWebpushConfig(config) {\n  if (typeof config === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(config)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'webpush must be a non-null object');\n  }\n\n  validateStringMap(config.headers, 'webpush.headers');\n  validateStringMap(config.data, 'webpush.data');\n}\n/**\n * Checks if the given ApnsConfig object is valid. The object must have valid headers and a\n * payload.\n *\n * @param {ApnsConfig} config An object to be validated.\n */\n\n\nfunction validateApnsConfig(config) {\n  if (typeof config === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(config)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns must be a non-null object');\n  }\n\n  validateStringMap(config.headers, 'apns.headers');\n  validateApnsPayload(config.payload);\n  validateApnsFcmOptions(config.fcmOptions);\n}\n/**\n * Checks if the given ApnsFcmOptions object is valid.\n *\n * @param {ApnsFcmOptions} fcmOptions An object to be validated.\n */\n\n\nfunction validateApnsFcmOptions(fcmOptions) {\n  if (typeof fcmOptions === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(fcmOptions)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n  }\n\n  if (typeof fcmOptions.imageUrl !== 'undefined' && !validator.isURL(fcmOptions.imageUrl)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'imageUrl must be a valid URL string');\n  }\n\n  if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n  }\n\n  var propertyMappings = {\n    imageUrl: 'image'\n  };\n  Object.keys(propertyMappings).forEach(function (key) {\n    if (key in fcmOptions && propertyMappings[key] in fcmOptions) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Multiple specifications for \" + key + \" in ApnsFcmOptions\");\n    }\n  });\n  index_1.renameProperties(fcmOptions, propertyMappings);\n}\n/**\n * Checks if the given FcmOptions object is valid.\n *\n * @param {FcmOptions} fcmOptions An object to be validated.\n */\n\n\nfunction validateFcmOptions(fcmOptions) {\n  if (typeof fcmOptions === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(fcmOptions)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n  }\n\n  if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n  }\n}\n/**\n * Checks if the given Notification object is valid.\n *\n * @param {Notification} notification An object to be validated.\n */\n\n\nfunction validateNotification(notification) {\n  if (typeof notification === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(notification)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification must be a non-null object');\n  }\n\n  if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification.imageUrl must be a valid URL string');\n  }\n\n  var propertyMappings = {\n    imageUrl: 'image'\n  };\n  Object.keys(propertyMappings).forEach(function (key) {\n    if (key in notification && propertyMappings[key] in notification) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Multiple specifications for \" + key + \" in Notification\");\n    }\n  });\n  index_1.renameProperties(notification, propertyMappings);\n}\n/**\n * Checks if the given ApnsPayload object is valid. The object must have a valid aps value.\n *\n * @param {ApnsPayload} payload An object to be validated.\n */\n\n\nfunction validateApnsPayload(payload) {\n  if (typeof payload === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(payload)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload must be a non-null object');\n  }\n\n  validateAps(payload.aps);\n}\n/**\n * Checks if the given Aps object is valid. The object must have a valid alert. If the validation\n * is successful, transforms the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {Aps} aps An object to be validated.\n */\n\n\nfunction validateAps(aps) {\n  if (typeof aps === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(aps)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps must be a non-null object');\n  }\n\n  validateApsAlert(aps.alert);\n  validateApsSound(aps.sound);\n  var propertyMappings = {\n    contentAvailable: 'content-available',\n    mutableContent: 'mutable-content',\n    threadId: 'thread-id'\n  };\n  Object.keys(propertyMappings).forEach(function (key) {\n    if (key in aps && propertyMappings[key] in aps) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, \"Multiple specifications for \" + key + \" in Aps\");\n    }\n  });\n  index_1.renameProperties(aps, propertyMappings);\n  var contentAvailable = aps['content-available'];\n\n  if (typeof contentAvailable !== 'undefined' && contentAvailable !== 1) {\n    if (contentAvailable === true) {\n      aps['content-available'] = 1;\n    } else {\n      delete aps['content-available'];\n    }\n  }\n\n  var mutableContent = aps['mutable-content'];\n\n  if (typeof mutableContent !== 'undefined' && mutableContent !== 1) {\n    if (mutableContent === true) {\n      aps['mutable-content'] = 1;\n    } else {\n      delete aps['mutable-content'];\n    }\n  }\n}\n\nfunction validateApsSound(sound) {\n  if (typeof sound === 'undefined' || validator.isNonEmptyString(sound)) {\n    return;\n  } else if (!validator.isNonNullObject(sound)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound must be a non-empty string or a non-null object');\n  }\n\n  if (!validator.isNonEmptyString(sound.name)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.name must be a non-empty string');\n  }\n\n  var volume = sound.volume;\n\n  if (typeof volume !== 'undefined') {\n    if (!validator.isNumber(volume)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be a number');\n    }\n\n    if (volume < 0 || volume > 1) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be in the interval [0, 1]');\n    }\n  }\n\n  var soundObject = sound;\n  var key = 'critical';\n  var critical = soundObject[key];\n\n  if (typeof critical !== 'undefined' && critical !== 1) {\n    if (critical === true) {\n      soundObject[key] = 1;\n    } else {\n      delete soundObject[key];\n    }\n  }\n}\n/**\n * Checks if the given alert object is valid. Alert could be a string or a complex object.\n * If specified as an object, it must have valid localization parameters. If successful, transforms\n * the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {string | ApsAlert} alert An alert string or an object to be validated.\n */\n\n\nfunction validateApsAlert(alert) {\n  if (typeof alert === 'undefined' || validator.isString(alert)) {\n    return;\n  } else if (!validator.isNonNullObject(alert)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert must be a string or a non-null object');\n  }\n\n  var apsAlert = alert;\n\n  if (validator.isNonEmptyArray(apsAlert.locArgs) && !validator.isNonEmptyString(apsAlert.locKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.locKey is required when specifying locArgs');\n  }\n\n  if (validator.isNonEmptyArray(apsAlert.titleLocArgs) && !validator.isNonEmptyString(apsAlert.titleLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.titleLocKey is required when specifying titleLocArgs');\n  }\n\n  if (validator.isNonEmptyArray(apsAlert.subtitleLocArgs) && !validator.isNonEmptyString(apsAlert.subtitleLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.subtitleLocKey is required when specifying subtitleLocArgs');\n  }\n\n  var propertyMappings = {\n    locKey: 'loc-key',\n    locArgs: 'loc-args',\n    titleLocKey: 'title-loc-key',\n    titleLocArgs: 'title-loc-args',\n    subtitleLocKey: 'subtitle-loc-key',\n    subtitleLocArgs: 'subtitle-loc-args',\n    actionLocKey: 'action-loc-key',\n    launchImage: 'launch-image'\n  };\n  index_1.renameProperties(apsAlert, propertyMappings);\n}\n/**\n * Checks if the given AndroidConfig object is valid. The object must have valid ttl, data,\n * and notification fields. If successful, transforms the input object by renaming keys to valid\n * Android keys. Also transforms the ttl value to the format expected by FCM service.\n *\n * @param {AndroidConfig} config An object to be validated.\n */\n\n\nfunction validateAndroidConfig(config) {\n  if (typeof config === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(config)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android must be a non-null object');\n  }\n\n  if (typeof config.ttl !== 'undefined') {\n    if (!validator.isNumber(config.ttl) || config.ttl < 0) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'TTL must be a non-negative duration in milliseconds');\n    }\n\n    var duration = index_1.transformMillisecondsToSecondsString(config.ttl);\n    config.ttl = duration;\n  }\n\n  validateStringMap(config.data, 'android.data');\n  validateAndroidNotification(config.notification);\n  validateAndroidFcmOptions(config.fcmOptions);\n  var propertyMappings = {\n    collapseKey: 'collapse_key',\n    restrictedPackageName: 'restricted_package_name'\n  };\n  index_1.renameProperties(config, propertyMappings);\n}\n/**\n * Checks if the given AndroidNotification object is valid. The object must have valid color and\n * localization parameters. If successful, transforms the input object by renaming keys to valid\n * Android keys.\n *\n * @param {AndroidNotification} notification An object to be validated.\n */\n\n\nfunction validateAndroidNotification(notification) {\n  if (typeof notification === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(notification)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification must be a non-null object');\n  }\n\n  if (typeof notification.color !== 'undefined' && !/^#[0-9a-fA-F]{6}$/.test(notification.color)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.color must be in the form #RRGGBB');\n  }\n\n  if (validator.isNonEmptyArray(notification.bodyLocArgs) && !validator.isNonEmptyString(notification.bodyLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.bodyLocKey is required when specifying bodyLocArgs');\n  }\n\n  if (validator.isNonEmptyArray(notification.titleLocArgs) && !validator.isNonEmptyString(notification.titleLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.titleLocKey is required when specifying titleLocArgs');\n  }\n\n  if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.imageUrl must be a valid URL string');\n  }\n\n  if (typeof notification.eventTimestamp !== 'undefined') {\n    if (!(notification.eventTimestamp instanceof Date)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.eventTimestamp must be a valid `Date` object');\n    } // Convert timestamp to RFC3339 UTC \"Zulu\" format, example \"2014-10-02T15:01:23.045123456Z\"\n\n\n    var zuluTimestamp = notification.eventTimestamp.toISOString();\n    notification.eventTimestamp = zuluTimestamp;\n  }\n\n  if (typeof notification.vibrateTimingsMillis !== 'undefined') {\n    if (!validator.isNonEmptyArray(notification.vibrateTimingsMillis)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be a non-empty array of numbers');\n    }\n\n    var vibrateTimings_1 = [];\n    notification.vibrateTimingsMillis.forEach(function (value) {\n      if (!validator.isNumber(value) || value < 0) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be non-negative durations in milliseconds');\n      }\n\n      var duration = index_1.transformMillisecondsToSecondsString(value);\n      vibrateTimings_1.push(duration);\n    });\n    notification.vibrateTimingsMillis = vibrateTimings_1;\n  }\n\n  if (typeof notification.priority !== 'undefined') {\n    var priority = 'PRIORITY_' + notification.priority.toUpperCase();\n    notification.priority = priority;\n  }\n\n  if (typeof notification.visibility !== 'undefined') {\n    var visibility = notification.visibility.toUpperCase();\n    notification.visibility = visibility;\n  }\n\n  validateLightSettings(notification.lightSettings);\n  var propertyMappings = {\n    clickAction: 'click_action',\n    bodyLocKey: 'body_loc_key',\n    bodyLocArgs: 'body_loc_args',\n    titleLocKey: 'title_loc_key',\n    titleLocArgs: 'title_loc_args',\n    channelId: 'channel_id',\n    imageUrl: 'image',\n    eventTimestamp: 'event_time',\n    localOnly: 'local_only',\n    priority: 'notification_priority',\n    vibrateTimingsMillis: 'vibrate_timings',\n    defaultVibrateTimings: 'default_vibrate_timings',\n    defaultSound: 'default_sound',\n    lightSettings: 'light_settings',\n    defaultLightSettings: 'default_light_settings',\n    notificationCount: 'notification_count'\n  };\n  index_1.renameProperties(notification, propertyMappings);\n}\n/**\n * Checks if the given LightSettings object is valid. The object must have valid color and\n * light on/off duration parameters. If successful, transforms the input object by renaming\n * keys to valid Android keys.\n *\n * @param {LightSettings} lightSettings An object to be validated.\n */\n\n\nfunction validateLightSettings(lightSettings) {\n  if (typeof lightSettings === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(lightSettings)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings must be a non-null object');\n  }\n\n  if (!validator.isNumber(lightSettings.lightOnDurationMillis) || lightSettings.lightOnDurationMillis < 0) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOnDurationMillis must be a non-negative duration in milliseconds');\n  }\n\n  var durationOn = index_1.transformMillisecondsToSecondsString(lightSettings.lightOnDurationMillis);\n  lightSettings.lightOnDurationMillis = durationOn;\n\n  if (!validator.isNumber(lightSettings.lightOffDurationMillis) || lightSettings.lightOffDurationMillis < 0) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOffDurationMillis must be a non-negative duration in milliseconds');\n  }\n\n  var durationOff = index_1.transformMillisecondsToSecondsString(lightSettings.lightOffDurationMillis);\n  lightSettings.lightOffDurationMillis = durationOff;\n\n  if (!validator.isString(lightSettings.color) || !/^#[0-9a-fA-F]{6}$/.test(lightSettings.color) && !/^#[0-9a-fA-F]{8}$/.test(lightSettings.color)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.color must be in the form #RRGGBB or #RRGGBBAA format');\n  }\n\n  var colorString = lightSettings.color.length === 7 ? lightSettings.color + 'FF' : lightSettings.color;\n  var rgb = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/i.exec(colorString);\n\n  if (!rgb || rgb.length < 4) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INTERNAL_ERROR, 'regex to extract rgba values from ' + colorString + ' failed.');\n  }\n\n  var color = {\n    red: parseInt(rgb[1], 16) / 255.0,\n    green: parseInt(rgb[2], 16) / 255.0,\n    blue: parseInt(rgb[3], 16) / 255.0,\n    alpha: parseInt(rgb[4], 16) / 255.0\n  };\n  lightSettings.color = color;\n  var propertyMappings = {\n    lightOnDurationMillis: 'light_on_duration',\n    lightOffDurationMillis: 'light_off_duration'\n  };\n  index_1.renameProperties(lightSettings, propertyMappings);\n}\n/**\n * Checks if the given AndroidFcmOptions object is valid.\n *\n * @param {AndroidFcmOptions} fcmOptions An object to be validated.\n */\n\n\nfunction validateAndroidFcmOptions(fcmOptions) {\n  if (typeof fcmOptions === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(fcmOptions)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n  }\n\n  if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}