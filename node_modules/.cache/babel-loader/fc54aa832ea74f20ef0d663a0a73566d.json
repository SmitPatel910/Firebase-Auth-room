{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppCheck = void 0;\n\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\n\nvar token_generator_1 = require(\"./token-generator\");\n\nvar token_verifier_1 = require(\"./token-verifier\");\n\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\n/**\n * AppCheck service bound to the provided app.\n */\n\n\nvar AppCheck =\n/** @class */\nfunction () {\n  /**\n   * @param app The app for this AppCheck service.\n   * @constructor\n   */\n  function AppCheck(app) {\n    this.app = app;\n    this.client = new app_check_api_client_internal_1.AppCheckApiClient(app);\n\n    try {\n      this.tokenGenerator = new token_generator_1.AppCheckTokenGenerator(crypto_signer_1.cryptoSignerFromApp(app));\n    } catch (err) {\n      throw token_generator_1.appCheckErrorFromCryptoSignerError(err);\n    }\n\n    this.appCheckTokenVerifier = new token_verifier_1.AppCheckTokenVerifier(app);\n  }\n  /**\n   * Creates a new {@link appCheck.AppCheckToken `AppCheckToken`} that can be sent\n   * back to a client.\n   *\n   * @param appId The app ID to use as the JWT app_id.\n   * @param options Optional options object when creating a new App Check Token.\n   *\n   * @returns A promise that fulfills with a `AppCheckToken`.\n   */\n\n\n  AppCheck.prototype.createToken = function (appId, options) {\n    var _this = this;\n\n    return this.tokenGenerator.createCustomToken(appId, options).then(function (customToken) {\n      return _this.client.exchangeToken(customToken, appId);\n    });\n  };\n  /**\n   * Verifies an App Check token.\n   *\n   * @param appCheckToken The App Check token to verify.\n   *\n   * @return A promise that fulfills with a `VerifyAppCheckTokenResponse` on successful\n   *     verification.\n   */\n\n\n  AppCheck.prototype.verifyToken = function (appCheckToken) {\n    return this.appCheckTokenVerifier.verifyToken(appCheckToken).then(function (decodedToken) {\n      return {\n        appId: decodedToken.app_id,\n        token: decodedToken\n      };\n    });\n  };\n\n  return AppCheck;\n}();\n\nexports.AppCheck = AppCheck;","map":null,"metadata":{},"sourceType":"script"}