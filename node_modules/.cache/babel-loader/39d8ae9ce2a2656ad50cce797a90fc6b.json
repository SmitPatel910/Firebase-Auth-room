{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar url_1 = require(\"url\");\n\nvar util_1 = require(\"./util\");\n\nvar timestamp_1 = require(\"./timestamp\");\n/**\n * Generates an error message to use with custom objects that cannot be\n * serialized.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The value that failed serialization.\n * @param path The field path that the object is assigned to.\n */\n\n\nfunction customObjectMessage(arg, value, path) {\n  var fieldPathMessage = path ? \" (found in field \\\"\".concat(path, \"\\\")\") : '';\n\n  if (util_1.isObject(value)) {\n    // We use the base class name as the type name as the sentinel classes\n    // returned by the public FieldValue API are subclasses of FieldValue. By\n    // using the base name, we reduce the number of special cases below.\n    var typeName = value.constructor.name;\n\n    switch (typeName) {\n      case 'DocumentReference':\n      case 'FieldPath':\n      case 'FieldValue':\n      case 'GeoPoint':\n      case 'Timestamp':\n        return \"\".concat(invalidArgumentMessage(arg, 'Firestore document'), \" Detected an object of type \\\"\").concat(typeName, \"\\\" that doesn't match the \") + \"expected instance\".concat(fieldPathMessage, \". Please ensure that the \") + 'Firestore types you are using are from the same NPM package.)';\n\n      case 'Object':\n        return \"\".concat(invalidArgumentMessage(arg, 'Firestore document'), \" Invalid use of type \\\"\").concat(typeof value, \"\\\" as a Firestore argument\").concat(fieldPathMessage, \".\");\n\n      default:\n        return \"\".concat(invalidArgumentMessage(arg, 'Firestore document'), \" Couldn't serialize object of type \\\"\").concat(typeName, \"\\\"\").concat(fieldPathMessage, \". Firestore doesn't support JavaScript \") + 'objects with custom prototypes (i.e. objects that were created ' + 'via the \"new\" operator).';\n    }\n  } else {\n    return \"\".concat(invalidArgumentMessage(arg, 'Firestore document'), \" Input is not a plain JavaScript object\").concat(fieldPathMessage, \".\");\n  }\n}\n\nexports.customObjectMessage = customObjectMessage;\n/**\n * Validates that 'value' is a function.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the function can be omitted.\n */\n\nfunction validateFunction(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (!util_1.isFunction(value)) {\n      throw new Error(invalidArgumentMessage(arg, 'function'));\n    }\n  }\n}\n\nexports.validateFunction = validateFunction;\n/**\n * Validates that 'value' is an object.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the object can be omitted.\n */\n\nfunction validateObject(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (!util_1.isObject(value)) {\n      throw new Error(invalidArgumentMessage(arg, 'object'));\n    }\n  }\n}\n\nexports.validateObject = validateObject;\n/**\n * Validates that 'value' is a string.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the string can be omitted.\n */\n\nfunction validateString(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (typeof value !== 'string') {\n      throw new Error(invalidArgumentMessage(arg, 'string'));\n    }\n  }\n}\n\nexports.validateString = validateString;\n/**\n * Validates that 'value' is a host.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the host can be omitted.\n */\n\nfunction validateHost(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    validateString(arg, value);\n    var urlString = \"http://\".concat(value, \"/\");\n    var parsed;\n\n    try {\n      parsed = new url_1.URL(urlString);\n    } catch (e) {\n      throw new Error(invalidArgumentMessage(arg, 'host'));\n    }\n\n    if (parsed.search !== '' || parsed.pathname !== '/' || parsed.username !== '') {\n      throw new Error(invalidArgumentMessage(arg, 'host'));\n    }\n  }\n}\n\nexports.validateHost = validateHost;\n/**\n * Validates that 'value' is a boolean.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the boolean can be omitted.\n */\n\nfunction validateBoolean(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (typeof value !== 'boolean') {\n      throw new Error(invalidArgumentMessage(arg, 'boolean'));\n    }\n  }\n}\n\nexports.validateBoolean = validateBoolean;\n/**\n * Validates that 'value' is a number.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the number can be omitted.\n */\n\nfunction validateNumber(arg, value, options) {\n  var min = options !== undefined && options.minValue !== undefined ? options.minValue : -Infinity;\n  var max = options !== undefined && options.maxValue !== undefined ? options.maxValue : Infinity;\n\n  if (!validateOptional(value, options)) {\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new Error(invalidArgumentMessage(arg, 'number'));\n    } else if (value < min || value > max) {\n      throw new Error(\"\".concat(formatArgumentName(arg), \" must be within [\").concat(min, \", \").concat(max, \"] inclusive, but was: \").concat(value));\n    }\n  }\n}\n\nexports.validateNumber = validateNumber;\n/**\n * Validates that 'value' is a integer.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the integer can be omitted.\n */\n\nfunction validateInteger(arg, value, options) {\n  var min = options !== undefined && options.minValue !== undefined ? options.minValue : -Infinity;\n  var max = options !== undefined && options.maxValue !== undefined ? options.maxValue : Infinity;\n\n  if (!validateOptional(value, options)) {\n    if (typeof value !== 'number' || isNaN(value) || value % 1 !== 0) {\n      throw new Error(invalidArgumentMessage(arg, 'integer'));\n    } else if (value < min || value > max) {\n      throw new Error(\"\".concat(formatArgumentName(arg), \" must be within [\").concat(min, \", \").concat(max, \"] inclusive, but was: \").concat(value));\n    }\n  }\n}\n\nexports.validateInteger = validateInteger;\n/**\n * Validates that 'value' is a Timestamp.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the Timestamp can be omitted.\n */\n\nfunction validateTimestamp(arg, value, options) {\n  if (!validateOptional(value, options)) {\n    if (!(value instanceof timestamp_1.Timestamp)) {\n      throw new Error(invalidArgumentMessage(arg, 'Timestamp'));\n    }\n  }\n}\n\nexports.validateTimestamp = validateTimestamp;\n/**\n * Generates an error message to use with invalid arguments.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param expectedType The expected input type.\n */\n\nfunction invalidArgumentMessage(arg, expectedType) {\n  return \"\".concat(formatArgumentName(arg), \" is not a valid \").concat(expectedType, \".\");\n}\n\nexports.invalidArgumentMessage = invalidArgumentMessage;\n/**\n * Enforces the 'options.optional' constraint for 'value'.\n *\n * @private\n * @internal\n * @param value The input to validate.\n * @param options Whether the function can be omitted.\n * @return Whether the object is omitted and is allowed to be omitted.\n */\n\nfunction validateOptional(value, options) {\n  return value === undefined && options !== undefined && options.optional === true;\n}\n\nexports.validateOptional = validateOptional;\n/**\n * Formats the given word as plural conditionally given the preceding number.\n *\n * @private\n * @internal\n * @param num The number to use for formatting.\n * @param str The string to format.\n */\n\nfunction formatPlural(num, str) {\n  return \"\".concat(num, \" \").concat(str) + (num === 1 ? '' : 's');\n}\n/**\n * Creates a descriptive name for the provided argument name or index.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @return Either the argument name or its index description.\n */\n\n\nfunction formatArgumentName(arg) {\n  return typeof arg === 'string' ? \"Value for argument \\\"\".concat(arg, \"\\\"\") : \"Element at index \".concat(arg);\n}\n/**\n * Verifies that 'args' has at least 'minSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param minSize The minimum number of elements to enforce.\n * @throws if the expectation is not met.\n */\n\n\nfunction validateMinNumberOfArguments(funcName, args, minSize) {\n  if (args.length < minSize) {\n    throw new Error(\"Function \\\"\".concat(funcName, \"()\\\" requires at least \") + \"\".concat(formatPlural(minSize, 'argument'), \".\"));\n  }\n}\n\nexports.validateMinNumberOfArguments = validateMinNumberOfArguments;\n/**\n * Verifies that 'args' has at most 'maxSize' elements.\n *\n * @private\n * @internal\n * @param funcName The function name to use in the error message.\n * @param args The array (or array-like structure) to verify.\n * @param maxSize The maximum number of elements to enforce.\n * @throws if the expectation is not met.\n */\n\nfunction validateMaxNumberOfArguments(funcName, args, maxSize) {\n  if (args.length > maxSize) {\n    throw new Error(\"Function \\\"\".concat(funcName, \"()\\\" accepts at most \") + \"\".concat(formatPlural(maxSize, 'argument'), \".\"));\n  }\n}\n\nexports.validateMaxNumberOfArguments = validateMaxNumberOfArguments;\n/**\n * Validates that the provided named option equals one of the expected values.\n *\n * @param arg The argument name or argument index (for varargs methods).).\n * @param value The input to validate.\n * @param allowedValues A list of expected values.\n * @param options Whether the input can be omitted.\n * @private\n * @internal\n */\n\nfunction validateEnumValue(arg, value, allowedValues, options) {\n  if (!validateOptional(value, options)) {\n    var expectedDescription = [];\n\n    var _iterator = _createForOfIteratorHelper(allowedValues),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var allowed = _step.value;\n\n        if (allowed === value) {\n          return;\n        }\n\n        expectedDescription.push(allowed);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    throw new Error(\"\".concat(formatArgumentName(arg), \" is invalid. Acceptable values are: \").concat(expectedDescription.join(', ')));\n  }\n}\n\nexports.validateEnumValue = validateEnumValue;","map":null,"metadata":{},"sourceType":"script"}