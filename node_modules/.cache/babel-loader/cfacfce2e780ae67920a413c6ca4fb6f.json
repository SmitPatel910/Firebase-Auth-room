{"ast":null,"code":"var _defineProperty = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _require = require('crypto'),\n    createCipheriv = _require.createCipheriv,\n    createDecipheriv = _require.createDecipheriv,\n    getCiphers = _require.getCiphers;\n\nvar uint64be = require('../help/uint64be');\n\nvar timingSafeEqual = require('../help/timing_safe_equal');\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar _require3 = require('../errors'),\n    JWEInvalid = _require3.JWEInvalid,\n    JWEDecryptionFailed = _require3.JWEDecryptionFailed;\n\nvar checkInput = function checkInput(size, iv, tag) {\n  if (iv.length !== 16) {\n    throw new JWEInvalid('invalid iv');\n  }\n\n  if (arguments.length === 3) {\n    if (tag.length !== size / 8) {\n      throw new JWEInvalid('invalid tag');\n    }\n  }\n};\n\nvar encrypt = function encrypt(size, sign, _ref, cleartext, _ref2) {\n  var keyObject = _ref[KEYOBJECT];\n  var iv = _ref2.iv,\n      _ref2$aad = _ref2.aad,\n      aad = _ref2$aad === void 0 ? Buffer.alloc(0) : _ref2$aad;\n  var key = keyObject.export();\n  checkInput(size, iv);\n  var keySize = size / 8;\n  var encKey = key.slice(keySize);\n  var cipher = createCipheriv(\"aes-\".concat(size, \"-cbc\"), encKey, iv);\n  var ciphertext = Buffer.concat([cipher.update(cleartext), cipher.final()]);\n  var macData = Buffer.concat([aad, iv, ciphertext, uint64be(aad.length * 8)]);\n  var macKey = key.slice(0, keySize);\n  var tag = sign(_defineProperty({}, KEYOBJECT, macKey), macData).slice(0, keySize);\n  return {\n    ciphertext: ciphertext,\n    tag: tag\n  };\n};\n\nvar decrypt = function decrypt(size, sign, _ref3, ciphertext, _ref4) {\n  var keyObject = _ref3[KEYOBJECT];\n  var iv = _ref4.iv,\n      _ref4$tag = _ref4.tag,\n      tag = _ref4$tag === void 0 ? Buffer.alloc(0) : _ref4$tag,\n      _ref4$aad = _ref4.aad,\n      aad = _ref4$aad === void 0 ? Buffer.alloc(0) : _ref4$aad;\n  checkInput(size, iv, tag);\n  var keySize = size / 8;\n  var key = keyObject.export();\n  var encKey = key.slice(keySize);\n  var macKey = key.slice(0, keySize);\n  var macData = Buffer.concat([aad, iv, ciphertext, uint64be(aad.length * 8)]);\n  var expectedTag = sign(_defineProperty({}, KEYOBJECT, macKey), macData, tag).slice(0, keySize);\n  var macCheckPassed = timingSafeEqual(tag, expectedTag);\n\n  if (!macCheckPassed) {\n    throw new JWEDecryptionFailed();\n  }\n\n  var cleartext;\n\n  try {\n    var cipher = createDecipheriv(\"aes-\".concat(size, \"-cbc\"), encKey, iv);\n    cleartext = Buffer.concat([cipher.update(ciphertext), cipher.final()]);\n  } catch (err) {}\n\n  if (!cleartext) {\n    throw new JWEDecryptionFailed();\n  }\n\n  return cleartext;\n};\n\nmodule.exports = function (JWA, JWK) {\n  ['A128CBC-HS256', 'A192CBC-HS384', 'A256CBC-HS512'].forEach(function (jwaAlg) {\n    var size = parseInt(jwaAlg.substr(1, 3), 10);\n    var sign = JWA.sign.get(\"HS\".concat(size * 2));\n\n    if (getCiphers().includes(\"aes-\".concat(size, \"-cbc\"))) {\n      JWA.encrypt.set(jwaAlg, encrypt.bind(undefined, size, sign));\n      JWA.decrypt.set(jwaAlg, decrypt.bind(undefined, size, sign));\n\n      JWK.oct.encrypt[jwaAlg] = JWK.oct.decrypt[jwaAlg] = function (key) {\n        return (key.use === 'enc' || key.use === undefined) && key.length / 2 === size;\n      };\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}