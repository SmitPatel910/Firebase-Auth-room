{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar assert = require(\"assert\");\n\nvar logger_1 = require(\"./logger\");\n/**\n * A helper that uses the Token Bucket algorithm to rate limit the number of\n * operations that can be made in a second.\n *\n * Before a given request containing a number of operations can proceed,\n * RateLimiter determines doing so stays under the provided rate limits. It can\n * also determine how much time is required before a request can be made.\n *\n * RateLimiter can also implement a gradually increasing rate limit. This is\n * used to enforce the 500/50/5 rule\n * (https://firebase.google.com/docs/firestore/best-practices#ramping_up_traffic).\n *\n * @private\n * @internal\n */\n\n\nvar RateLimiter = /*#__PURE__*/function () {\n  /**\n   * @param initialCapacity Initial maximum number of operations per second.\n   * @param multiplier Rate by which to increase the capacity.\n   * @param multiplierMillis How often the capacity should increase in\n   * milliseconds.\n   * @param maximumCapacity Maximum number of allowed operations per second.\n   * The number of tokens added per second will never exceed this number.\n   * @param startTimeMillis The starting time in epoch milliseconds that the\n   * rate limit is based on. Used for testing the limiter.\n   */\n  function RateLimiter(initialCapacity, multiplier, multiplierMillis, maximumCapacity) {\n    var startTimeMillis = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Date.now();\n\n    _classCallCheck(this, RateLimiter);\n\n    this.initialCapacity = initialCapacity;\n    this.multiplier = multiplier;\n    this.multiplierMillis = multiplierMillis;\n    this.maximumCapacity = maximumCapacity;\n    this.startTimeMillis = startTimeMillis;\n    this.availableTokens = initialCapacity;\n    this.lastRefillTimeMillis = startTimeMillis;\n    this.previousCapacity = initialCapacity;\n  }\n  /**\n   * Tries to make the number of operations. Returns true if the request\n   * succeeded and false otherwise.\n   *\n   * @param requestTimeMillis The time used to calculate the number of available\n   * tokens. Used for testing the limiter.\n   * @private\n   * @internal\n   */\n\n\n  _createClass(RateLimiter, [{\n    key: \"tryMakeRequest\",\n    value: function tryMakeRequest(numOperations) {\n      var requestTimeMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n      this.refillTokens(requestTimeMillis);\n\n      if (numOperations <= this.availableTokens) {\n        this.availableTokens -= numOperations;\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns the number of ms needed to make a request with the provided number\n     * of operations. Returns 0 if the request can be made with the existing\n     * capacity. Returns -1 if the request is not possible with the current\n     * capacity.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"getNextRequestDelayMs\",\n    value: function getNextRequestDelayMs(numOperations) {\n      var requestTimeMillis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Date.now();\n      this.refillTokens(requestTimeMillis);\n\n      if (numOperations < this.availableTokens) {\n        return 0;\n      }\n\n      var capacity = this.calculateCapacity(requestTimeMillis);\n\n      if (capacity < numOperations) {\n        return -1;\n      }\n\n      var requiredTokens = numOperations - this.availableTokens;\n      return Math.ceil(requiredTokens * 1000 / capacity);\n    }\n    /**\n     * Refills the number of available tokens based on how much time has elapsed\n     * since the last time the tokens were refilled.\n     *\n     * @param requestTimeMillis The time used to calculate the number of available\n     * tokens. Used for testing the limiter.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"refillTokens\",\n    value: function refillTokens(requestTimeMillis) {\n      if (requestTimeMillis >= this.lastRefillTimeMillis) {\n        var elapsedTime = requestTimeMillis - this.lastRefillTimeMillis;\n        var capacity = this.calculateCapacity(requestTimeMillis);\n        var tokensToAdd = Math.floor(elapsedTime * capacity / 1000);\n\n        if (tokensToAdd > 0) {\n          this.availableTokens = Math.min(capacity, this.availableTokens + tokensToAdd);\n          this.lastRefillTimeMillis = requestTimeMillis;\n        }\n      } else {\n        throw new Error('Request time should not be before the last token refill time.');\n      }\n    }\n    /**\n     * Calculates the maximum capacity based on the provided date.\n     *\n     * @private\n     * @internal\n     */\n    // Visible for testing.\n\n  }, {\n    key: \"calculateCapacity\",\n    value: function calculateCapacity(requestTimeMillis) {\n      assert(requestTimeMillis >= this.startTimeMillis, 'startTime cannot be after currentTime');\n      var millisElapsed = requestTimeMillis - this.startTimeMillis;\n      var operationsPerSecond = Math.min(Math.floor(Math.pow(this.multiplier, Math.floor(millisElapsed / this.multiplierMillis)) * this.initialCapacity), this.maximumCapacity);\n\n      if (operationsPerSecond !== this.previousCapacity) {\n        logger_1.logger('RateLimiter.calculateCapacity', null, \"New request capacity: \".concat(operationsPerSecond, \" operations per second.\"));\n      }\n\n      this.previousCapacity = operationsPerSecond;\n      return operationsPerSecond;\n    }\n  }]);\n\n  return RateLimiter;\n}();\n\nexports.RateLimiter = RateLimiter;","map":null,"metadata":{},"sourceType":"script"}