{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResourceStream = exports.paginator = exports.Paginator = void 0;\n/*!\n * @module common/paginator\n */\n\nvar arrify = require(\"arrify\");\n\nvar extend = require(\"extend\");\n\nvar resource_stream_1 = require(\"./resource-stream\");\n\nObject.defineProperty(exports, \"ResourceStream\", {\n  enumerable: true,\n  get: function get() {\n    return resource_stream_1.ResourceStream;\n  }\n});\n/*! Developer Documentation\n *\n * paginator is used to auto-paginate `nextQuery` methods as well as\n * streamifying them.\n *\n * Before:\n *\n *   search.query('done=true', function(err, results, nextQuery) {\n *     search.query(nextQuery, function(err, results, nextQuery) {});\n *   });\n *\n * After:\n *\n *   search.query('done=true', function(err, results) {});\n *\n * Methods to extend should be written to accept callbacks and return a\n * `nextQuery`.\n */\n\nvar Paginator = /*#__PURE__*/function () {\n  function Paginator() {\n    _classCallCheck(this, Paginator);\n  }\n\n  _createClass(Paginator, [{\n    key: \"extend\",\n\n    /**\n     * Cache the original method, then overwrite it on the Class's prototype.\n     *\n     * @param {function} Class - The parent class of the methods to extend.\n     * @param {string|string[]} methodNames - Name(s) of the methods to extend.\n     */\n    // tslint:disable-next-line:variable-name\n    value: function extend(Class, methodNames) {\n      methodNames = arrify(methodNames);\n      methodNames.forEach(function (methodName) {\n        var originalMethod = Class.prototype[methodName]; // map the original method to a private member\n\n        Class.prototype[methodName + '_'] = originalMethod; // overwrite the original to auto-paginate\n\n        /* eslint-disable  @typescript-eslint/no-explicit-any */\n\n        Class.prototype[methodName] = function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          var parsedArguments = paginator.parseArguments_(args);\n          return paginator.run_(parsedArguments, originalMethod.bind(this));\n        };\n      });\n    }\n    /**\n     * Wraps paginated API calls in a readable object stream.\n     *\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {string} methodName - Name of the method to streamify.\n     * @return {function} - Wrapped function.\n     */\n\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n\n  }, {\n    key: \"streamify\",\n    value: function streamify(methodName) {\n      return function () {\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        var parsedArguments = paginator.parseArguments_(args);\n        var originalMethod = this[methodName + '_'] || this[methodName];\n        return paginator.runAsStream_(parsedArguments, originalMethod.bind(this));\n      };\n    }\n    /**\n     * Parse a pseudo-array `arguments` for a query and callback.\n     *\n     * @param {array} args - The original `arguments` pseduo-array that the original\n     *     method received.\n     */\n\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n\n  }, {\n    key: \"parseArguments_\",\n    value: function parseArguments_(args) {\n      var query;\n      var autoPaginate = true;\n      var maxApiCalls = -1;\n      var maxResults = -1;\n      var callback;\n      var firstArgument = args[0];\n      var lastArgument = args[args.length - 1];\n\n      if (typeof firstArgument === 'function') {\n        callback = firstArgument;\n      } else {\n        query = firstArgument;\n      }\n\n      if (typeof lastArgument === 'function') {\n        callback = lastArgument;\n      }\n\n      if (typeof query === 'object') {\n        query = extend(true, {}, query); // Check if the user only asked for a certain amount of results.\n\n        if (query.maxResults && typeof query.maxResults === 'number') {\n          // `maxResults` is used API-wide.\n          maxResults = query.maxResults;\n        } else if (typeof query.pageSize === 'number') {\n          // `pageSize` is Pub/Sub's `maxResults`.\n          maxResults = query.pageSize;\n        }\n\n        if (query.maxApiCalls && typeof query.maxApiCalls === 'number') {\n          maxApiCalls = query.maxApiCalls;\n          delete query.maxApiCalls;\n        } // maxResults is the user specified limit.\n\n\n        if (maxResults !== -1 || query.autoPaginate === false) {\n          autoPaginate = false;\n        }\n      }\n\n      var parsedArguments = {\n        query: query || {},\n        autoPaginate: autoPaginate,\n        maxApiCalls: maxApiCalls,\n        maxResults: maxResults,\n        callback: callback\n      };\n      parsedArguments.streamOptions = extend(true, {}, parsedArguments.query);\n      delete parsedArguments.streamOptions.autoPaginate;\n      delete parsedArguments.streamOptions.maxResults;\n      delete parsedArguments.streamOptions.pageSize;\n      return parsedArguments;\n    }\n    /**\n     * This simply checks to see if `autoPaginate` is set or not, if it's true\n     * then we buffer all results, otherwise simply call the original method.\n     *\n     * @param {array} parsedArguments - Parsed arguments from the original method\n     *     call.\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     */\n\n  }, {\n    key: \"run_\",\n    value: function run_(parsedArguments, originalMethod) {\n      var query = parsedArguments.query;\n      var callback = parsedArguments.callback;\n\n      if (!parsedArguments.autoPaginate) {\n        return originalMethod(query, callback);\n      }\n\n      var results = new Array();\n      var promise = new Promise(function (resolve, reject) {\n        paginator.runAsStream_(parsedArguments, originalMethod).on('error', reject).on('data', function (data) {\n          return results.push(data);\n        }).on('end', function () {\n          return resolve(results);\n        });\n      });\n\n      if (!callback) {\n        return promise.then(function (results) {\n          return [results];\n        });\n      }\n\n      promise.then(function (results) {\n        return callback(null, results);\n      }, function (err) {\n        return callback(err);\n      });\n    }\n    /**\n     * This method simply calls the nextQuery recursively, emitting results to a\n     * stream. The stream ends when `nextQuery` is null.\n     *\n     * `maxResults` will act as a cap for how many results are fetched and emitted\n     * to the stream.\n     *\n     * @param {object=|string=} parsedArguments.query - Query object. This is most\n     *     commonly an object, but to make the API more simple, it can also be a\n     *     string in some places.\n     * @param {function=} parsedArguments.callback - Callback function.\n     * @param {boolean} parsedArguments.autoPaginate - Auto-pagination enabled.\n     * @param {boolean} parsedArguments.maxApiCalls - Maximum API calls to make.\n     * @param {number} parsedArguments.maxResults - Maximum results to return.\n     * @param {function} originalMethod - The cached method that accepts a callback\n     *     and returns `nextQuery` to receive more results.\n     * @return {stream} - Readable object stream.\n     */\n\n    /* eslint-disable  @typescript-eslint/no-explicit-any */\n\n  }, {\n    key: \"runAsStream_\",\n    value: function runAsStream_(parsedArguments, originalMethod) {\n      return new resource_stream_1.ResourceStream(parsedArguments, originalMethod);\n    }\n  }]);\n\n  return Paginator;\n}();\n\nexports.Paginator = Paginator;\nvar paginator = new Paginator();\nexports.paginator = paginator;","map":null,"metadata":{},"sourceType":"script"}