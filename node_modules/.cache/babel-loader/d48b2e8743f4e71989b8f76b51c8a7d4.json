{"ast":null,"code":"var _require = require('crypto'),\n    createCipheriv = _require.createCipheriv,\n    createDecipheriv = _require.createDecipheriv,\n    getCiphers = _require.getCiphers;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar _require3 = require('../errors'),\n    JWEInvalid = _require3.JWEInvalid,\n    JWEDecryptionFailed = _require3.JWEDecryptionFailed;\n\nvar _require4 = require('../help/key_object'),\n    asInput = _require4.asInput;\n\nvar checkInput = function checkInput(size, iv, tag) {\n  if (iv.length !== 12) {\n    throw new JWEInvalid('invalid iv');\n  }\n\n  if (arguments.length === 3) {\n    if (tag.length !== 16) {\n      throw new JWEInvalid('invalid tag');\n    }\n  }\n};\n\nvar encrypt = function encrypt(size, _ref, cleartext, _ref2) {\n  var keyObject = _ref[KEYOBJECT];\n  var iv = _ref2.iv,\n      _ref2$aad = _ref2.aad,\n      aad = _ref2$aad === void 0 ? Buffer.alloc(0) : _ref2$aad;\n  var key = asInput(keyObject, false);\n  checkInput(size, iv);\n  var cipher = createCipheriv(\"aes-\".concat(size, \"-gcm\"), key, iv, {\n    authTagLength: 16\n  });\n  cipher.setAAD(aad);\n  var ciphertext = Buffer.concat([cipher.update(cleartext), cipher.final()]);\n  var tag = cipher.getAuthTag();\n  return {\n    ciphertext: ciphertext,\n    tag: tag\n  };\n};\n\nvar decrypt = function decrypt(size, _ref3, ciphertext, _ref4) {\n  var keyObject = _ref3[KEYOBJECT];\n  var iv = _ref4.iv,\n      _ref4$tag = _ref4.tag,\n      tag = _ref4$tag === void 0 ? Buffer.alloc(0) : _ref4$tag,\n      _ref4$aad = _ref4.aad,\n      aad = _ref4$aad === void 0 ? Buffer.alloc(0) : _ref4$aad;\n  var key = asInput(keyObject, false);\n  checkInput(size, iv, tag);\n\n  try {\n    var cipher = createDecipheriv(\"aes-\".concat(size, \"-gcm\"), key, iv, {\n      authTagLength: 16\n    });\n    cipher.setAuthTag(tag);\n    cipher.setAAD(aad);\n    return Buffer.concat([cipher.update(ciphertext), cipher.final()]);\n  } catch (err) {\n    throw new JWEDecryptionFailed();\n  }\n};\n\nmodule.exports = function (JWA, JWK) {\n  ['A128GCM', 'A192GCM', 'A256GCM'].forEach(function (jwaAlg) {\n    var size = parseInt(jwaAlg.substr(1, 3), 10);\n\n    if (getCiphers().includes(\"aes-\".concat(size, \"-gcm\"))) {\n      JWA.encrypt.set(jwaAlg, encrypt.bind(undefined, size));\n      JWA.decrypt.set(jwaAlg, decrypt.bind(undefined, size));\n\n      JWK.oct.encrypt[jwaAlg] = JWK.oct.decrypt[jwaAlg] = function (key) {\n        return (key.use === 'enc' || key.use === undefined) && key.length === size;\n      };\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}