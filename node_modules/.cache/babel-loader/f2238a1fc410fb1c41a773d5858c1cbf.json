{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppCheckTokenVerifier = void 0;\n\nvar validator = require(\"../utils/validator\");\n\nvar util = require(\"../utils/index\");\n\nvar app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\n\nvar jwt_1 = require(\"../utils/jwt\");\n\nvar APP_CHECK_ISSUER = 'https://firebaseappcheck.googleapis.com/';\nvar JWKS_URL = 'https://firebaseappcheck.googleapis.com/v1beta/jwks';\n/**\n * Class for verifying Firebase App Check tokens.\n *\n * @internal\n */\n\nvar AppCheckTokenVerifier =\n/** @class */\nfunction () {\n  function AppCheckTokenVerifier(app) {\n    this.app = app;\n    this.signatureVerifier = jwt_1.PublicKeySignatureVerifier.withJwksUrl(JWKS_URL);\n  }\n  /**\n   * Verifies the format and signature of a Firebase App Check token.\n   *\n   * @param token The Firebase Auth JWT token to verify.\n   * @return A promise fulfilled with the decoded claims of the Firebase App Check token.\n   */\n\n\n  AppCheckTokenVerifier.prototype.verifyToken = function (token) {\n    var _this = this;\n\n    if (!validator.isString(token)) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'App check token must be a non-null string.');\n    }\n\n    return this.ensureProjectId().then(function (projectId) {\n      return _this.decodeAndVerify(token, projectId);\n    }).then(function (decoded) {\n      var decodedAppCheckToken = decoded.payload; // eslint-disable-next-line @typescript-eslint/camelcase\n\n      decodedAppCheckToken.app_id = decodedAppCheckToken.sub;\n      return decodedAppCheckToken;\n    });\n  };\n\n  AppCheckTokenVerifier.prototype.ensureProjectId = function () {\n    return util.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-credential', 'Must initialize app with a cert credential or set your Firebase project ID as the ' + 'GOOGLE_CLOUD_PROJECT environment variable to verify an App Check token.');\n      }\n\n      return projectId;\n    });\n  };\n\n  AppCheckTokenVerifier.prototype.decodeAndVerify = function (token, projectId) {\n    var _this = this;\n\n    return this.safeDecode(token).then(function (decodedToken) {\n      _this.verifyContent(decodedToken, projectId);\n\n      return _this.verifySignature(token).then(function () {\n        return decodedToken;\n      });\n    });\n  };\n\n  AppCheckTokenVerifier.prototype.safeDecode = function (jwtToken) {\n    return jwt_1.decodeJwt(jwtToken).catch(function () {\n      var errorMessage = 'Decoding App Check token failed. Make sure you passed ' + 'the entire string JWT which represents the Firebase App Check token.';\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    });\n  };\n  /**\n   * Verifies the content of a Firebase App Check JWT.\n   *\n   * @param fullDecodedToken The decoded JWT.\n   * @param projectId The Firebase Project Id.\n   */\n\n\n  AppCheckTokenVerifier.prototype.verifyContent = function (fullDecodedToken, projectId) {\n    var header = fullDecodedToken.header;\n    var payload = fullDecodedToken.payload;\n    var projectIdMatchMessage = ' Make sure the App Check token comes from the same ' + 'Firebase project as the service account used to authenticate this SDK.';\n    var scopedProjectId = \"projects/\" + projectId;\n    var errorMessage;\n\n    if (header.alg !== jwt_1.ALGORITHM_RS256) {\n      errorMessage = 'The provided App Check token has incorrect algorithm. Expected \"' + jwt_1.ALGORITHM_RS256 + '\" but got ' + '\"' + header.alg + '\".';\n    } else if (!validator.isNonEmptyArray(payload.aud) || !payload.aud.includes(scopedProjectId)) {\n      errorMessage = 'The provided App Check token has incorrect \"aud\" (audience) claim. Expected \"' + scopedProjectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage;\n    } else if (typeof payload.iss !== 'string' || !payload.iss.startsWith(APP_CHECK_ISSUER)) {\n      errorMessage = 'The provided App Check token has incorrect \"iss\" (issuer) claim.';\n    } else if (typeof payload.sub !== 'string') {\n      errorMessage = 'The provided App Check token has no \"sub\" (subject) claim.';\n    } else if (payload.sub === '') {\n      errorMessage = 'The provided App Check token has an empty string \"sub\" (subject) claim.';\n    }\n\n    if (errorMessage) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    }\n  };\n\n  AppCheckTokenVerifier.prototype.verifySignature = function (jwtToken) {\n    var _this = this;\n\n    return this.signatureVerifier.verify(jwtToken).catch(function (error) {\n      throw _this.mapJwtErrorToAppCheckError(error);\n    });\n  };\n  /**\n   * Maps JwtError to FirebaseAppCheckError\n   *\n   * @param error JwtError to be mapped.\n   * @returns FirebaseAppCheckError instance.\n   */\n\n\n  AppCheckTokenVerifier.prototype.mapJwtErrorToAppCheckError = function (error) {\n    if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n      var errorMessage = 'The provided App Check token has expired. Get a fresh App Check token' + ' from your client app and try again.';\n      return new app_check_api_client_internal_1.FirebaseAppCheckError('app-check-token-expired', errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n      var errorMessage = 'The provided App Check token has invalid signature.';\n      return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n      var errorMessage = 'The provided App Check token has \"kid\" claim which does not ' + 'correspond to a known public key. Most likely the provided App Check token ' + 'is expired, so get a fresh token from your client app and try again.';\n      return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    }\n\n    return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', error.message);\n  };\n\n  return AppCheckTokenVerifier;\n}();\n\nexports.AppCheckTokenVerifier = AppCheckTokenVerifier;","map":null,"metadata":{},"sourceType":"script"}