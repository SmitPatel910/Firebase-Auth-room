{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\n\nvar _objectSpread = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _defineProperty = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestTimeout = exports.resetIsAvailableCache = exports.isAvailable = exports.project = exports.instance = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\n\nvar gaxios_1 = require(\"gaxios\");\n\nvar jsonBigint = require(\"json-bigint\");\n\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze(_defineProperty({}, exports.HEADER_NAME, exports.HEADER_VALUE));\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\n\nfunction getBaseUrl(baseUrl) {\n  if (!baseUrl) {\n    baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n  } // If no scheme is provided default to HTTP:\n\n\n  if (!/^https?:\\/\\//.test(baseUrl)) {\n    baseUrl = \"http://\".concat(baseUrl);\n  }\n\n  return new URL(exports.BASE_PATH, baseUrl).href;\n} // Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\n\n\nfunction validate(options) {\n  Object.keys(options).forEach(function (key) {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n\n      default:\n        throw new Error(\"'\".concat(key, \"' is not a valid configuration option.\"));\n    }\n  });\n}\n\nfunction metadataAccessor(_x, _x2) {\n  return _metadataAccessor.apply(this, arguments);\n}\n\nfunction _metadataAccessor() {\n  _metadataAccessor = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(type, options) {\n    var noResponseRetries,\n        fastFail,\n        property,\n        requestMethod,\n        res,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            noResponseRetries = _args.length > 2 && _args[2] !== undefined ? _args[2] : 3;\n            fastFail = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;\n            options = options || {};\n\n            if (typeof options === 'string') {\n              options = {\n                property: options\n              };\n            }\n\n            property = '';\n\n            if (typeof options === 'object' && options.property) {\n              property = '/' + options.property;\n            }\n\n            validate(options);\n            _context.prev = 7;\n            requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n            _context.next = 11;\n            return requestMethod({\n              url: \"\".concat(getBaseUrl(), \"/\").concat(type).concat(property),\n              headers: Object.assign({}, exports.HEADERS, options.headers),\n              retryConfig: {\n                noResponseRetries: noResponseRetries\n              },\n              params: options.params,\n              responseType: 'text',\n              timeout: requestTimeout()\n            });\n\n          case 11:\n            res = _context.sent;\n\n            if (!(res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE)) {\n              _context.next = 16;\n              break;\n            }\n\n            throw new Error(\"Invalid response from metadata service: incorrect \".concat(exports.HEADER_NAME, \" header.\"));\n\n          case 16:\n            if (res.data) {\n              _context.next = 18;\n              break;\n            }\n\n            throw new Error('Invalid response from the metadata service');\n\n          case 18:\n            if (!(typeof res.data === 'string')) {\n              _context.next = 25;\n              break;\n            }\n\n            _context.prev = 19;\n            return _context.abrupt(\"return\", jsonBigint.parse(res.data));\n\n          case 23:\n            _context.prev = 23;\n            _context.t0 = _context[\"catch\"](19);\n\n          case 25:\n            return _context.abrupt(\"return\", res.data);\n\n          case 28:\n            _context.prev = 28;\n            _context.t1 = _context[\"catch\"](7);\n\n            if (_context.t1.response && _context.t1.response.status !== 200) {\n              _context.t1.message = \"Unsuccessful response status code. \".concat(_context.t1.message);\n            }\n\n            throw _context.t1;\n\n          case 32:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[7, 28], [19, 23]]);\n  }));\n  return _metadataAccessor.apply(this, arguments);\n}\n\nfunction fastFailMetadataRequest(_x3) {\n  return _fastFailMetadataRequest.apply(this, arguments);\n}\n/**\n * Obtain metadata for the current GCE instance\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction _fastFailMetadataRequest() {\n  _fastFailMetadataRequest = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n    var secondaryOptions, responded, r1, r2;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            secondaryOptions = _objectSpread({}, options, {\n              url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n            }); // We race a connection between DNS/IP to metadata server. There are a couple\n            // reasons for this:\n            //\n            // 1. the DNS is slow in some GCP environments; by checking both, we might\n            //    detect the runtime environment signficantly faster.\n            // 2. we can't just check the IP, which is tarpitted and slow to respond\n            //    on a user's local machine.\n            //\n            // Additional logic has been added to make sure that we don't create an\n            // unhandled rejection in scenarios where a failure happens sometime\n            // after a success.\n            //\n            // Note, however, if a failure happens prior to a success, a rejection should\n            // occur, this is for folks running locally.\n            //\n\n            responded = false;\n            r1 = gaxios_1.request(options).then(function (res) {\n              responded = true;\n              return res;\n            }).catch(function (err) {\n              if (responded) {\n                return r2;\n              } else {\n                responded = true;\n                throw err;\n              }\n            });\n            r2 = gaxios_1.request(secondaryOptions).then(function (res) {\n              responded = true;\n              return res;\n            }).catch(function (err) {\n              if (responded) {\n                return r1;\n              } else {\n                responded = true;\n                throw err;\n              }\n            });\n            return _context2.abrupt(\"return\", Promise.race([r1, r2]));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _fastFailMetadataRequest.apply(this, arguments);\n}\n\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\n\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP Project.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\n\nexports.project = project;\n/*\n * How many times should we retry detecting GCP environment.\n */\n\nfunction detectGCPAvailableRetries() {\n  return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\n\nvar cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\n\nfunction isAvailable() {\n  return _isAvailable.apply(this, arguments);\n}\n\nfunction _isAvailable() {\n  _isAvailable = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var code;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n\n            // If a user is instantiating several GCP libraries at the same time,\n            // this may result in multiple calls to isAvailable(), to detect the\n            // runtime environment. We use the same promise for each of these calls\n            // to reduce the network load.\n            if (cachedIsAvailableResponse === undefined) {\n              cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(), // If the default HOST_ADDRESS has been overridden, we should not\n              // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n              // a non-GCP environment):\n              !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n            }\n\n            _context3.next = 4;\n            return cachedIsAvailableResponse;\n\n          case 4:\n            return _context3.abrupt(\"return\", true);\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n\n            if (process.env.DEBUG_AUTH) {\n              console.info(_context3.t0);\n            }\n\n            if (!(_context3.t0.type === 'request-timeout')) {\n              _context3.next = 12;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", false);\n\n          case 12:\n            if (!(_context3.t0.response && _context3.t0.response.status === 404)) {\n              _context3.next = 16;\n              break;\n            }\n\n            return _context3.abrupt(\"return\", false);\n\n          case 16:\n            if (!(_context3.t0.response && _context3.t0.response.status === 404) && ( // A warning is emitted if we see an unexpected err.code, or err.code\n            // is not populated:\n            !_context3.t0.code || !['EHOSTDOWN', 'EHOSTUNREACH', 'ENETUNREACH', 'ENOENT', 'ENOTFOUND', 'ECONNREFUSED'].includes(_context3.t0.code))) {\n              code = 'UNKNOWN';\n              if (_context3.t0.code) code = _context3.t0.code;\n              process.emitWarning(\"received unexpected error = \".concat(_context3.t0.message, \" code = \").concat(code), 'MetadataLookupWarning');\n            } // Failure to resolve the metadata service means that it is not available.\n\n\n            return _context3.abrupt(\"return\", false);\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 7]]);\n  }));\n  return _isAvailable.apply(this, arguments);\n}\n\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\n\nfunction resetIsAvailableCache() {\n  cachedIsAvailableResponse = undefined;\n}\n\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * Obtain the timeout for requests to the metadata server.\n */\n\nfunction requestTimeout() {\n  // In testing, we were able to reproduce behavior similar to\n  // https://github.com/googleapis/google-auth-library-nodejs/issues/798\n  // by making many concurrent network requests. Requests do not actually fail,\n  // rather they take significantly longer to complete (and we hit our\n  // default 3000ms timeout).\n  //\n  // This logic detects a GCF environment, using the documented environment\n  // variables K_SERVICE and FUNCTION_NAME:\n  // https://cloud.google.com/functions/docs/env-var and, in a GCF environment\n  // eliminates timeouts (by setting the value to 0 to disable).\n  return process.env.K_SERVICE || process.env.FUNCTION_NAME ? 0 : 3000;\n}\n\nexports.requestTimeout = requestTimeout;","map":null,"metadata":{},"sourceType":"script"}