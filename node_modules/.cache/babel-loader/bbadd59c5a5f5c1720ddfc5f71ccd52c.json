{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseAppCheckError = exports.APP_CHECK_ERROR_CODE_MAPPING = exports.AppCheckApiClient = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\"); // App Check backend constants\n\n\nvar FIREBASE_APP_CHECK_V1_API_URL_FORMAT = 'https://firebaseappcheck.googleapis.com/v1beta/projects/{projectId}/apps/{appId}:exchangeCustomToken';\nvar FIREBASE_APP_CHECK_CONFIG_HEADERS = {\n  'X-Firebase-Client': \"fire-admin-node/\" + utils.getSdkVersion()\n};\n/**\n * Class that facilitates sending requests to the Firebase App Check backend API.\n *\n * @internal\n */\n\nvar AppCheckApiClient =\n/** @class */\nfunction () {\n  function AppCheckApiClient(app) {\n    this.app = app;\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new FirebaseAppCheckError('invalid-argument', 'First argument passed to admin.appCheck() must be a valid Firebase app instance.');\n    }\n\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  /**\n   * Exchange a signed custom token to App Check token\n   *\n   * @param customToken The custom token to be exchanged.\n   * @param appId The mobile App ID.\n   * @return A promise that fulfills with a `AppCheckToken`.\n   */\n\n\n  AppCheckApiClient.prototype.exchangeToken = function (customToken, appId) {\n    var _this = this;\n\n    if (!validator.isNonEmptyString(appId)) {\n      throw new FirebaseAppCheckError('invalid-argument', '`appId` must be a non-empty string.');\n    }\n\n    if (!validator.isNonEmptyString(customToken)) {\n      throw new FirebaseAppCheckError('invalid-argument', '`customToken` must be a non-empty string.');\n    }\n\n    return this.getUrl(appId).then(function (url) {\n      var request = {\n        method: 'POST',\n        url: url,\n        headers: FIREBASE_APP_CHECK_CONFIG_HEADERS,\n        data: {\n          customToken: customToken\n        }\n      };\n      return _this.httpClient.send(request);\n    }).then(function (resp) {\n      return _this.toAppCheckToken(resp);\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  AppCheckApiClient.prototype.getUrl = function (appId) {\n    return this.getProjectId().then(function (projectId) {\n      var urlParams = {\n        projectId: projectId,\n        appId: appId\n      };\n      var baseUrl = utils.formatString(FIREBASE_APP_CHECK_V1_API_URL_FORMAT, urlParams);\n      return utils.formatString(baseUrl);\n    });\n  };\n\n  AppCheckApiClient.prototype.getProjectId = function () {\n    var _this = this;\n\n    if (this.projectId) {\n      return Promise.resolve(this.projectId);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new FirebaseAppCheckError('unknown-error', 'Failed to determine project ID. Initialize the ' + 'SDK with service account credentials or set project ID as an app option. ' + 'Alternatively, set the GOOGLE_CLOUD_PROJECT environment variable.');\n      }\n\n      _this.projectId = projectId;\n      return projectId;\n    });\n  };\n\n  AppCheckApiClient.prototype.toFirebaseError = function (err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n\n    var response = err.response;\n\n    if (!response.isJson()) {\n      return new FirebaseAppCheckError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n    }\n\n    var error = response.data.error || {};\n    var code = 'unknown-error';\n\n    if (error.status && error.status in exports.APP_CHECK_ERROR_CODE_MAPPING) {\n      code = exports.APP_CHECK_ERROR_CODE_MAPPING[error.status];\n    }\n\n    var message = error.message || \"Unknown server error: \" + response.text;\n    return new FirebaseAppCheckError(code, message);\n  };\n  /**\n   * Creates an AppCheckToken from the API response.\n   *\n   * @param resp API response object.\n   * @return An AppCheckToken instance.\n   */\n\n\n  AppCheckApiClient.prototype.toAppCheckToken = function (resp) {\n    var token = resp.data.attestationToken; // `ttl` is a string with the suffix \"s\" preceded by the number of seconds,\n    // with nanoseconds expressed as fractional seconds.\n\n    var ttlMillis = this.stringToMilliseconds(resp.data.ttl);\n    return {\n      token: token,\n      ttlMillis: ttlMillis\n    };\n  };\n  /**\n   * Converts a duration string with the suffix `s` to milliseconds.\n   *\n   * @param duration The duration as a string with the suffix \"s\" preceded by the\n   * number of seconds, with fractional seconds. For example, 3 seconds with 0 nanoseconds\n   * is expressed as \"3s\", while 3 seconds and 1 nanosecond is expressed as \"3.000000001s\",\n   * and 3 seconds and 1 microsecond is expressed as \"3.000001s\".\n   *\n   * @return The duration in milliseconds.\n   */\n\n\n  AppCheckApiClient.prototype.stringToMilliseconds = function (duration) {\n    if (!validator.isNonEmptyString(duration) || !duration.endsWith('s')) {\n      throw new FirebaseAppCheckError('invalid-argument', '`ttl` must be a valid duration string with the suffix `s`.');\n    }\n\n    var seconds = duration.slice(0, -1);\n    return Math.floor(Number(seconds) * 1000);\n  };\n\n  return AppCheckApiClient;\n}();\n\nexports.AppCheckApiClient = AppCheckApiClient;\nexports.APP_CHECK_ERROR_CODE_MAPPING = {\n  ABORTED: 'aborted',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INVALID_CREDENTIAL: 'invalid-credential',\n  INTERNAL: 'internal-error',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  NOT_FOUND: 'not-found',\n  UNKNOWN: 'unknown-error'\n};\n/**\n * Firebase App Check error code structure. This extends PrefixedFirebaseError.\n *\n * @param {AppCheckErrorCode} code The error code.\n * @param {string} message The error message.\n * @constructor\n */\n\nvar FirebaseAppCheckError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseAppCheckError, _super);\n\n  function FirebaseAppCheckError(code, message) {\n    var _this = _super.call(this, 'app-check', code, message) || this;\n    /* tslint:disable:max-line-length */\n    // Set the prototype explicitly. See the following link for more details:\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n    /* tslint:enable:max-line-length */\n\n\n    _this.__proto__ = FirebaseAppCheckError.prototype;\n    return _this;\n  }\n\n  return FirebaseAppCheckError;\n}(error_1.PrefixedFirebaseError);\n\nexports.FirebaseAppCheckError = FirebaseAppCheckError;","map":null,"metadata":{},"sourceType":"script"}