{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _get = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResourceStream = void 0;\n\nvar stream_1 = require(\"stream\");\n\nvar ResourceStream = /*#__PURE__*/function (_stream_1$Transform) {\n  _inherits(ResourceStream, _stream_1$Transform);\n\n  function ResourceStream(args, requestFn) {\n    var _this;\n\n    _classCallCheck(this, ResourceStream);\n\n    var options = Object.assign({\n      objectMode: true\n    }, args.streamOptions);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ResourceStream).call(this, options));\n    _this._ended = false;\n    _this._maxApiCalls = args.maxApiCalls === -1 ? Infinity : args.maxApiCalls;\n    _this._nextQuery = args.query;\n    _this._reading = false;\n    _this._requestFn = requestFn;\n    _this._requestsMade = 0;\n    _this._resultsToSend = args.maxResults === -1 ? Infinity : args.maxResults;\n    return _this;\n  }\n  /* eslint-disable  @typescript-eslint/no-explicit-any */\n\n\n  _createClass(ResourceStream, [{\n    key: \"end\",\n    value: function end() {\n      var _get2;\n\n      this._ended = true;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return (_get2 = _get(_getPrototypeOf(ResourceStream.prototype), \"end\", this)).call.apply(_get2, [this].concat(args));\n    }\n  }, {\n    key: \"_read\",\n    value: function _read() {\n      var _this2 = this;\n\n      if (this._reading) {\n        return;\n      }\n\n      this._reading = true; // Wrap in a try/catch to catch input linting errors, e.g.\n      // an invalid BigQuery query. These errors are thrown in an\n      // async fashion, which makes them un-catchable by the user.\n\n      try {\n        this._requestFn(this._nextQuery, function (err, results, nextQuery) {\n          if (err) {\n            _this2.destroy(err);\n\n            return;\n          }\n\n          _this2._nextQuery = nextQuery;\n\n          if (_this2._resultsToSend !== Infinity) {\n            results = results.splice(0, _this2._resultsToSend);\n            _this2._resultsToSend -= results.length;\n          }\n\n          var more = true;\n\n          var _iterator = _createForOfIteratorHelper(results),\n              _step;\n\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var result = _step.value;\n\n              if (_this2._ended) {\n                break;\n              }\n\n              more = _this2.push(result);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n\n          var isFinished = !_this2._nextQuery || _this2._resultsToSend < 1;\n          var madeMaxCalls = ++_this2._requestsMade >= _this2._maxApiCalls;\n\n          if (isFinished || madeMaxCalls) {\n            _this2.end();\n          }\n\n          if (more && !_this2._ended) {\n            setImmediate(function () {\n              return _this2._read();\n            });\n          }\n\n          _this2._reading = false;\n        });\n      } catch (e) {\n        this.destroy(e);\n      }\n    }\n  }]);\n\n  return ResourceStream;\n}(stream_1.Transform);\n\nexports.ResourceStream = ResourceStream;","map":null,"metadata":{},"sourceType":"script"}