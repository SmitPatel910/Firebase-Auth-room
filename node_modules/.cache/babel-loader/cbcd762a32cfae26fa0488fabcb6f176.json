{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Notification = void 0;\n\nvar common_1 = require(\"@google-cloud/common\");\n\nvar promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * The API-formatted resource description of the notification.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Notification#metadata\n * @type {object}\n */\n\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * @see [Cloud Pub/Sub Notifications for Google Cloud Storage]{@link https://cloud.google.com/storage/docs/pubsub-notifications}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n */\n\n\nvar Notification = /*#__PURE__*/function (_common_1$ServiceObje) {\n  _inherits(Notification, _common_1$ServiceObje);\n\n  function Notification(bucket, id) {\n    _classCallCheck(this, Notification);\n\n    var methods = {\n      /**\n       * Creates a notification subscription for the bucket.\n       *\n       * @see [Notifications: insert]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert}\n       * @method Notification#create\n       *\n       * @param {Topic|string} topic The Cloud PubSub topic to which this\n       * subscription publishes. If the project ID is omitted, the current\n       * project ID will be used.\n       *\n       * Acceptable formats are:\n       * - `projects/grape-spaceship-123/topics/my-topic`\n       *\n       * - `my-topic`\n       * @param {CreateNotificationRequest} [options] Metadata to set for\n       *     the notification.\n       * @param {CreateNotificationCallback} [callback] Callback function.\n       * @returns {Promise<CreateNotificationResponse>}\n       * @throws {Error} If a valid topic is not provided.\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.create(function(err, notification, apiResponse) {\n       *   if (!err) {\n       *     // The notification was created successfully.\n       *   }\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.create().then(function(data) {\n       *   const notification = data[0];\n       *   const apiResponse = data[1];\n       * });\n       */\n      create: true,\n\n      /**\n       * @typedef {array} NotificationExistsResponse\n       * @property {boolean} 0 Whether the notification exists or not.\n       */\n\n      /**\n       * @callback NotificationExistsCallback\n       * @param {?Error} err Request error, if any.\n       * @param {boolean} exists Whether the notification exists or not.\n       */\n\n      /**\n       * Check if the notification exists.\n       *\n       * @method Notification#exists\n       * @param {NotificationExistsCallback} [callback] Callback function.\n       * @returns {Promise<NotificationExistsResponse>}\n       *\n       * @example\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.exists(function(err, exists) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.exists().then(function(data) {\n       *   const exists = data[0];\n       * });\n       */\n      exists: true\n    };\n    return _possibleConstructorReturn(this, _getPrototypeOf(Notification).call(this, {\n      parent: bucket,\n      baseUrl: '/notificationConfigs',\n      id: id.toString(),\n      createMethod: bucket.createNotification.bind(bucket),\n      methods: methods\n    }));\n  }\n  /**\n   * @typedef {array} DeleteNotificationResponse\n   * @property {object} 0 The full API response.\n   */\n\n  /**\n   * Permanently deletes a notification subscription.\n   *\n   * @see [Notifications: delete API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete}\n   *\n   * @param {object} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {DeleteNotificationCallback} [callback] Callback function.\n   * @returns {Promise<DeleteNotificationResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   * const notification = myBucket.notification('1');\n   *\n   * notification.delete(function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * notification.delete().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   *\n   * @example <caption>include:samples/notifications.js</caption>\n   * region_tag:storage_delete_notification\n   * Another example:\n   */\n\n\n  _createClass(Notification, [{\n    key: \"delete\",\n    value: function _delete(optionsOrCallback, callback) {\n      var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n      callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n      this.request({\n        method: 'DELETE',\n        uri: '',\n        qs: options\n      }, callback || common_1.util.noop);\n    }\n    /**\n     * Get a notification and its metadata if it exists.\n     *\n     * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get}\n     *\n     * @param {object} [options] Configuration options.\n     *     See {@link Bucket#createNotification} for create options.\n     * @param {boolean} [options.autoCreate] Automatically create the object if\n     *     it does not exist. Default: `false`.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationCallback} [callback] Callback function.\n     * @return {Promise<GetNotificationCallback>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.get(function(err, notification, apiResponse) {\n     *   // `notification.metadata` has been populated.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.get().then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(optionsOrCallback, callback) {\n      var _this = this;\n\n      var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n      callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n      var autoCreate = options.autoCreate;\n      delete options.autoCreate;\n\n      var onCreate = function onCreate(err, notification, apiResponse) {\n        if (err) {\n          if (err.code === 409) {\n            _this.get(options, callback);\n\n            return;\n          }\n\n          callback(err, null, apiResponse);\n          return;\n        }\n\n        callback(null, notification, apiResponse);\n      };\n\n      this.getMetadata(options, function (err, metadata) {\n        if (err) {\n          if (err.code === 404 && autoCreate) {\n            var args = [];\n\n            if (Object.keys(options).length > 0) {\n              args.push(options);\n            }\n\n            args.push(onCreate); // eslint-disable-next-line\n\n            _this.create.apply(_this, args);\n\n            return;\n          }\n\n          callback(err, null, metadata);\n          return;\n        }\n\n        callback(null, _this, metadata);\n      });\n    }\n    /**\n     * Get the notification's metadata.\n     *\n     * @see [Notifications: get API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get}\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationMetadataCallback} [callback] Callback function.\n     * @returns {Promise<GetNotificationMetadataResponse>}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.getMetadata(function(err, metadata, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.getMetadata().then(function(data) {\n     *   const metadata = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/notifications.js</caption>\n     * region_tag:storage_notifications_get_metadata\n     * Another example:\n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata(optionsOrCallback, callback) {\n      var _this2 = this;\n\n      var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n      callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n      this.request({\n        uri: '',\n        qs: options\n      }, function (err, resp) {\n        if (err) {\n          callback(err, null, resp);\n          return;\n        }\n\n        _this2.metadata = resp;\n        callback(null, _this2.metadata, resp);\n      });\n    }\n  }]);\n\n  return Notification;\n}(common_1.ServiceObject);\n\nexports.Notification = Notification;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Notification);","map":null,"metadata":{},"sourceType":"script"}