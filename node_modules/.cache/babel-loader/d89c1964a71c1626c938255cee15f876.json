{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Storage = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar credential_internal_1 = require(\"../credential/credential-internal\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n/**\n * The default `Storage` service if no\n * app is provided or the `Storage` service associated with the provided\n * app.\n */\n\n\nvar Storage =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app for this Storage service.\n   * @constructor\n   * @internal\n   */\n  function Storage(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-argument',\n        message: 'First argument passed to admin.storage() must be a valid Firebase app instance.'\n      });\n    }\n\n    if (!process.env.STORAGE_EMULATOR_HOST && process.env.FIREBASE_STORAGE_EMULATOR_HOST) {\n      var firebaseStorageEmulatorHost = process.env.FIREBASE_STORAGE_EMULATOR_HOST;\n\n      if (firebaseStorageEmulatorHost.match(/https?:\\/\\//)) {\n        throw new error_1.FirebaseError({\n          code: 'storage/invalid-emulator-host',\n          message: 'FIREBASE_STORAGE_EMULATOR_HOST should not contain a protocol (http or https).'\n        });\n      }\n\n      process.env.STORAGE_EMULATOR_HOST = \"http://\" + process.env.FIREBASE_STORAGE_EMULATOR_HOST;\n    }\n\n    var storage;\n\n    try {\n      storage = require('@google-cloud/storage').Storage;\n    } catch (err) {\n      throw new error_1.FirebaseError({\n        code: 'storage/missing-dependencies',\n        message: 'Failed to import the Cloud Storage client library for Node.js. ' + 'Make sure to install the \"@google-cloud/storage\" npm package. ' + (\"Original error: \" + err)\n      });\n    }\n\n    var projectId = utils.getExplicitProjectId(app);\n    var credential = app.options.credential;\n\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n      this.storageClient = new storage({\n        // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n        // guaranteed to be available.\n        projectId: projectId,\n        credentials: {\n          private_key: credential.privateKey,\n          client_email: credential.clientEmail\n        }\n      });\n    } else if (credential_internal_1.isApplicationDefault(app.options.credential)) {\n      // Try to use the Google application default credentials.\n      this.storageClient = new storage();\n    } else {\n      throw new error_1.FirebaseError({\n        code: 'storage/invalid-credential',\n        message: 'Failed to initialize Google Cloud Storage client with the available credential. ' + 'Must initialize the SDK with a certificate credential or application default credentials ' + 'to use Cloud Storage API.'\n      });\n    }\n\n    this.appInternal = app;\n  }\n  /**\n   * @param name Optional name of the bucket to be retrieved. If name is not specified,\n   * retrieves a reference to the default bucket.\n   * @returns A [Bucket](https://cloud.google.com/nodejs/docs/reference/storage/latest/Bucket)\n   * instance as defined in the `@google-cloud/storage` package.\n   */\n\n\n  Storage.prototype.bucket = function (name) {\n    var bucketName = typeof name !== 'undefined' ? name : this.appInternal.options.storageBucket;\n\n    if (validator.isNonEmptyString(bucketName)) {\n      return this.storageClient.bucket(bucketName);\n    }\n\n    throw new error_1.FirebaseError({\n      code: 'storage/invalid-argument',\n      message: 'Bucket name not specified or invalid. Specify a valid bucket name via the ' + 'storageBucket option when initializing the app, or specify the bucket name ' + 'explicitly when calling the getBucket() method.'\n    });\n  };\n\n  Object.defineProperty(Storage.prototype, \"app\", {\n    /**\n     * @return The app associated with this Storage instance.\n     */\n    get: function get() {\n      return this.appInternal;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return Storage;\n}();\n\nexports.Storage = Storage;","map":null,"metadata":{},"sourceType":"script"}