{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unicodeJSONStringify = exports.objectKeyToLowercase = exports.qsStringify = exports.encodeURI = exports.fixedEncodeURIComponent = exports.objectEntries = exports.normalize = void 0;\n\nvar querystring = require(\"querystring\");\n\nfunction normalize(optionsOrCallback, cb) {\n  var options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n  var callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n  return {\n    options: options,\n    callback: callback\n  };\n}\n\nexports.normalize = normalize;\n/**\n * Flatten an object into an Array of arrays, [[key, value], ..].\n * Implements Object.entries() for Node.js <8\n * @internal\n */\n\nfunction objectEntries(obj) {\n  return Object.keys(obj).map(function (key) {\n    return [key, obj[key]];\n  });\n}\n\nexports.objectEntries = objectEntries;\n/**\n * Encode `str` with encodeURIComponent, plus these\n * reserved characters: `! * ' ( )`.\n *\n * @see [MDN: fixedEncodeURIComponent]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent}\n *\n * @param {string} str The URI component to encode.\n * @return {string} The encoded string.\n */\n\nfunction fixedEncodeURIComponent(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n\nexports.fixedEncodeURIComponent = fixedEncodeURIComponent;\n/**\n * URI encode `uri` for generating signed URLs, using fixedEncodeURIComponent.\n *\n * Encode every byte except `A-Z a-Z 0-9 ~ - . _`.\n *\n * @param {string} uri The URI to encode.\n * @param [boolean=false] encodeSlash If `true`, the \"/\" character is not encoded.\n * @return {string} The encoded string.\n */\n\nfunction encodeURI(uri, encodeSlash) {\n  // Split the string by `/`, and conditionally rejoin them with either\n  // %2F if encodeSlash is `true`, or '/' if `false`.\n  return uri.split('/').map(fixedEncodeURIComponent).join(encodeSlash ? '%2F' : '/');\n}\n\nexports.encodeURI = encodeURI;\n/**\n * Serialize an object to a URL query string using util.encodeURI(uri, true).\n * @param {string} url The object to serialize.\n * @return {string} Serialized string.\n */\n\nfunction qsStringify(qs) {\n  return querystring.stringify(qs, '&', '=', {\n    encodeURIComponent: function encodeURIComponent(component) {\n      return encodeURI(component, true);\n    }\n  });\n}\n\nexports.qsStringify = qsStringify;\n\nfunction objectKeyToLowercase(object) {\n  var newObj = {};\n\n  for (var _i = 0, _Object$keys = Object.keys(object); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    var value = object[key];\n    key = key.toLowerCase();\n    newObj[key] = value;\n  }\n\n  return newObj;\n}\n\nexports.objectKeyToLowercase = objectKeyToLowercase;\n/**\n * JSON encode str, with unicode \\u+ representation.\n * @param {object} obj The object to encode.\n * @return {string} Serialized string.\n */\n\nfunction unicodeJSONStringify(obj) {\n  return JSON.stringify(obj).replace(/[\\u0080-\\uFFFF]/g, function (char) {\n    return \"\\\\u\" + ('0000' + char.charCodeAt(0).toString(16)).slice(-4);\n  });\n}\n\nexports.unicodeJSONStringify = unicodeJSONStringify;","map":null,"metadata":{},"sourceType":"script"}