{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufAnyFromProto3JSON = exports.googleProtobufAnyToProto3JSON = void 0;\n\nvar fromproto3json_1 = require(\"./fromproto3json\");\n\nvar toproto3json_1 = require(\"./toproto3json\"); // https://github.com/protocolbuffers/protobuf/blob/ba3836703b4a9e98e474aea2bac8c5b49b6d3b5c/python/google/protobuf/json_format.py#L850\n\n\nvar specialJSON = new Set(['google.protobuf.Any', 'google.protobuf.Duration', 'google.protobuf.FieldMask', 'google.protobuf.ListValue', 'google.protobuf.Struct', 'google.protobuf.Timestamp', 'google.protobuf.Value']);\n\nfunction googleProtobufAnyToProto3JSON(obj) {\n  // https://developers.google.com/protocol-buffers/docs/proto3#json\n  // If the Any contains a value that has a special JSON mapping, it will be converted as follows:\n  // {\"@type\": xxx, \"value\": yyy}.\n  // Otherwise, the value will be converted into a JSON object, and the \"@type\" field will be inserted\n  // to indicate the actual data type.\n  var typeName = obj.type_url.replace(/^.*\\//, '');\n  var type;\n\n  try {\n    type = obj.$type.root.lookupType(typeName);\n  } catch (err) {\n    throw new Error(\"googleProtobufAnyToProto3JSON: cannot find type \".concat(typeName, \": \").concat(err));\n  }\n\n  var valueMessage = type.decode(obj.value);\n  var valueProto3JSON = toproto3json_1.toProto3JSON(valueMessage);\n\n  if (specialJSON.has(typeName)) {\n    return {\n      '@type': obj.type_url,\n      value: valueProto3JSON\n    };\n  }\n\n  valueProto3JSON['@type'] = obj.type_url;\n  return valueProto3JSON;\n}\n\nexports.googleProtobufAnyToProto3JSON = googleProtobufAnyToProto3JSON;\n\nfunction googleProtobufAnyFromProto3JSON(root, json) {\n  // Not all possible JSON values can hold Any, only real objects.\n  if (json === null || typeof json !== 'object' || Array.isArray(json)) {\n    throw new Error('googleProtobufAnyFromProto3JSON: must be an object to decode google.protobuf.Any');\n  }\n\n  var typeUrl = json['@type'];\n\n  if (!typeUrl || typeof typeUrl !== 'string') {\n    throw new Error('googleProtobufAnyFromProto3JSON: JSON serialization of google.protobuf.Any must contain @type field');\n  }\n\n  var typeName = typeUrl.replace(/^.*\\//, '');\n  var type;\n\n  try {\n    type = root.lookupType(typeName);\n  } catch (err) {\n    throw new Error(\"googleProtobufAnyFromProto3JSON: cannot find type \".concat(typeName, \": \").concat(err));\n  }\n\n  var value = json;\n\n  if (specialJSON.has(typeName)) {\n    if (!('value' in json)) {\n      throw new Error(\"googleProtobufAnyFromProto3JSON: JSON representation of google.protobuf.Any with type \".concat(typeName, \" must contain the value field\"));\n    }\n\n    value = json.value;\n  }\n\n  var valueMessage = fromproto3json_1.fromProto3JSON(type, value);\n\n  if (valueMessage === null) {\n    return {\n      type_url: typeUrl,\n      value: null\n    };\n  }\n\n  var uint8array = type.encode(valueMessage).finish();\n  var buffer = Buffer.from(uint8array, 0, uint8array.byteLength);\n  var base64 = buffer.toString('base64');\n  return {\n    type_url: typeUrl,\n    value: base64\n  };\n}\n\nexports.googleProtobufAnyFromProto3JSON = googleProtobufAnyFromProto3JSON;","map":null,"metadata":{},"sourceType":"script"}