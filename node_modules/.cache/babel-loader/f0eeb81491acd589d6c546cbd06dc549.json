{"ast":null,"code":"var _require = require('crypto'),\n    createCipheriv = _require.createCipheriv,\n    createDecipheriv = _require.createDecipheriv,\n    getCiphers = _require.getCiphers;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar _require3 = require('../help/key_object'),\n    asInput = _require3.asInput;\n\nvar checkInput = function checkInput(data) {\n  if (data !== undefined && data.length % 8 !== 0) {\n    throw new Error('invalid data length');\n  }\n};\n\nvar wrapKey = function wrapKey(alg, _ref, payload) {\n  var keyObject = _ref[KEYOBJECT];\n  var key = asInput(keyObject, false);\n  var cipher = createCipheriv(alg, key, Buffer.alloc(8, 'a6', 'hex'));\n  return {\n    wrapped: Buffer.concat([cipher.update(payload), cipher.final()])\n  };\n};\n\nvar unwrapKey = function unwrapKey(alg, _ref2, payload) {\n  var keyObject = _ref2[KEYOBJECT];\n  var key = asInput(keyObject, false);\n  checkInput(payload);\n  var cipher = createDecipheriv(alg, key, Buffer.alloc(8, 'a6', 'hex'));\n  return Buffer.concat([cipher.update(payload), cipher.final()]);\n};\n\nmodule.exports = function (JWA, JWK) {\n  ['A128KW', 'A192KW', 'A256KW'].forEach(function (jwaAlg) {\n    var size = parseInt(jwaAlg.substr(1, 3), 10);\n    var alg = \"aes\".concat(size, \"-wrap\");\n\n    if (getCiphers().includes(alg)) {\n      JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, alg));\n      JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, alg));\n\n      JWK.oct.wrapKey[jwaAlg] = JWK.oct.unwrapKey[jwaAlg] = function (key) {\n        return (key.use === 'enc' || key.use === undefined) && key.length === size;\n      };\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}