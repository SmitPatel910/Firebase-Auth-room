{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Iam = void 0;\n\nvar promisify_1 = require(\"@google-cloud/promisify\");\n\nvar arrify = require(\"arrify\");\n\nvar util_1 = require(\"./util\");\n/**\n * Get and set IAM policies for your Cloud Storage bucket.\n *\n * @see [Cloud Storage IAM Management](https://cloud.google.com/storage/docs/access-control/iam#short_title_iam_management)\n * @see [Granting, Changing, and Revoking Access](https://cloud.google.com/iam/docs/granting-changing-revoking-access)\n * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n *\n * @constructor Iam\n *\n * @param {Bucket} bucket The parent instance.\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const bucket = storage.bucket('my-bucket');\n * // bucket.iam\n */\n\n\nvar Iam = /*#__PURE__*/function () {\n  function Iam(bucket) {\n    _classCallCheck(this, Iam);\n\n    this.request_ = bucket.request.bind(bucket);\n    this.resourceId_ = 'buckets/' + bucket.getId();\n  }\n  /**\n   * @typedef {object} GetPolicyOptions Requested options for IAM#getPolicy().\n   * @property {number} [requestedPolicyVersion] The version of IAM policies to\n   *     request. If a policy with a condition is requested without setting\n   *     this, the server will return an error. This must be set to a value\n   *     of 3 to retrieve IAM policies containing conditions. This is to\n   *     prevent client code that isn't aware of IAM conditions from\n   *     interpreting and modifying policies incorrectly. The service might\n   *     return a policy with version lower than the one that was requested,\n   *     based on the feature syntax in the policy fetched.\n   *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n   * @property {string} [userProject] The ID of the project which will be\n   *     billed for the request.\n   */\n\n  /**\n   * @typedef {array} GetPolicyResponse\n   * @property {Policy} 0 The policy.\n   * @property {object} 1 The full API response.\n   */\n\n  /**\n   * @typedef {object} Policy\n   * @property {PolicyBinding[]} policy.bindings Bindings associate members with roles.\n   * @property {string} [policy.etag] Etags are used to perform a read-modify-write.\n   * @property {number} [policy.version] The syntax schema version of the Policy.\n   *      To set an IAM policy with conditional binding, this field must be set to\n   *      3 or greater.\n   *     @see [IAM Policy versions]{@link https://cloud.google.com/iam/docs/policies#versions}\n   */\n\n  /**\n   * @typedef {object} PolicyBinding\n   * @property {string} role Role that is assigned to members.\n   * @property {string[]} members Specifies the identities requesting access for the bucket.\n   * @property {Expr} [condition] The condition that is associated with this binding.\n   */\n\n  /**\n   * @typedef {object} Expr\n   * @property {string} [title] An optional title for the expression, i.e. a\n   *     short string describing its purpose. This can be used e.g. in UIs\n   *     which allow to enter the expression.\n   * @property {string} [description] An optional description of the\n   *     expression. This is a longer text which describes the expression,\n   *     e.g. when hovered over it in a UI.\n   * @property {string} expression Textual representation of an expression in\n   *     Common Expression Language syntax. The application context of the\n   *     containing message determines which well-known feature set of CEL\n   *     is supported.The condition that is associated with this binding.\n   *\n   * @see [Condition] https://cloud.google.com/storage/docs/access-control/iam#conditions\n   */\n\n  /**\n   * Get the IAM policy.\n   *\n   * @param {GetPolicyOptions} [options] Request options.\n   * @param {GetPolicyCallback} [callback] Callback function.\n   * @returns {Promise<GetPolicyResponse>}\n   *\n   * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/getIamPolicy}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const bucket = storage.bucket('my-bucket');\n   *\n   * bucket.iam.getPolicy(\n   *     {requestedPolicyVersion: 3},\n   *     function(err, policy, apiResponse) {\n   *\n   *     },\n   * );\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * bucket.iam.getPolicy({requestedPolicyVersion: 3})\n   *   .then(function(data) {\n   *     const policy = data[0];\n   *     const apiResponse = data[1];\n   *   });\n   *\n   * @example <caption>include:samples/iam.js</caption>\n   * region_tag:storage_view_bucket_iam_members\n   * Example of retrieving a bucket's IAM policy:\n   */\n\n\n  _createClass(Iam, [{\n    key: \"getPolicy\",\n    value: function getPolicy(optionsOrCallback, callback) {\n      var _util_1$normalize = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize.options,\n          cb = _util_1$normalize.callback;\n\n      var qs = {};\n\n      if (options.userProject) {\n        qs.userProject = options.userProject;\n      }\n\n      if (options.requestedPolicyVersion !== null && options.requestedPolicyVersion !== undefined) {\n        qs.optionsRequestedPolicyVersion = options.requestedPolicyVersion;\n      }\n\n      this.request_({\n        uri: '/iam',\n        qs: qs\n      }, cb);\n    }\n    /**\n     * Set the IAM policy.\n     *\n     * @throws {Error} If no policy is provided.\n     *\n     * @param {Policy} policy The policy.\n     * @param {SetPolicyOptions} [options] Configuration opbject.\n     * @param {SetPolicyCallback} callback Callback function.\n     * @returns {Promise<SetPolicyResponse>}\n     *\n     * @see [Buckets: setIamPolicy API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/setIamPolicy}\n     * @see [IAM Roles](https://cloud.google.com/iam/docs/understanding-roles)\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * const myPolicy = {\n     *   bindings: [\n     *     {\n     *       role: 'roles/storage.admin',\n     *       members:\n     * ['serviceAccount:myotherproject@appspot.gserviceaccount.com']\n     *     }\n     *   ]\n     * };\n     *\n     * bucket.iam.setPolicy(myPolicy, function(err, policy, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.setPolicy(myPolicy).then(function(data) {\n     *   const policy = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_add_bucket_iam_member\n     * Example of adding to a bucket's IAM policy:\n     *\n     * @example <caption>include:samples/iam.js</caption>\n     * region_tag:storage_remove_bucket_iam_member\n     * Example of removing from a bucket's IAM policy:\n     */\n\n  }, {\n    key: \"setPolicy\",\n    value: function setPolicy(policy, optionsOrCallback, callback) {\n      if (policy === null || typeof policy !== 'object') {\n        throw new Error('A policy object is required.');\n      }\n\n      var _util_1$normalize2 = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize2.options,\n          cb = _util_1$normalize2.callback;\n\n      this.request_({\n        method: 'PUT',\n        uri: '/iam',\n        json: Object.assign({\n          resourceId: this.resourceId_\n        }, policy),\n        qs: options\n      }, cb);\n    }\n    /**\n     * Test a set of permissions for a resource.\n     *\n     * @throws {Error} If permissions are not provided.\n     *\n     * @param {string|string[]} permissions The permission(s) to test for.\n     * @param {TestIamPermissionsOptions} [options] Configuration object.\n     * @param {TestIamPermissionsCallback} [callback] Callback function.\n     * @returns {Promise<TestIamPermissionsResponse>}\n     *\n     * @see [Buckets: testIamPermissions API Documentation]{@link https://cloud.google.com/storage/docs/json_api/v1/buckets/testIamPermissions}\n     *\n     * @example\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const bucket = storage.bucket('my-bucket');\n     *\n     * //-\n     * // Test a single permission.\n     * //-\n     * const test = 'storage.buckets.delete';\n     *\n     * bucket.iam.testPermissions(test, function(err, permissions, apiResponse) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // Test several permissions at once.\n     * //-\n     * const tests = [\n     *   'storage.buckets.delete',\n     *   'storage.buckets.get'\n     * ];\n     *\n     * bucket.iam.testPermissions(tests, function(err, permissions) {\n     *   console.log(permissions);\n     *   // {\n     *   //   \"storage.buckets.delete\": false,\n     *   //   \"storage.buckets.get\": true\n     *   // }\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * bucket.iam.testPermissions(test).then(function(data) {\n     *   const permissions = data[0];\n     *   const apiResponse = data[1];\n     * });\n     */\n\n  }, {\n    key: \"testPermissions\",\n    value: function testPermissions(permissions, optionsOrCallback, callback) {\n      if (!Array.isArray(permissions) && typeof permissions !== 'string') {\n        throw new Error('Permissions are required.');\n      }\n\n      var _util_1$normalize3 = util_1.normalize(optionsOrCallback, callback),\n          options = _util_1$normalize3.options,\n          cb = _util_1$normalize3.callback;\n\n      var permissionsArray = arrify(permissions);\n      var req = Object.assign({\n        permissions: permissionsArray\n      }, options);\n      this.request_({\n        uri: '/iam/testPermissions',\n        qs: req,\n        useQuerystring: true\n      }, function (err, resp) {\n        if (err) {\n          cb(err, null, resp);\n          return;\n        }\n\n        var availablePermissions = arrify(resp.permissions);\n        var permissionsHash = permissionsArray.reduce(function (acc, permission) {\n          acc[permission] = availablePermissions.indexOf(permission) > -1;\n          return acc;\n        }, {});\n        cb(null, permissionsHash, resp);\n      });\n    }\n  }]);\n\n  return Iam;\n}();\n\nexports.Iam = Iam;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Iam);","map":null,"metadata":{},"sourceType":"script"}