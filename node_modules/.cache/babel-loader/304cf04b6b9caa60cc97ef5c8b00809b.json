{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProjectManagementRequestHandler = exports.assertServerResponse = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar validator = require(\"../utils/validator\");\n\nvar index_1 = require(\"../utils/index\");\n/** Project management backend host and port. */\n\n\nvar PROJECT_MANAGEMENT_HOST_AND_PORT = 'firebase.googleapis.com:443';\n/** Project management backend path. */\n\nvar PROJECT_MANAGEMENT_PATH = '/v1/';\n/** Project management beta backend path. */\n\nvar PROJECT_MANAGEMENT_BETA_PATH = '/v1beta1/';\n/** Project management request header. */\n\nvar PROJECT_MANAGEMENT_HEADERS = {\n  'X-Client-Version': \"Node/Admin/\" + index_1.getSdkVersion()\n};\n/** Project management request timeout duration in milliseconds. */\n\nvar PROJECT_MANAGEMENT_TIMEOUT_MILLIS = 10000;\nvar LIST_APPS_MAX_PAGE_SIZE = 100;\nvar CERT_TYPE_API_MAP = {\n  sha1: 'SHA_1',\n  sha256: 'SHA_256'\n};\n\nfunction assertServerResponse(condition, responseData, message) {\n  if (!condition) {\n    throw new error_1.FirebaseProjectManagementError('invalid-server-response', message + \" Response data: \" + JSON.stringify(responseData, null, 2));\n  }\n}\n\nexports.assertServerResponse = assertServerResponse;\n/**\n * Class that provides mechanism to send requests to the Firebase project management backend\n * endpoints.\n *\n * @private\n */\n\nvar ProjectManagementRequestHandler =\n/** @class */\nfunction () {\n  /**\n   * @param {FirebaseApp} app The app used to fetch access tokens to sign API requests.\n   * @constructor\n   */\n  function ProjectManagementRequestHandler(app) {\n    this.baseUrl = \"https://\" + PROJECT_MANAGEMENT_HOST_AND_PORT + PROJECT_MANAGEMENT_PATH;\n    this.baseBetaUrl = \"https://\" + PROJECT_MANAGEMENT_HOST_AND_PORT + PROJECT_MANAGEMENT_BETA_PATH;\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n\n  ProjectManagementRequestHandler.wrapAndRethrowHttpError = function (errStatusCode, errText) {\n    var errorCode;\n    var errorMessage;\n\n    switch (errStatusCode) {\n      case 400:\n        errorCode = 'invalid-argument';\n        errorMessage = 'Invalid argument provided.';\n        break;\n\n      case 401:\n      case 403:\n        errorCode = 'authentication-error';\n        errorMessage = 'An error occurred when trying to authenticate. Make sure the credential ' + 'used to authenticate this SDK has the proper permissions. See ' + 'https://firebase.google.com/docs/admin/setup for setup instructions.';\n        break;\n\n      case 404:\n        errorCode = 'not-found';\n        errorMessage = 'The specified entity could not be found.';\n        break;\n\n      case 409:\n        errorCode = 'already-exists';\n        errorMessage = 'The specified entity already exists.';\n        break;\n\n      case 500:\n        errorCode = 'internal-error';\n        errorMessage = 'An internal error has occurred. Please retry the request.';\n        break;\n\n      case 503:\n        errorCode = 'service-unavailable';\n        errorMessage = 'The server could not process the request in time. See the error ' + 'documentation for more details.';\n        break;\n\n      default:\n        errorCode = 'unknown-error';\n        errorMessage = 'An unknown server error was returned.';\n    }\n\n    if (!errText) {\n      errText = '<missing>';\n    }\n\n    throw new error_1.FirebaseProjectManagementError(errorCode, errorMessage + \" Status code: \" + errStatusCode + \". Raw server response: \\\"\" + errText + \"\\\".\");\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project whose Android\n   *     apps you want to list.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.listAndroidApps = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \"/androidApps?page_size=\" + LIST_APPS_MAX_PAGE_SIZE,\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project whose iOS apps\n   *     you want to list.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.listIosApps = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \"/iosApps?page_size=\" + LIST_APPS_MAX_PAGE_SIZE,\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project whose iOS apps\n   *     you want to list.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.listAppMetadata = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \":searchApps?page_size=\" + LIST_APPS_MAX_PAGE_SIZE,\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project that you want\n   *     to create the Android app within.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.createAndroidApp = function (parentResourceName, packageName, displayName) {\n    var _this = this;\n\n    var requestData = {\n      packageName: packageName\n    };\n\n    if (validator.isNonEmptyString(displayName)) {\n      requestData.displayName = displayName;\n    }\n\n    return this.invokeRequestHandler('POST', parentResourceName + \"/androidApps\", requestData, 'v1beta1').then(function (responseData) {\n      assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp\\'s responseData must be a non-null object.');\n      assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createAndroidApp\\'s responseData.name must be a non-empty string.');\n      return _this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n    });\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the project that you want\n   *     to create the iOS app within.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.createIosApp = function (parentResourceName, bundleId, displayName) {\n    var _this = this;\n\n    var requestData = {\n      bundleId: bundleId\n    };\n\n    if (validator.isNonEmptyString(displayName)) {\n      requestData.displayName = displayName;\n    }\n\n    return this.invokeRequestHandler('POST', parentResourceName + \"/iosApps\", requestData, 'v1beta1').then(function (responseData) {\n      assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp\\'s responseData must be a non-null object.');\n      assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createIosApp\\'s responseData.name must be a non-empty string.');\n      return _this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n    });\n  };\n  /**\n   * @param {string} resourceName Fully-qualified resource name of the entity whose display name you\n   *     want to set.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.setDisplayName = function (resourceName, newDisplayName) {\n    var requestData = {\n      displayName: newDisplayName\n    };\n    return this.invokeRequestHandler('PATCH', resourceName + \"?update_mask=display_name\", requestData, 'v1beta1').then(function () {\n      return undefined;\n    });\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the Android app whose SHA\n   *     certificates you want to get.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.getAndroidShaCertificates = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \"/sha\",\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the Android app that you\n   *     want to add the given SHA certificate to.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.addAndroidShaCertificate = function (parentResourceName, certificate) {\n    var requestData = {\n      shaHash: certificate.shaHash,\n      certType: CERT_TYPE_API_MAP[certificate.certType]\n    };\n    return this.invokeRequestHandler('POST', parentResourceName + \"/sha\", requestData, 'v1beta1').then(function () {\n      return undefined;\n    });\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the app whose config you\n   *     want to get.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.getConfig = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName + \"/config\",\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} parentResourceName Fully-qualified resource name of the entity that you want to\n   *     get.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.getResource = function (parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName,\n    /* requestData */\n    null, 'v1beta1');\n  };\n  /**\n   * @param {string} resourceName Fully-qualified resource name of the entity that you want to\n   *     delete.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.deleteResource = function (resourceName) {\n    return this.invokeRequestHandler('DELETE', resourceName,\n    /* requestData */\n    null, 'v1beta1').then(function () {\n      return undefined;\n    });\n  };\n\n  ProjectManagementRequestHandler.prototype.pollRemoteOperationWithExponentialBackoff = function (operationResourceName) {\n    var _this = this;\n\n    var poller = new api_request_1.ExponentialBackoffPoller();\n    return poller.poll(function () {\n      return _this.invokeRequestHandler('GET', operationResourceName,\n      /* requestData */\n      null).then(function (responseData) {\n        if (responseData.error) {\n          var errStatusCode = responseData.error.code || 500;\n          var errText = responseData.error.message || JSON.stringify(responseData.error);\n          ProjectManagementRequestHandler.wrapAndRethrowHttpError(errStatusCode, errText);\n        }\n\n        if (!responseData.done) {\n          // Continue polling.\n          return null;\n        } // Polling complete. Resolve with operation response JSON.\n\n\n        return responseData.response;\n      });\n    });\n  };\n  /**\n   * Invokes the request handler with the provided request data.\n   */\n\n\n  ProjectManagementRequestHandler.prototype.invokeRequestHandler = function (method, path, requestData, apiVersion) {\n    if (apiVersion === void 0) {\n      apiVersion = 'v1';\n    }\n\n    var baseUrlToUse = apiVersion === 'v1' ? this.baseUrl : this.baseBetaUrl;\n    var request = {\n      method: method,\n      url: \"\" + baseUrlToUse + path,\n      headers: PROJECT_MANAGEMENT_HEADERS,\n      data: requestData,\n      timeout: PROJECT_MANAGEMENT_TIMEOUT_MILLIS\n    };\n    return this.httpClient.send(request).then(function (response) {\n      // Send non-JSON responses to the catch() below, where they will be treated as errors.\n      if (!response.isJson()) {\n        throw new api_request_1.HttpError(response);\n      }\n\n      return response.data;\n    }).catch(function (err) {\n      if (err instanceof api_request_1.HttpError) {\n        ProjectManagementRequestHandler.wrapAndRethrowHttpError(err.response.status, err.response.text);\n      }\n\n      throw err;\n    });\n  };\n\n  return ProjectManagementRequestHandler;\n}();\n\nexports.ProjectManagementRequestHandler = ProjectManagementRequestHandler;","map":null,"metadata":{},"sourceType":"script"}