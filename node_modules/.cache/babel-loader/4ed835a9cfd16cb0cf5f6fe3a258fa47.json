{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transformMillisecondsToSecondsString = exports.generateUpdateMask = exports.formatString = exports.toWebSafeBase64 = exports.findProjectId = exports.getExplicitProjectId = exports.addReadonlyGetter = exports.renameProperties = exports.getSdkVersion = void 0;\n\nvar credential_internal_1 = require(\"../credential/credential-internal\");\n\nvar validator = require(\"./validator\");\n\nvar sdkVersion;\n\nfunction getSdkVersion() {\n  if (!sdkVersion) {\n    var version = require('../../package.json').version; // eslint-disable-line @typescript-eslint/no-var-requires\n\n\n    sdkVersion = version;\n  }\n\n  return sdkVersion;\n}\n\nexports.getSdkVersion = getSdkVersion;\n/**\n * Renames properties on an object given a mapping from old to new property names.\n *\n * For example, this can be used to map underscore_cased properties to camelCase.\n *\n * @param {object} obj The object whose properties to rename.\n * @param {object} keyMap The mapping from old to new property names.\n */\n\nfunction renameProperties(obj, keyMap) {\n  Object.keys(keyMap).forEach(function (oldKey) {\n    if (oldKey in obj) {\n      var newKey = keyMap[oldKey]; // The old key's value takes precedence over the new key's value.\n\n      obj[newKey] = obj[oldKey];\n      delete obj[oldKey];\n    }\n  });\n}\n\nexports.renameProperties = renameProperties;\n/**\n * Defines a new read-only property directly on an object and returns the object.\n *\n * @param {object} obj The object on which to define the property.\n * @param {string} prop The name of the property to be defined or modified.\n * @param {any} value The value associated with the property.\n */\n\nfunction addReadonlyGetter(obj, prop, value) {\n  Object.defineProperty(obj, prop, {\n    value: value,\n    // Make this property read-only.\n    writable: false,\n    // Include this property during enumeration of obj's properties.\n    enumerable: true\n  });\n}\n\nexports.addReadonlyGetter = addReadonlyGetter;\n/**\n * Returns the Google Cloud project ID associated with a Firebase app, if it's explicitly\n * specified in either the Firebase app options, credentials or the local environment.\n * Otherwise returns null.\n *\n * @param app A Firebase app to get the project ID from.\n *\n * @return A project ID string or null.\n */\n\nfunction getExplicitProjectId(app) {\n  var options = app.options;\n\n  if (validator.isNonEmptyString(options.projectId)) {\n    return options.projectId;\n  }\n\n  var credential = app.options.credential;\n\n  if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n    return credential.projectId;\n  }\n\n  var projectId = process.env.GOOGLE_CLOUD_PROJECT || process.env.GCLOUD_PROJECT;\n\n  if (validator.isNonEmptyString(projectId)) {\n    return projectId;\n  }\n\n  return null;\n}\n\nexports.getExplicitProjectId = getExplicitProjectId;\n/**\n * Determines the Google Cloud project ID associated with a Firebase app. This method\n * first checks if a project ID is explicitly specified in either the Firebase app options,\n * credentials or the local environment in that order. If no explicit project ID is\n * configured, but the SDK has been initialized with ComputeEngineCredentials, this\n * method attempts to discover the project ID from the local metadata service.\n *\n * @param app A Firebase app to get the project ID from.\n *\n * @return A project ID string or null.\n */\n\nfunction findProjectId(app) {\n  var projectId = getExplicitProjectId(app);\n\n  if (projectId) {\n    return Promise.resolve(projectId);\n  }\n\n  var credential = app.options.credential;\n\n  if (credential instanceof credential_internal_1.ComputeEngineCredential) {\n    return credential.getProjectId();\n  }\n\n  return Promise.resolve(null);\n}\n\nexports.findProjectId = findProjectId;\n/**\n * Encodes data using web-safe-base64.\n *\n * @param {Buffer} data The raw data byte input.\n * @return {string} The base64-encoded result.\n */\n\nfunction toWebSafeBase64(data) {\n  return data.toString('base64').replace(/\\//g, '_').replace(/\\+/g, '-');\n}\n\nexports.toWebSafeBase64 = toWebSafeBase64;\n/**\n * Formats a string of form 'project/{projectId}/{api}' and replaces\n * with corresponding arguments {projectId: '1234', api: 'resource'}\n * and returns output: 'project/1234/resource'.\n *\n * @param {string} str The original string where the param need to be\n *     replaced.\n * @param {object=} params The optional parameters to replace in the\n *     string.\n * @return {string} The resulting formatted string.\n */\n\nfunction formatString(str, params) {\n  var formatted = str;\n  Object.keys(params || {}).forEach(function (key) {\n    formatted = formatted.replace(new RegExp('{' + key + '}', 'g'), params[key]);\n  });\n  return formatted;\n}\n\nexports.formatString = formatString;\n/**\n * Generates the update mask for the provided object.\n * Note this will ignore the last key with value undefined.\n *\n * @param obj The object to generate the update mask for.\n * @param terminalPaths The optional map of keys for maximum paths to traverse.\n *      Nested objects beyond that path will be ignored. This is useful for\n *      keys with variable object values.\n * @param root The path so far.\n * @return The computed update mask list.\n */\n\nfunction generateUpdateMask(obj, terminalPaths, root) {\n  if (terminalPaths === void 0) {\n    terminalPaths = [];\n  }\n\n  if (root === void 0) {\n    root = '';\n  }\n\n  var updateMask = [];\n\n  if (!validator.isNonNullObject(obj)) {\n    return updateMask;\n  }\n\n  var _loop_1 = function _loop_1(key) {\n    if (typeof obj[key] !== 'undefined') {\n      var nextPath = root ? root + \".\" + key : key; // We hit maximum path.\n      // Consider switching to Set<string> if the list grows too large.\n\n      if (terminalPaths.indexOf(nextPath) !== -1) {\n        // Add key and stop traversing this branch.\n        updateMask.push(key);\n      } else {\n        var maskList = generateUpdateMask(obj[key], terminalPaths, nextPath);\n\n        if (maskList.length > 0) {\n          maskList.forEach(function (mask) {\n            updateMask.push(key + \".\" + mask);\n          });\n        } else {\n          updateMask.push(key);\n        }\n      }\n    }\n  };\n\n  for (var key in obj) {\n    _loop_1(key);\n  }\n\n  return updateMask;\n}\n\nexports.generateUpdateMask = generateUpdateMask;\n/**\n * Transforms milliseconds to a protobuf Duration type string.\n * Returns the duration in seconds with up to nine fractional\n * digits, terminated by 's'. Example: \"3 seconds 0 nano seconds as 3s,\n * 3 seconds 1 nano seconds as 3.000000001s\".\n *\n * @param milliseconds The duration in milliseconds.\n * @returns The resulting formatted string in seconds with up to nine fractional\n * digits, terminated by 's'.\n */\n\nfunction transformMillisecondsToSecondsString(milliseconds) {\n  var duration;\n  var seconds = Math.floor(milliseconds / 1000);\n  var nanos = Math.floor((milliseconds - seconds * 1000) * 1000000);\n\n  if (nanos > 0) {\n    var nanoString = nanos.toString();\n\n    while (nanoString.length < 9) {\n      nanoString = '0' + nanoString;\n    }\n\n    duration = seconds + \".\" + nanoString + \"s\";\n  } else {\n    duration = seconds + \"s\";\n  }\n\n  return duration;\n}\n\nexports.transformMillisecondsToSecondsString = transformMillisecondsToSecondsString;","map":null,"metadata":{},"sourceType":"script"}