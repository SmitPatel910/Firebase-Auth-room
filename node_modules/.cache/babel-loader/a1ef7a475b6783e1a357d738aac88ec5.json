{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fallback = exports.protobuf = exports.createApiCall = exports.lro = exports.GrpcClient = exports.defaultToObjectOptions = exports.version = exports.routingHeader = void 0;\n\nvar protobuf = require(\"protobufjs\");\n\nexports.protobuf = protobuf;\n\nvar gax = require(\"./gax\");\n\nvar routingHeader = require(\"./routingHeader\");\n\nexports.routingHeader = routingHeader;\n\nvar status_1 = require(\"./status\");\n\nvar google_auth_library_1 = require(\"google-auth-library\");\n\nvar objectHash = require(\"object-hash\");\n\nvar operationsClient_1 = require(\"./operationsClient\");\n\nvar createApiCall_1 = require(\"./createApiCall\");\n\nvar fallbackProto = require(\"./fallbackProto\");\n\nvar fallbackRest = require(\"./fallbackRest\");\n\nvar featureDetection_1 = require(\"./featureDetection\");\n\nvar fallbackServiceStub_1 = require(\"./fallbackServiceStub\");\n\nvar pathTemplate_1 = require(\"./pathTemplate\");\n\nObject.defineProperty(exports, \"PathTemplate\", {\n  enumerable: true,\n  get: function get() {\n    return pathTemplate_1.PathTemplate;\n  }\n});\n\nvar gax_1 = require(\"./gax\");\n\nObject.defineProperty(exports, \"CallSettings\", {\n  enumerable: true,\n  get: function get() {\n    return gax_1.CallSettings;\n  }\n});\nObject.defineProperty(exports, \"constructSettings\", {\n  enumerable: true,\n  get: function get() {\n    return gax_1.constructSettings;\n  }\n});\nObject.defineProperty(exports, \"RetryOptions\", {\n  enumerable: true,\n  get: function get() {\n    return gax_1.RetryOptions;\n  }\n});\nexports.version = require('../../package.json').version + '-fallback';\n\nvar descriptor_1 = require(\"./descriptor\");\n\nObject.defineProperty(exports, \"BundleDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.BundleDescriptor;\n  }\n});\nObject.defineProperty(exports, \"LongrunningDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.LongrunningDescriptor;\n  }\n});\nObject.defineProperty(exports, \"PageDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.PageDescriptor;\n  }\n});\nObject.defineProperty(exports, \"StreamDescriptor\", {\n  enumerable: true,\n  get: function get() {\n    return descriptor_1.StreamDescriptor;\n  }\n});\n\nvar streaming_1 = require(\"./streamingCalls/streaming\");\n\nObject.defineProperty(exports, \"StreamType\", {\n  enumerable: true,\n  get: function get() {\n    return streaming_1.StreamType;\n  }\n});\nexports.defaultToObjectOptions = {\n  keepCase: false,\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: true\n};\nvar CLIENT_VERSION_HEADER = 'x-goog-api-client';\n\nvar GrpcClient = /*#__PURE__*/function () {\n  /**\n   * gRPC-fallback version of GrpcClient\n   * Implements GrpcClient API for a browser using grpc-fallback protocol (sends serialized protobuf to HTTP/1 $rpc endpoint).\n   *\n   * @param {Object=} options.auth - An instance of OAuth2Client to use in browser, or an instance of GoogleAuth from google-auth-library\n   *  to use in Node.js. Required for browser, optional for Node.js.\n   * @constructor\n   */\n  function GrpcClient() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, GrpcClient);\n\n    if (!featureDetection_1.isNodeJS()) {\n      if (!options.auth) {\n        throw new Error(JSON.stringify(options) + 'You need to pass auth instance to use gRPC-fallback client in browser or other non-Node.js environments. Use OAuth2Client from google-auth-library.');\n      }\n\n      this.auth = options.auth;\n    } else {\n      this.auth = options.auth || new google_auth_library_1.GoogleAuth(options);\n    }\n\n    this.fallback = options.fallback !== 'rest' ? 'proto' : 'rest';\n    this.grpcVersion = require('../../package.json').version;\n  }\n  /**\n   * In rare cases users might need to deallocate all memory consumed by loaded protos.\n   * This method will delete the proto cache content.\n   */\n\n\n  _createClass(GrpcClient, [{\n    key: \"loadProto\",\n\n    /**\n     * gRPC-fallback version of loadProto\n     * Loads the protobuf root object from a JSON object created from a proto file\n     * @param {Object} jsonObject - A JSON version of a protofile created usin protobuf.js\n     * @returns {Object} Root namespace of proto JSON\n     */\n    value: function loadProto(jsonObject) {\n      var rootObject = protobuf.Root.fromJSON(jsonObject);\n      return rootObject;\n    }\n  }, {\n    key: \"loadProtoJSON\",\n    value: function loadProtoJSON(json) {\n      var ignoreCache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var hash = objectHash(json);\n      var cached = GrpcClient.protoCache.get(hash);\n\n      if (cached && !ignoreCache) {\n        return cached;\n      }\n\n      var root = protobuf.Root.fromJSON(json);\n      GrpcClient.protoCache.set(hash, root);\n      return root;\n    }\n  }, {\n    key: \"constructSettings\",\n\n    /**\n     * gRPC-fallback version of constructSettings\n     * A wrapper of {@link constructSettings} function under the gRPC context.\n     *\n     * Most of parameters are common among constructSettings, please take a look.\n     * @param {string} serviceName - The fullly-qualified name of the service.\n     * @param {Object} clientConfig - A dictionary of the client config.\n     * @param {Object} configOverrides - A dictionary of overriding configs.\n     * @param {Object} headers - A dictionary of additional HTTP header name to\n     *   its value.\n     * @return {Object} A mapping of method names to CallSettings.\n     */\n    value: function constructSettings(serviceName, clientConfig, configOverrides, headers) {\n      function buildMetadata(abTests, moreHeaders) {\n        var metadata = {};\n\n        if (!headers) {\n          headers = {};\n        } // Since gRPC expects each header to be an array,\n        // we are doing the same for fallback here.\n\n\n        for (var key in headers) {\n          metadata[key] = Array.isArray(headers[key]) ? headers[key] : [headers[key]];\n        } // gRPC-fallback request must have 'grpc-web/' in 'x-goog-api-client'\n\n\n        var clientVersions = [];\n\n        if (metadata[CLIENT_VERSION_HEADER] && metadata[CLIENT_VERSION_HEADER][0]) {\n          clientVersions.push.apply(clientVersions, _toConsumableArray(metadata[CLIENT_VERSION_HEADER][0].split(' ')));\n        }\n\n        clientVersions.push(\"grpc-web/\".concat(exports.version));\n        metadata[CLIENT_VERSION_HEADER] = [clientVersions.join(' ')];\n\n        if (!moreHeaders) {\n          return metadata;\n        }\n\n        for (var _key in moreHeaders) {\n          if (_key.toLowerCase() !== CLIENT_VERSION_HEADER) {\n            var value = moreHeaders[_key];\n\n            if (Array.isArray(value)) {\n              if (metadata[_key] === undefined) {\n                metadata[_key] = value;\n              } else {\n                if (Array.isArray(metadata[_key])) {\n                  var _metadata$_key;\n\n                  (_metadata$_key = metadata[_key]).push.apply(_metadata$_key, _toConsumableArray(value));\n                } else {\n                  throw new Error(\"Can not add value \".concat(value, \" to the call metadata.\"));\n                }\n              }\n            } else {\n              metadata[_key] = [value];\n            }\n          }\n        }\n\n        return metadata;\n      }\n\n      return gax.constructSettings(serviceName, clientConfig, configOverrides, status_1.Status, {\n        metadataBuilder: buildMetadata\n      });\n    }\n    /**\n     * gRPC-fallback version of createStub\n     * Creates a gRPC-fallback stub with authentication headers built from supplied OAuth2Client instance\n     *\n     * @param {function} CreateStub - The constructor function of the stub.\n     * @param {Object} service - A protobufjs Service object (as returned by lookupService)\n     * @param {Object} opts - Connection options, as described below.\n     * @param {string} opts.servicePath - The hostname of the API endpoint service.\n     * @param {number} opts.port - The port of the service.\n     * @return {Promise} A promise which resolves to a gRPC-fallback service stub, which is a protobuf.js service stub instance modified to match the gRPC stub API\n     */\n\n  }, {\n    key: \"createStub\",\n    value: function () {\n      var _createStub = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(service, opts, // For consistency with createStub in grpc.ts, customServicePath is defined:\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      customServicePath) {\n        var methods, protocol, servicePath, servicePort, match, encoder, decoder, serviceStub;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.authClient) {\n                  _context.next = 8;\n                  break;\n                }\n\n                if (!(this.auth && 'getClient' in this.auth)) {\n                  _context.next = 7;\n                  break;\n                }\n\n                _context.next = 4;\n                return this.auth.getClient();\n\n              case 4:\n                this.authClient = _context.sent;\n                _context.next = 8;\n                break;\n\n              case 7:\n                if (this.auth && 'getRequestHeaders' in this.auth) {\n                  this.authClient = this.auth;\n                }\n\n              case 8:\n                if (this.authClient) {\n                  _context.next = 10;\n                  break;\n                }\n\n                throw new Error('No authentication was provided');\n\n              case 10:\n                service.resolveAll();\n                methods = GrpcClient.getServiceMethods(service);\n                protocol = opts.protocol || 'https';\n                servicePath = opts.servicePath;\n\n                if (!servicePath && service.options && service.options['(google.api.default_host)']) {\n                  servicePath = service.options['(google.api.default_host)'];\n                }\n\n                if (servicePath) {\n                  _context.next = 17;\n                  break;\n                }\n\n                throw new Error(\"Cannot determine service API path for service \".concat(service.name, \".\"));\n\n              case 17:\n                match = servicePath.match(/^(.*):(\\d+)$/);\n\n                if (match) {\n                  servicePath = match[1];\n                  servicePort = parseInt(match[2]);\n                }\n\n                if (opts.port) {\n                  servicePort = opts.port;\n                } else if (!servicePort) {\n                  servicePort = 443;\n                }\n\n                encoder = this.fallback === 'rest' ? fallbackRest.encodeRequest : fallbackProto.encodeRequest;\n                decoder = this.fallback === 'rest' ? fallbackRest.decodeResponse : fallbackProto.decodeResponse;\n                serviceStub = fallbackServiceStub_1.generateServiceStub(methods, protocol, servicePath, servicePort, this.authClient, encoder, decoder);\n                return _context.abrupt(\"return\", serviceStub);\n\n              case 24:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function createStub(_x, _x2, _x3) {\n        return _createStub.apply(this, arguments);\n      }\n\n      return createStub;\n    }()\n  }], [{\n    key: \"clearProtoCache\",\n    value: function clearProtoCache() {\n      GrpcClient.protoCache.clear();\n    }\n  }, {\n    key: \"getServiceMethods\",\n    value: function getServiceMethods(service) {\n      var methods = {};\n\n      for (var _i = 0, _Object$entries = Object.entries(service.methods); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            methodName = _Object$entries$_i[0],\n            methodObject = _Object$entries$_i[1];\n\n        var methodNameLowerCamelCase = methodName[0].toLowerCase() + methodName.substring(1);\n        methods[methodNameLowerCamelCase] = methodObject;\n      }\n\n      return methods;\n    }\n  }]);\n\n  return GrpcClient;\n}();\n\nexports.GrpcClient = GrpcClient;\nGrpcClient.protoCache = new Map();\n/**\n * gRPC-fallback version of lro\n *\n * @param {Object=} options.auth - An instance of google-auth-library.\n * @return {Object} A OperationsClientBuilder that will return a OperationsClient\n */\n\nfunction lro(options) {\n  options = Object.assign({\n    scopes: []\n  }, options);\n  var gaxGrpc = new GrpcClient(options);\n  return new operationsClient_1.OperationsClientBuilder(gaxGrpc);\n}\n\nexports.lro = lro;\n/**\n * gRPC-fallback version of createApiCall\n *\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * Throws exception on unsupported streaming calls\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\n\nfunction createApiCall(func, settings, descriptor) {\n  if (descriptor && 'streaming' in descriptor) {\n    return function () {\n      throw new Error('The gRPC-fallback client library (e.g. browser version of the library) currently does not support streaming calls.');\n    };\n  }\n\n  return createApiCall_1.createApiCall(func, settings, descriptor);\n}\n\nexports.createApiCall = createApiCall;\nexports.protobufMinimal = require(\"protobufjs/minimal\"); // Different environments or bundlers may or may not respect \"browser\" field\n// in package.json (e.g. Electron does not respect it, but if you run the code\n// through webpack first, it will follow the \"browser\" field).\n// To make it safer and more compatible, let's make sure that if you do\n// const gax = require(\"google-gax\");\n// you can always ask for gax.fallback, regardless of \"browser\" field being\n// understood or not.\n\nvar fallback = module.exports;\nexports.fallback = fallback;","map":null,"metadata":{},"sourceType":"script"}