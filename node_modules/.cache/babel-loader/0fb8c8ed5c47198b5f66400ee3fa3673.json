{"ast":null,"code":"var _objectSpread = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _require = require('crypto'),\n    randomBytes = _require.randomBytes;\n\nvar base64url = require('./base64url');\n\nvar errors = require('../errors');\n\nvar ZERO = BigInt(0);\nvar ONE = BigInt(1);\nvar TWO = BigInt(2);\n\nvar toJWKParameter = function toJWKParameter(n) {\n  var hex = n.toString(16);\n  return base64url.encodeBuffer(Buffer.from(hex.length % 2 ? \"0\".concat(hex) : hex, 'hex'));\n};\n\nvar fromBuffer = function fromBuffer(buf) {\n  return BigInt(\"0x\".concat(buf.toString('hex')));\n};\n\nvar bitLength = function bitLength(n) {\n  return n.toString(2).length;\n};\n\nvar eGcdX = function eGcdX(a, b) {\n  var x = ZERO;\n  var y = ONE;\n  var u = ONE;\n  var v = ZERO;\n\n  while (a !== ZERO) {\n    var q = b / a;\n    var r = b % a;\n    var m = x - u * q;\n    var n = y - v * q;\n    b = a;\n    a = r;\n    x = u;\n    y = v;\n    u = m;\n    v = n;\n  }\n\n  return x;\n};\n\nvar gcd = function gcd(a, b) {\n  var shift = ZERO;\n\n  while (!((a | b) & ONE)) {\n    a >>= ONE;\n    b >>= ONE;\n    shift++;\n  }\n\n  while (!(a & ONE)) {\n    a >>= ONE;\n  }\n\n  do {\n    while (!(b & ONE)) {\n      b >>= ONE;\n    }\n\n    if (a > b) {\n      var x = a;\n      a = b;\n      b = x;\n    }\n\n    b -= a;\n  } while (b);\n\n  return a << shift;\n};\n\nvar modPow = function modPow(a, b, n) {\n  a = toZn(a, n);\n  var result = ONE;\n  var x = a;\n\n  while (b > 0) {\n    var leastSignificantBit = b % TWO;\n    b = b / TWO;\n\n    if (leastSignificantBit === ONE) {\n      result = result * x;\n      result = result % n;\n    }\n\n    x = x * x;\n    x = x % n;\n  }\n\n  return result;\n};\n\nvar randBetween = function randBetween(min, max) {\n  var interval = max - min;\n  var bitLen = bitLength(interval);\n  var rnd;\n\n  do {\n    rnd = fromBuffer(randBits(bitLen));\n  } while (rnd > interval);\n\n  return rnd + min;\n};\n\nvar randBits = function randBits(bitLength) {\n  var byteLength = Math.ceil(bitLength / 8);\n  var rndBytes = randomBytes(byteLength); // Fill with 0's the extra bits\n\n  rndBytes[0] = rndBytes[0] & Math.pow(2, bitLength % 8) - 1;\n  return rndBytes;\n};\n\nvar toZn = function toZn(a, n) {\n  a = a % n;\n  return a < 0 ? a + n : a;\n};\n\nvar odd = function odd(n) {\n  var r = n;\n\n  while (r % TWO === ZERO) {\n    r = r / TWO;\n  }\n\n  return r;\n}; // not sold on these values\n\n\nvar maxCountWhileNoY = 30;\nvar maxCountWhileInot0 = 22;\n\nvar getPrimeFactors = function getPrimeFactors(e, d, n) {\n  var r = odd(e * d - ONE);\n  var countWhileNoY = 0;\n  var y;\n\n  do {\n    countWhileNoY++;\n\n    if (countWhileNoY === maxCountWhileNoY) {\n      throw new errors.JWKImportFailed('failed to calculate missing primes');\n    }\n\n    var countWhileInot0 = 0;\n    var i = modPow(randBetween(TWO, n), r, n);\n    var o = ZERO;\n\n    while (i !== ONE) {\n      countWhileInot0++;\n\n      if (countWhileInot0 === maxCountWhileInot0) {\n        throw new errors.JWKImportFailed('failed to calculate missing primes');\n      }\n\n      o = i;\n      i = i * i % n;\n    }\n\n    if (o !== n - ONE) {\n      y = o;\n    }\n  } while (!y);\n\n  var p = gcd(y - ONE, n);\n  var q = n / p;\n  return p > q ? {\n    p: p,\n    q: q\n  } : {\n    p: q,\n    q: p\n  };\n};\n\nmodule.exports = function (jwk) {\n  var e = fromBuffer(base64url.decodeToBuffer(jwk.e));\n  var d = fromBuffer(base64url.decodeToBuffer(jwk.d));\n  var n = fromBuffer(base64url.decodeToBuffer(jwk.n));\n\n  if (d >= n) {\n    throw new errors.JWKInvalid('invalid RSA private exponent');\n  }\n\n  var _getPrimeFactors = getPrimeFactors(e, d, n),\n      p = _getPrimeFactors.p,\n      q = _getPrimeFactors.q;\n\n  var dp = d % (p - ONE);\n  var dq = d % (q - ONE);\n  var qi = toZn(eGcdX(toZn(q, p), p), p);\n  return _objectSpread({}, jwk, {\n    p: toJWKParameter(p),\n    q: toJWKParameter(q),\n    dp: toJWKParameter(dp),\n    dq: toJWKParameter(dq),\n    qi: toJWKParameter(qi)\n  });\n};","map":null,"metadata":{},"sourceType":"script"}