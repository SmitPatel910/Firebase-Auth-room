{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar validate_1 = require(\"./validate\");\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as a latitude/longitude pair.\n *\n * @class\n */\n\n\nvar GeoPoint = /*#__PURE__*/function () {\n  /**\n   * Creates a [GeoPoint]{@link GeoPoint}.\n   *\n   * @param {number} latitude The latitude as a number between -90 and 90.\n   * @param {number} longitude The longitude as a number between -180 and 180.\n   *\n   * @example\n   * let data = {\n   *   google: new Firestore.GeoPoint(37.422, 122.084)\n   * };\n   *\n   * firestore.doc('col/doc').set(data).then(() => {\n   *   console.log(`Location is ${data.google.latitude}, ` +\n   *     `${data.google.longitude}`);\n   * });\n   */\n  function GeoPoint(latitude, longitude) {\n    _classCallCheck(this, GeoPoint);\n\n    validate_1.validateNumber('latitude', latitude, {\n      minValue: -90,\n      maxValue: 90\n    });\n    validate_1.validateNumber('longitude', longitude, {\n      minValue: -180,\n      maxValue: 180\n    });\n    this._latitude = latitude;\n    this._longitude = longitude;\n  }\n  /**\n   * The latitude as a number between -90 and 90.\n   *\n   * @type {number}\n   * @name GeoPoint#latitude\n   * @readonly\n   */\n\n\n  _createClass(GeoPoint, [{\n    key: \"isEqual\",\n\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided value.\n     *\n     * @param {*} other The value to compare against.\n     * @return {boolean} true if this `GeoPoint` is equal to the provided value.\n     */\n    value: function isEqual(other) {\n      return this === other || other instanceof GeoPoint && this.latitude === other.latitude && this.longitude === other.longitude;\n    }\n    /**\n     * Converts the GeoPoint to a google.type.LatLng proto.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"toProto\",\n    value: function toProto() {\n      return {\n        geoPointValue: {\n          latitude: this.latitude,\n          longitude: this.longitude\n        }\n      };\n    }\n    /**\n     * Converts a google.type.LatLng proto to its GeoPoint representation.\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"latitude\",\n    get: function get() {\n      return this._latitude;\n    }\n    /**\n     * The longitude as a number between -180 and 180.\n     *\n     * @type {number}\n     * @name GeoPoint#longitude\n     * @readonly\n     */\n\n  }, {\n    key: \"longitude\",\n    get: function get() {\n      return this._longitude;\n    }\n  }], [{\n    key: \"fromProto\",\n    value: function fromProto(proto) {\n      return new GeoPoint(proto.latitude || 0, proto.longitude || 0);\n    }\n  }]);\n\n  return GeoPoint;\n}();\n\nexports.GeoPoint = GeoPoint;","map":null,"metadata":{},"sourceType":"script"}