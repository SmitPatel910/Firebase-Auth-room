{"ast":null,"code":"var TokenBucket = require('./tokenBucket');\n\nvar getMilliseconds = require('./clock');\n/**\r\n * A generic rate limiter. Underneath the hood, this uses a token bucket plus\r\n * an additional check to limit how many tokens we can remove each interval.\r\n * @author John Hurliman <jhurliman@jhurliman.org>\r\n *\r\n * @param {Number} tokensPerInterval Maximum number of tokens that can be\r\n *  removed at any given moment and over the course of one interval.\r\n * @param {String|Number} interval The interval length in milliseconds, or as\r\n *  one of the following strings: 'second', 'minute', 'hour', day'.\r\n * @param {Boolean} fireImmediately Optional. Whether or not the callback\r\n *  will fire immediately when rate limiting is in effect (default is false).\r\n */\n\n\nvar RateLimiter = function RateLimiter(tokensPerInterval, interval, fireImmediately) {\n  this.tokenBucket = new TokenBucket(tokensPerInterval, tokensPerInterval, interval, null); // Fill the token bucket to start\n\n  this.tokenBucket.content = tokensPerInterval;\n  this.curIntervalStart = getMilliseconds();\n  this.tokensThisInterval = 0;\n  this.fireImmediately = fireImmediately;\n};\n\nRateLimiter.prototype = {\n  tokenBucket: null,\n  curIntervalStart: 0,\n  tokensThisInterval: 0,\n  fireImmediately: false,\n\n  /**\r\n   * Remove the requested number of tokens and fire the given callback. If the\r\n   * rate limiter contains enough tokens and we haven't spent too many tokens\r\n   * in this interval already, this will happen immediately. Otherwise, the\r\n   * removal and callback will happen when enough tokens become available.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Function} callback(err, remainingTokens)\r\n   * @returns {Boolean} True if the callback was fired immediately, otherwise\r\n   *  false.\r\n   */\n  removeTokens: function removeTokens(count, callback) {\n    // Make sure the request isn't for more than we can handle\n    if (count > this.tokenBucket.bucketSize) {\n      process.nextTick(callback.bind(null, 'Requested tokens ' + count + ' exceeds maximum tokens per interval ' + this.tokenBucket.bucketSize, null));\n      return false;\n    }\n\n    var self = this;\n    var now = getMilliseconds(); // Advance the current interval and reset the current interval token count\n    // if needed\n\n    if (now < this.curIntervalStart || now - this.curIntervalStart >= this.tokenBucket.interval) {\n      this.curIntervalStart = now;\n      this.tokensThisInterval = 0;\n    } // If we don't have enough tokens left in this interval, wait until the\n    // next interval\n\n\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) {\n      if (this.fireImmediately) {\n        process.nextTick(callback.bind(null, null, -1));\n      } else {\n        var waitInterval = Math.ceil(this.curIntervalStart + this.tokenBucket.interval - now);\n        setTimeout(function () {\n          self.tokenBucket.removeTokens(count, afterTokensRemoved);\n        }, waitInterval);\n      }\n\n      return false;\n    } // Remove the requested number of tokens from the token bucket\n\n\n    return this.tokenBucket.removeTokens(count, afterTokensRemoved);\n\n    function afterTokensRemoved(err, tokensRemaining) {\n      if (err) return callback(err, null);\n      self.tokensThisInterval += count;\n      callback(null, tokensRemaining);\n    }\n  },\n\n  /**\r\n   * Attempt to remove the requested number of tokens and return immediately.\r\n   * If the bucket (and any parent buckets) contains enough tokens and we\r\n   * haven't spent too many tokens in this interval already, this will return\r\n   * true. Otherwise, false is returned.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Boolean} True if the tokens were successfully removed, otherwise\r\n   *  false.\r\n   */\n  tryRemoveTokens: function tryRemoveTokens(count) {\n    // Make sure the request isn't for more than we can handle\n    if (count > this.tokenBucket.bucketSize) return false;\n    var now = getMilliseconds(); // Advance the current interval and reset the current interval token count\n    // if needed\n\n    if (now < this.curIntervalStart || now - this.curIntervalStart >= this.tokenBucket.interval) {\n      this.curIntervalStart = now;\n      this.tokensThisInterval = 0;\n    } // If we don't have enough tokens left in this interval, return false\n\n\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) return false; // Try to remove the requested number of tokens from the token bucket\n\n    var removed = this.tokenBucket.tryRemoveTokens(count);\n\n    if (removed) {\n      this.tokensThisInterval += count;\n    }\n\n    return removed;\n  },\n\n  /**\r\n   * Returns the number of tokens remaining in the TokenBucket.\r\n   * @returns {Number} The number of tokens remaining.\r\n   */\n  getTokensRemaining: function getTokensRemaining() {\n    this.tokenBucket.drip();\n    return this.tokenBucket.content;\n  }\n};\nmodule.exports = RateLimiter;","map":null,"metadata":{},"sourceType":"script"}