{"ast":null,"code":"var _slicedToArray = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nvar _require = require('zlib'),\n    deflateRawSync = _require.deflateRawSync;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar generateIV = require('../help/generate_iv');\n\nvar base64url = require('../help/base64url');\n\nvar getKey = require('../help/get_key');\n\nvar isObject = require('../help/is_object');\n\nvar _require3 = require('../help/key_object'),\n    createSecretKey = _require3.createSecretKey;\n\nvar deepClone = require('../help/deep_clone');\n\nvar importKey = require('../jwk/import');\n\nvar _require4 = require('../errors'),\n    JWEInvalid = _require4.JWEInvalid;\n\nvar _require5 = require('../jwa'),\n    check = _require5.check,\n    keyManagementEncrypt = _require5.keyManagementEncrypt,\n    _encrypt = _require5.encrypt;\n\nvar serializers = require('./serializers');\n\nvar generateCEK = require('./generate_cek');\n\nvar validateHeaders = require('./validate_headers');\n\nvar PROCESS_RECIPIENT = Symbol('PROCESS_RECIPIENT');\n\nvar Encrypt = /*#__PURE__*/function () {\n  \"use strict\";\n\n  function Encrypt(cleartext, protectedHeader, aad, unprotectedHeader) {\n    _classCallCheck(this, Encrypt);\n\n    if (!Buffer.isBuffer(cleartext) && typeof cleartext !== 'string') {\n      throw new TypeError('cleartext argument must be a Buffer or a string');\n    }\n\n    cleartext = Buffer.from(cleartext);\n\n    if (aad !== undefined && !Buffer.isBuffer(aad) && typeof aad !== 'string') {\n      throw new TypeError('aad argument must be a Buffer or a string when provided');\n    }\n\n    aad = aad ? Buffer.from(aad) : undefined;\n\n    if (protectedHeader !== undefined && !isObject(protectedHeader)) {\n      throw new TypeError('protectedHeader argument must be a plain object when provided');\n    }\n\n    if (unprotectedHeader !== undefined && !isObject(unprotectedHeader)) {\n      throw new TypeError('unprotectedHeader argument must be a plain object when provided');\n    }\n\n    this._recipients = [];\n    this._cleartext = cleartext;\n    this._aad = aad;\n    this._unprotected = unprotectedHeader ? deepClone(unprotectedHeader) : undefined;\n    this._protected = protectedHeader ? deepClone(protectedHeader) : undefined;\n  }\n  /*\n   * @public\n   */\n\n\n  _createClass(Encrypt, [{\n    key: \"recipient\",\n    value: function recipient(key, header) {\n      key = getKey(key);\n\n      if (header !== undefined && !isObject(header)) {\n        throw new TypeError('header argument must be a plain object when provided');\n      }\n\n      this._recipients.push({\n        key: key,\n        header: header ? deepClone(header) : undefined\n      });\n\n      return this;\n    }\n    /*\n     * @private\n     */\n\n  }, {\n    key: PROCESS_RECIPIENT,\n    value: function value(recipient) {\n      var unprotectedHeader = this._unprotected;\n      var protectedHeader = this._protected;\n      var recipientCount = this._recipients.length;\n\n      var jweHeader = _objectSpread({}, protectedHeader, unprotectedHeader, recipient.header);\n\n      var key = recipient.key;\n      var enc = jweHeader.enc;\n      var alg = jweHeader.alg;\n\n      if (key.use === 'sig') {\n        throw new TypeError('a key with \"use\":\"sig\" is not usable for encryption');\n      }\n\n      if (alg === 'dir') {\n        check(key, 'encrypt', enc);\n      } else if (alg) {\n        check(key, 'keyManagementEncrypt', alg);\n      } else {\n        alg = key.alg || _toConsumableArray(key.algorithms('wrapKey'))[0] || _toConsumableArray(key.algorithms('deriveKey'))[0];\n\n        if (alg === 'ECDH-ES' && recipientCount !== 1) {\n          alg = _toConsumableArray(key.algorithms('deriveKey'))[1];\n        }\n\n        if (!alg) {\n          throw new JWEInvalid('could not resolve a usable \"alg\" for a recipient');\n        }\n\n        if (recipientCount === 1) {\n          if (protectedHeader) {\n            protectedHeader.alg = alg;\n          } else {\n            this._protected = {\n              alg: alg\n            };\n          }\n        } else {\n          if (recipient.header) {\n            recipient.header.alg = alg;\n          } else {\n            recipient.header = {\n              alg: alg\n            };\n          }\n        }\n      }\n\n      var wrapped;\n      var generatedHeader;\n\n      if (key.kty === 'oct' && alg === 'dir') {\n        this._cek = importKey(key[KEYOBJECT], {\n          use: 'enc',\n          alg: enc\n        });\n      } else {\n        check(this._cek, 'encrypt', enc);\n\n        var _keyManagementEncrypt = keyManagementEncrypt(alg, key, this._cek[KEYOBJECT].export(), {\n          enc: enc,\n          alg: alg\n        });\n\n        wrapped = _keyManagementEncrypt.wrapped;\n        generatedHeader = _keyManagementEncrypt.header;\n\n        if (alg === 'ECDH-ES') {\n          this._cek = importKey(createSecretKey(wrapped), {\n            use: 'enc',\n            alg: enc\n          });\n        }\n      }\n\n      if (alg === 'dir' || alg === 'ECDH-ES') {\n        recipient.encrypted_key = '';\n      } else {\n        recipient.encrypted_key = base64url.encodeBuffer(wrapped);\n      }\n\n      if (generatedHeader) {\n        recipient.generatedHeader = generatedHeader;\n      }\n    }\n    /*\n     * @public\n     */\n\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(serialization) {\n      var serializer = serializers[serialization];\n\n      if (!serializer) {\n        throw new TypeError('serialization must be one of \"compact\", \"flattened\", \"general\"');\n      }\n\n      if (!this._recipients.length) {\n        throw new JWEInvalid('missing recipients');\n      }\n\n      serializer.validate(this._protected, this._unprotected, this._aad, this._recipients);\n      var enc = validateHeaders(this._protected, this._unprotected, this._recipients, false, this._protected ? this._protected.crit : undefined);\n\n      if (!enc) {\n        enc = 'A128CBC-HS256';\n\n        if (this._protected) {\n          this._protected.enc = enc;\n        } else {\n          this._protected = {\n            enc: enc\n          };\n        }\n      }\n\n      var final = {};\n      this._cek = generateCEK(enc);\n\n      var _iterator = _createForOfIteratorHelper(this._recipients),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var recipient = _step.value;\n          this[PROCESS_RECIPIENT](recipient);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var iv = generateIV(enc);\n      final.iv = base64url.encodeBuffer(iv);\n\n      if (this._recipients.length === 1 && this._recipients[0].generatedHeader) {\n        var _this$_recipients = _slicedToArray(this._recipients, 1),\n            generatedHeader = _this$_recipients[0].generatedHeader;\n\n        delete this._recipients[0].generatedHeader;\n        this._protected = _objectSpread({}, this._protected, generatedHeader);\n      }\n\n      if (this._protected) {\n        final.protected = base64url.JSON.encode(this._protected);\n      }\n\n      final.unprotected = this._unprotected;\n      var aad;\n\n      if (this._aad) {\n        final.aad = base64url.encode(this._aad);\n        aad = Buffer.concat([Buffer.from(final.protected || ''), Buffer.from('.'), Buffer.from(final.aad)]);\n      } else {\n        aad = Buffer.from(final.protected || '');\n      }\n\n      var cleartext = this._cleartext;\n\n      if (this._protected && 'zip' in this._protected) {\n        cleartext = deflateRawSync(cleartext);\n      }\n\n      var _encrypt2 = _encrypt(enc, this._cek, cleartext, {\n        iv: iv,\n        aad: aad\n      }),\n          ciphertext = _encrypt2.ciphertext,\n          tag = _encrypt2.tag;\n\n      final.tag = base64url.encodeBuffer(tag);\n      final.ciphertext = base64url.encodeBuffer(ciphertext);\n      return serializer(final, this._recipients);\n    }\n  }]);\n\n  return Encrypt;\n}();\n\nmodule.exports = Encrypt;","map":null,"metadata":{},"sourceType":"script"}