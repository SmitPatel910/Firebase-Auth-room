{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.handleCryptoSignerError = exports.FirebaseTokenGenerator = exports.EmulatedSigner = exports.BLACKLISTED_CLAIMS = void 0;\n\nvar error_1 = require(\"../utils/error\");\n\nvar crypto_signer_1 = require(\"../utils/crypto-signer\");\n\nvar validator = require(\"../utils/validator\");\n\nvar utils_1 = require(\"../utils\");\n\nvar ALGORITHM_NONE = 'none';\nvar ONE_HOUR_IN_SECONDS = 60 * 60; // List of blacklisted claims which cannot be provided when creating a custom token\n\nexports.BLACKLISTED_CLAIMS = ['acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti', 'nbf', 'nonce']; // Audience to use for Firebase Auth Custom tokens\n\nvar FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n/**\n * A CryptoSigner implementation that is used when communicating with the Auth emulator.\n * It produces unsigned tokens.\n */\n\nvar EmulatedSigner =\n/** @class */\nfunction () {\n  function EmulatedSigner() {\n    this.algorithm = ALGORITHM_NONE;\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  EmulatedSigner.prototype.sign = function (buffer) {\n    return Promise.resolve(Buffer.from(''));\n  };\n  /**\n   * @inheritDoc\n   */\n\n\n  EmulatedSigner.prototype.getAccountId = function () {\n    return Promise.resolve('firebase-auth-emulator@example.com');\n  };\n\n  return EmulatedSigner;\n}();\n\nexports.EmulatedSigner = EmulatedSigner;\n/**\n * Class for generating different types of Firebase Auth tokens (JWTs).\n */\n\nvar FirebaseTokenGenerator =\n/** @class */\nfunction () {\n  /**\n   * @param tenantId The tenant ID to use for the generated Firebase Auth\n   *     Custom token. If absent, then no tenant ID claim will be set in the\n   *     resulting JWT.\n   */\n  function FirebaseTokenGenerator(signer, tenantId) {\n    this.tenantId = tenantId;\n\n    if (!validator.isNonNullObject(signer)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'INTERNAL ASSERT: Must provide a CryptoSigner to use FirebaseTokenGenerator.');\n    }\n\n    if (typeof this.tenantId !== 'undefined' && !validator.isNonEmptyString(this.tenantId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '`tenantId` argument must be a non-empty string.');\n    }\n\n    this.signer = signer;\n  }\n  /**\n   * Creates a new Firebase Auth Custom token.\n   *\n   * @param uid The user ID to use for the generated Firebase Auth Custom token.\n   * @param developerClaims Optional developer claims to include in the generated Firebase\n   *     Auth Custom token.\n   * @return A Promise fulfilled with a Firebase Auth Custom token signed with a\n   *     service account key and containing the provided payload.\n   */\n\n\n  FirebaseTokenGenerator.prototype.createCustomToken = function (uid, developerClaims) {\n    var _this = this;\n\n    var errorMessage;\n\n    if (!validator.isNonEmptyString(uid)) {\n      errorMessage = '`uid` argument must be a non-empty string uid.';\n    } else if (uid.length > 128) {\n      errorMessage = '`uid` argument must a uid with less than or equal to 128 characters.';\n    } else if (!this.isDeveloperClaimsValid_(developerClaims)) {\n      errorMessage = '`developerClaims` argument must be a valid, non-null object containing the developer claims.';\n    }\n\n    if (errorMessage) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n\n    var claims = {};\n\n    if (typeof developerClaims !== 'undefined') {\n      for (var key in developerClaims) {\n        /* istanbul ignore else */\n        if (Object.prototype.hasOwnProperty.call(developerClaims, key)) {\n          if (exports.BLACKLISTED_CLAIMS.indexOf(key) !== -1) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"Developer claim \\\"\" + key + \"\\\" is reserved and cannot be specified.\");\n          }\n\n          claims[key] = developerClaims[key];\n        }\n      }\n    }\n\n    return this.signer.getAccountId().then(function (account) {\n      var header = {\n        alg: _this.signer.algorithm,\n        typ: 'JWT'\n      };\n      var iat = Math.floor(Date.now() / 1000);\n      var body = {\n        aud: FIREBASE_AUDIENCE,\n        iat: iat,\n        exp: iat + ONE_HOUR_IN_SECONDS,\n        iss: account,\n        sub: account,\n        uid: uid\n      };\n\n      if (_this.tenantId) {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        body.tenant_id = _this.tenantId;\n      }\n\n      if (Object.keys(claims).length > 0) {\n        body.claims = claims;\n      }\n\n      var token = _this.encodeSegment(header) + \".\" + _this.encodeSegment(body);\n\n      var signPromise = _this.signer.sign(Buffer.from(token));\n\n      return Promise.all([token, signPromise]);\n    }).then(function (_a) {\n      var token = _a[0],\n          signature = _a[1];\n      return token + \".\" + _this.encodeSegment(signature);\n    }).catch(function (err) {\n      throw handleCryptoSignerError(err);\n    });\n  };\n\n  FirebaseTokenGenerator.prototype.encodeSegment = function (segment) {\n    var buffer = segment instanceof Buffer ? segment : Buffer.from(JSON.stringify(segment));\n    return utils_1.toWebSafeBase64(buffer).replace(/=+$/, '');\n  };\n  /**\n   * Returns whether or not the provided developer claims are valid.\n   *\n   * @param {object} [developerClaims] Optional developer claims to validate.\n   * @return {boolean} True if the provided claims are valid; otherwise, false.\n   */\n\n\n  FirebaseTokenGenerator.prototype.isDeveloperClaimsValid_ = function (developerClaims) {\n    if (typeof developerClaims === 'undefined') {\n      return true;\n    }\n\n    return validator.isNonNullObject(developerClaims);\n  };\n\n  return FirebaseTokenGenerator;\n}();\n\nexports.FirebaseTokenGenerator = FirebaseTokenGenerator;\n/**\n * Creates a new FirebaseAuthError by extracting the error code, message and other relevant\n * details from a CryptoSignerError.\n *\n * @param {Error} err The Error to convert into a FirebaseAuthError error\n * @return {FirebaseAuthError} A Firebase Auth error that can be returned to the user.\n */\n\nfunction handleCryptoSignerError(err) {\n  if (!(err instanceof crypto_signer_1.CryptoSignerError)) {\n    return err;\n  }\n\n  if (err.code === crypto_signer_1.CryptoSignerErrorCode.SERVER_ERROR && validator.isNonNullObject(err.cause)) {\n    var httpError = err.cause;\n    var errorResponse = httpError.response.data;\n\n    if (validator.isNonNullObject(errorResponse) && errorResponse.error) {\n      var errorCode = errorResponse.error.status;\n      var description = 'Please refer to https://firebase.google.com/docs/auth/admin/create-custom-tokens ' + 'for more details on how to use and troubleshoot this feature.';\n      var errorMsg = errorResponse.error.message + \"; \" + description;\n      return error_1.FirebaseAuthError.fromServerError(errorCode, errorMsg, errorResponse);\n    }\n\n    return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + errorResponse + '. Additionally, an ' + 'internal error occurred while attempting to extract the ' + 'errorcode from the error.');\n  }\n\n  return new error_1.FirebaseAuthError(mapToAuthClientErrorCode(err.code), err.message);\n}\n\nexports.handleCryptoSignerError = handleCryptoSignerError;\n\nfunction mapToAuthClientErrorCode(code) {\n  switch (code) {\n    case crypto_signer_1.CryptoSignerErrorCode.INVALID_CREDENTIAL:\n      return error_1.AuthClientErrorCode.INVALID_CREDENTIAL;\n\n    case crypto_signer_1.CryptoSignerErrorCode.INVALID_ARGUMENT:\n      return error_1.AuthClientErrorCode.INVALID_ARGUMENT;\n\n    default:\n      return error_1.AuthClientErrorCode.INTERNAL_ERROR;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}