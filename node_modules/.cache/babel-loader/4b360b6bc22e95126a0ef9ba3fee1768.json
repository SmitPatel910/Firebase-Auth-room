{"ast":null,"code":"\"use strict\"; // Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Channel = void 0;\n\nvar common_1 = require(\"@google-cloud/common\");\n\nvar promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * Create a channel object to interact with a Cloud Storage channel.\n *\n * @see [Object Change Notification]{@link https://cloud.google.com/storage/docs/object-change-notification}\n *\n * @class\n *\n * @param {string} id The ID of the channel.\n * @param {string} resourceId The resource ID of the channel.\n *\n * @example\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const channel = storage.channel('id', 'resource-id');\n */\n\n\nvar Channel = /*#__PURE__*/function (_common_1$ServiceObje) {\n  _inherits(Channel, _common_1$ServiceObje);\n\n  function Channel(storage, id, resourceId) {\n    var _this;\n\n    _classCallCheck(this, Channel);\n\n    var config = {\n      parent: storage,\n      baseUrl: '/channels',\n      // An ID shouldn't be included in the API requests.\n      // RE:\n      // https://github.com/GoogleCloudPlatform/google-cloud-node/issues/1145\n      id: '',\n      methods: {// Only need `request`.\n      }\n    };\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Channel).call(this, config)); // TODO: remove type cast to any once ServiceObject's type declaration has\n    // been fixed. https://github.com/googleapis/nodejs-common/issues/176\n\n    var metadata = _this.metadata;\n    metadata.id = id;\n    metadata.resourceId = resourceId;\n    return _this;\n  }\n  /**\n   * @typedef {array} StopResponse\n   * @property {object} 0 The full API response.\n   */\n\n  /**\n   * @callback StopCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n\n  /**\n   * Stop this channel.\n   *\n   * @param {StopCallback} [callback] Callback function.\n   * @returns {Promise<StopResponse>}\n   *\n   * @example\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const channel = storage.channel('id', 'resource-id');\n   * channel.stop(function(err, apiResponse) {\n   *   if (!err) {\n   *     // Channel stopped successfully.\n   *   }\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * channel.stop().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   */\n\n\n  _createClass(Channel, [{\n    key: \"stop\",\n    value: function stop(callback) {\n      callback = callback || common_1.util.noop;\n      this.request({\n        method: 'POST',\n        uri: '/stop',\n        json: this.metadata\n      }, function (err, apiResponse) {\n        callback(err, apiResponse);\n      });\n    }\n  }]);\n\n  return Channel;\n}(common_1.ServiceObject);\n\nexports.Channel = Channel;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n\npromisify_1.promisifyAll(Channel);","map":null,"metadata":{},"sourceType":"script"}