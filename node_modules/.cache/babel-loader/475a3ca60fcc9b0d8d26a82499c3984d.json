{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2021 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _asyncIterator = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar document_1 = require(\"./document\");\n\nvar util_1 = require(\"./util\");\n\nvar logger_1 = require(\"./logger\");\n/**\n * A wrapper around BatchGetDocumentsRequest that retries request upon stream\n * failure and returns ordered results.\n *\n * @private\n * @internal\n */\n\n\nvar DocumentReader = /*#__PURE__*/function () {\n  /**\n   * Creates a new DocumentReader that fetches the provided documents (via\n   * `get()`).\n   *\n   * @param firestore The Firestore instance to use.\n   * @param allDocuments The documents to get.\n   */\n  function DocumentReader(firestore, allDocuments) {\n    _classCallCheck(this, DocumentReader);\n\n    this.firestore = firestore;\n    this.allDocuments = allDocuments;\n    this.outstandingDocuments = new Set();\n    this.retrievedDocuments = new Map();\n\n    var _iterator2 = _createForOfIteratorHelper(this.allDocuments),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var docRef = _step2.value;\n        this.outstandingDocuments.add(docRef.formattedName);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  /**\n   * Invokes the BatchGetDocuments RPC and returns the results.\n   *\n   * @param requestTag A unique client-assigned identifier for this request.\n   */\n\n\n  _createClass(DocumentReader, [{\n    key: \"get\",\n    value: function () {\n      var _get = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(requestTag) {\n        var orderedDocuments, _iterator3, _step3, docRef, document, finalDoc;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.fetchDocuments(requestTag);\n\n              case 2:\n                // BatchGetDocuments doesn't preserve document order. We use the request\n                // order to sort the resulting documents.\n                orderedDocuments = [];\n                _iterator3 = _createForOfIteratorHelper(this.allDocuments);\n                _context.prev = 4;\n\n                _iterator3.s();\n\n              case 6:\n                if ((_step3 = _iterator3.n()).done) {\n                  _context.next = 21;\n                  break;\n                }\n\n                docRef = _step3.value;\n                document = this.retrievedDocuments.get(docRef.formattedName);\n\n                if (!(document !== undefined)) {\n                  _context.next = 18;\n                  break;\n                }\n\n                // Recreate the DocumentSnapshot with the DocumentReference\n                // containing the original converter.\n                finalDoc = new document_1.DocumentSnapshotBuilder(docRef);\n                finalDoc.fieldsProto = document._fieldsProto;\n                finalDoc.readTime = document.readTime;\n                finalDoc.createTime = document.createTime;\n                finalDoc.updateTime = document.updateTime;\n                orderedDocuments.push(finalDoc.build());\n                _context.next = 19;\n                break;\n\n              case 18:\n                throw new Error(\"Did not receive document for \\\"\".concat(docRef.path, \"\\\".\"));\n\n              case 19:\n                _context.next = 6;\n                break;\n\n              case 21:\n                _context.next = 26;\n                break;\n\n              case 23:\n                _context.prev = 23;\n                _context.t0 = _context[\"catch\"](4);\n\n                _iterator3.e(_context.t0);\n\n              case 26:\n                _context.prev = 26;\n\n                _iterator3.f();\n\n                return _context.finish(26);\n\n              case 29:\n                return _context.abrupt(\"return\", orderedDocuments);\n\n              case 30:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[4, 23, 26, 29]]);\n      }));\n\n      function get(_x) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"fetchDocuments\",\n    value: function () {\n      var _fetchDocuments = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(requestTag) {\n        var request, fieldPaths, resultCount, stream, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, response, snapshot, path, shouldRetry;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.outstandingDocuments.size) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 2:\n                request = {\n                  database: this.firestore.formattedName,\n                  transaction: this.transactionId,\n                  documents: Array.from(this.outstandingDocuments)\n                };\n\n                if (this.fieldMask) {\n                  fieldPaths = this.fieldMask.map(function (fieldPath) {\n                    return fieldPath.formattedName;\n                  });\n                  request.mask = {\n                    fieldPaths: fieldPaths\n                  };\n                }\n\n                resultCount = 0;\n                _context2.prev = 5;\n                _context2.next = 8;\n                return this.firestore.requestStream('batchGetDocuments', request, requestTag);\n\n              case 8:\n                stream = _context2.sent;\n                stream.resume();\n                _iteratorNormalCompletion = true;\n                _didIteratorError = false;\n                _context2.prev = 12;\n                _iterator = _asyncIterator(stream);\n\n              case 14:\n                _context2.next = 16;\n                return _iterator.next();\n\n              case 16:\n                _step = _context2.sent;\n                _iteratorNormalCompletion = _step.done;\n                _context2.next = 20;\n                return _step.value;\n\n              case 20:\n                _value = _context2.sent;\n\n                if (_iteratorNormalCompletion) {\n                  _context2.next = 32;\n                  break;\n                }\n\n                response = _value;\n                snapshot = void 0;\n\n                if (response.found) {\n                  logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'Received document: %s', response.found.name);\n                  snapshot = this.firestore.snapshot_(response.found, response.readTime);\n                } else {\n                  logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'Document missing: %s', response.missing);\n                  snapshot = this.firestore.snapshot_(response.missing, response.readTime);\n                }\n\n                path = snapshot.ref.formattedName;\n                this.outstandingDocuments.delete(path);\n                this.retrievedDocuments.set(path, snapshot);\n                ++resultCount;\n\n              case 29:\n                _iteratorNormalCompletion = true;\n                _context2.next = 14;\n                break;\n\n              case 32:\n                _context2.next = 38;\n                break;\n\n              case 34:\n                _context2.prev = 34;\n                _context2.t0 = _context2[\"catch\"](12);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n\n              case 38:\n                _context2.prev = 38;\n                _context2.prev = 39;\n\n                if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                  _context2.next = 43;\n                  break;\n                }\n\n                _context2.next = 43;\n                return _iterator.return();\n\n              case 43:\n                _context2.prev = 43;\n\n                if (!_didIteratorError) {\n                  _context2.next = 46;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 46:\n                return _context2.finish(43);\n\n              case 47:\n                return _context2.finish(38);\n\n              case 48:\n                _context2.next = 59;\n                break;\n\n              case 50:\n                _context2.prev = 50;\n                _context2.t1 = _context2[\"catch\"](5);\n                shouldRetry = // Transactional reads are retried via the transaction runner.\n                !this.transactionId && // Only retry if we made progress.\n                resultCount > 0 && // Don't retry permanent errors.\n                _context2.t1.code !== undefined && !util_1.isPermanentRpcError(_context2.t1, 'batchGetDocuments');\n                logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'BatchGetDocuments failed with error: %s. Retrying: %s', _context2.t1, shouldRetry);\n\n                if (!shouldRetry) {\n                  _context2.next = 58;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", this.fetchDocuments(requestTag));\n\n              case 58:\n                throw _context2.t1;\n\n              case 59:\n                _context2.prev = 59;\n                logger_1.logger('DocumentReader.fetchDocuments', requestTag, 'Received %d results', resultCount);\n                return _context2.finish(59);\n\n              case 62:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[5, 50, 59, 62], [12, 34, 38, 48], [39,, 43, 47]]);\n      }));\n\n      function fetchDocuments(_x2) {\n        return _fetchDocuments.apply(this, arguments);\n      }\n\n      return fetchDocuments;\n    }()\n  }]);\n\n  return DocumentReader;\n}();\n\nexports.DocumentReader = DocumentReader;","map":null,"metadata":{},"sourceType":"script"}