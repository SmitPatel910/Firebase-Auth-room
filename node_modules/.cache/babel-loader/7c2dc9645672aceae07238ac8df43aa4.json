{"ast":null,"code":"var _require = require('../../help/runtime_support'),\n    improvedDH = _require.improvedDH;\n\nif (improvedDH) {\n  var _require2 = require('crypto'),\n      diffieHellman = _require2.diffieHellman;\n\n  var _require3 = require('../../help/key_object'),\n      KeyObject = _require3.KeyObject;\n\n  var importKey = require('../../jwk/import');\n\n  module.exports = function (_ref, publicKey) {\n    var privateKey = _ref.keyObject;\n\n    if (!(publicKey instanceof KeyObject)) {\n      var _importKey = importKey(publicKey);\n\n      publicKey = _importKey.keyObject;\n    }\n\n    return diffieHellman({\n      privateKey: privateKey,\n      publicKey: publicKey\n    });\n  };\n} else {\n  var _require4 = require('crypto'),\n      createECDH = _require4.createECDH,\n      POINT_CONVERSION_UNCOMPRESSED = _require4.constants.POINT_CONVERSION_UNCOMPRESSED;\n\n  var base64url = require('../../help/base64url');\n\n  var crvToCurve = function crvToCurve(crv) {\n    switch (crv) {\n      case 'P-256':\n        return 'prime256v1';\n\n      case 'P-384':\n        return 'secp384r1';\n\n      case 'P-521':\n        return 'secp521r1';\n    }\n  };\n\n  var UNCOMPRESSED = Buffer.alloc(1, POINT_CONVERSION_UNCOMPRESSED);\n\n  var pubToBuffer = function pubToBuffer(x, y) {\n    return Buffer.concat([UNCOMPRESSED, base64url.decodeToBuffer(x), base64url.decodeToBuffer(y)]);\n  };\n\n  module.exports = function (_ref2, _ref3) {\n    var crv = _ref2.crv,\n        d = _ref2.d;\n    var x = _ref3.x,\n        y = _ref3.y;\n    var curve = crvToCurve(crv);\n    var exchange = createECDH(curve);\n    exchange.setPrivateKey(base64url.decodeToBuffer(d));\n    return exchange.computeSecret(pubToBuffer(x, y));\n  };\n}","map":null,"metadata":{},"sourceType":"script"}