{"ast":null,"code":"var _require = require('crypto'),\n    createHmac = _require.createHmac;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar timingSafeEqual = require('../help/timing_safe_equal');\n\nvar resolveNodeAlg = require('../help/node_alg');\n\nvar _require3 = require('../help/key_object'),\n    asInput = _require3.asInput;\n\nvar sign = function sign(jwaAlg, hmacAlg, _ref, payload) {\n  var keyObject = _ref[KEYOBJECT];\n  var hmac = createHmac(hmacAlg, asInput(keyObject, false));\n  hmac.update(payload);\n  return hmac.digest();\n};\n\nvar verify = function verify(jwaAlg, hmacAlg, key, payload, signature) {\n  var expected = sign(jwaAlg, hmacAlg, key, payload);\n  var actual = signature;\n  return timingSafeEqual(actual, expected);\n};\n\nmodule.exports = function (JWA, JWK) {\n  ['HS256', 'HS384', 'HS512'].forEach(function (jwaAlg) {\n    var hmacAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, jwaAlg, hmacAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, jwaAlg, hmacAlg));\n\n    JWK.oct.sign[jwaAlg] = JWK.oct.verify[jwaAlg] = function (key) {\n      return key.use === 'sig' || key.use === undefined;\n    };\n  });\n};","map":null,"metadata":{},"sourceType":"script"}