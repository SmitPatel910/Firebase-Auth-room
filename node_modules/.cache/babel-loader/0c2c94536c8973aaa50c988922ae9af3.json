{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SecurityRulesApiClient = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar security_rules_internal_1 = require(\"./security-rules-internal\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar RULES_V1_API = 'https://firebaserules.googleapis.com/v1';\nvar FIREBASE_VERSION_HEADER = {\n  'X-Firebase-Client': \"fire-admin-node/\" + utils.getSdkVersion()\n};\n/**\n * Class that facilitates sending requests to the Firebase security rules backend API.\n *\n * @private\n */\n\nvar SecurityRulesApiClient =\n/** @class */\nfunction () {\n  function SecurityRulesApiClient(app) {\n    this.app = app;\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'First argument passed to admin.securityRules() must be a valid Firebase app ' + 'instance.');\n    }\n\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n\n  SecurityRulesApiClient.prototype.getRuleset = function (name) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getRulesetName(name);\n    }).then(function (rulesetName) {\n      return _this.getResource(rulesetName);\n    });\n  };\n\n  SecurityRulesApiClient.prototype.createRuleset = function (ruleset) {\n    var _this = this;\n\n    if (!validator.isNonNullObject(ruleset) || !validator.isNonNullObject(ruleset.source) || !validator.isNonEmptyArray(ruleset.source.files)) {\n      var err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid rules content.');\n      return Promise.reject(err);\n    }\n\n    for (var _i = 0, _a = ruleset.source.files; _i < _a.length; _i++) {\n      var rf = _a[_i];\n\n      if (!validator.isNonNullObject(rf) || !validator.isNonEmptyString(rf.name) || !validator.isNonEmptyString(rf.content)) {\n        var err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', \"Invalid rules file argument: \" + JSON.stringify(rf));\n        return Promise.reject(err);\n      }\n    }\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'POST',\n        url: url + \"/rulesets\",\n        data: ruleset\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  SecurityRulesApiClient.prototype.deleteRuleset = function (name) {\n    var _this = this;\n\n    return this.getUrl().then(function (url) {\n      var rulesetName = _this.getRulesetName(name);\n\n      var request = {\n        method: 'DELETE',\n        url: url + \"/\" + rulesetName\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  SecurityRulesApiClient.prototype.listRulesets = function (pageSize, pageToken) {\n    var _this = this;\n\n    if (pageSize === void 0) {\n      pageSize = 100;\n    }\n\n    if (!validator.isNumber(pageSize)) {\n      var err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Invalid page size.');\n      return Promise.reject(err);\n    }\n\n    if (pageSize < 1 || pageSize > 100) {\n      var err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Page size must be between 1 and 100.');\n      return Promise.reject(err);\n    }\n\n    if (typeof pageToken !== 'undefined' && !validator.isNonEmptyString(pageToken)) {\n      var err = new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Next page token must be a non-empty string.');\n      return Promise.reject(err);\n    }\n\n    var data = {\n      pageSize: pageSize,\n      pageToken: pageToken\n    };\n\n    if (!pageToken) {\n      delete data.pageToken;\n    }\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/rulesets\",\n        data: data\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  SecurityRulesApiClient.prototype.getRelease = function (name) {\n    return this.getResource(\"releases/\" + name);\n  };\n\n  SecurityRulesApiClient.prototype.updateRelease = function (name, rulesetName) {\n    var _this = this;\n\n    return this.getUrl().then(function (url) {\n      return _this.getReleaseDescription(name, rulesetName).then(function (release) {\n        var request = {\n          method: 'PATCH',\n          url: url + \"/releases/\" + name,\n          data: {\n            release: release\n          }\n        };\n        return _this.sendRequest(request);\n      });\n    });\n  };\n\n  SecurityRulesApiClient.prototype.getUrl = function () {\n    return this.getProjectIdPrefix().then(function (projectIdPrefix) {\n      return RULES_V1_API + \"/\" + projectIdPrefix;\n    });\n  };\n\n  SecurityRulesApiClient.prototype.getProjectIdPrefix = function () {\n    var _this = this;\n\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n\n      _this.projectIdPrefix = \"projects/\" + projectId;\n      return _this.projectIdPrefix;\n    });\n  };\n  /**\n   * Gets the specified resource from the rules API. Resource names must be the short names without project\n   * ID prefix (e.g. `rulesets/ruleset-name`).\n   *\n   * @param {string} name Full qualified name of the resource to get.\n   * @returns {Promise<T>} A promise that fulfills with the resource.\n   */\n\n\n  SecurityRulesApiClient.prototype.getResource = function (name) {\n    var _this = this;\n\n    return this.getUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/\" + name\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  SecurityRulesApiClient.prototype.getReleaseDescription = function (name, rulesetName) {\n    var _this = this;\n\n    return this.getProjectIdPrefix().then(function (projectIdPrefix) {\n      return {\n        name: projectIdPrefix + \"/releases/\" + name,\n        rulesetName: projectIdPrefix + \"/\" + _this.getRulesetName(rulesetName)\n      };\n    });\n  };\n\n  SecurityRulesApiClient.prototype.getRulesetName = function (name) {\n    if (!validator.isNonEmptyString(name)) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must be a non-empty string.');\n    }\n\n    if (name.indexOf('/') !== -1) {\n      throw new security_rules_internal_1.FirebaseSecurityRulesError('invalid-argument', 'Ruleset name must not contain any \"/\" characters.');\n    }\n\n    return \"rulesets/\" + name;\n  };\n\n  SecurityRulesApiClient.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    request.headers = FIREBASE_VERSION_HEADER;\n    return this.httpClient.send(request).then(function (resp) {\n      return resp.data;\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  SecurityRulesApiClient.prototype.toFirebaseError = function (err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n\n    var response = err.response;\n\n    if (!response.isJson()) {\n      return new security_rules_internal_1.FirebaseSecurityRulesError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n    }\n\n    var error = response.data.error || {};\n    var code = 'unknown-error';\n\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n\n    var message = error.message || \"Unknown server error: \" + response.text;\n    return new security_rules_internal_1.FirebaseSecurityRulesError(code, message);\n  };\n\n  return SecurityRulesApiClient;\n}();\n\nexports.SecurityRulesApiClient = SecurityRulesApiClient;\nvar ERROR_CODE_MAPPING = {\n  INVALID_ARGUMENT: 'invalid-argument',\n  NOT_FOUND: 'not-found',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'authentication-error',\n  UNKNOWN: 'unknown-error'\n};","map":null,"metadata":{},"sourceType":"script"}