{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InstanceIdClientErrorCode = exports.InstallationsClientErrorCode = exports.MessagingClientErrorCode = exports.AuthClientErrorCode = exports.AppErrorCodes = exports.FirebaseProjectManagementError = exports.FirebaseMessagingError = exports.FirebaseInstallationsError = exports.FirebaseInstanceIdError = exports.FirebaseFirestoreError = exports.FirebaseDatabaseError = exports.FirebaseAuthError = exports.FirebaseAppError = exports.PrefixedFirebaseError = exports.FirebaseError = void 0;\n\nvar deep_copy_1 = require(\"../utils/deep-copy\");\n/**\n * Firebase error code structure. This extends Error.\n *\n * @param {ErrorInfo} errorInfo The error information (code and message).\n * @constructor\n */\n\n\nvar FirebaseError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseError, _super);\n\n  function FirebaseError(errorInfo) {\n    var _this = _super.call(this, errorInfo.message) || this;\n\n    _this.errorInfo = errorInfo;\n    /* tslint:disable:max-line-length */\n    // Set the prototype explicitly. See the following link for more details:\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n    /* tslint:enable:max-line-length */\n\n    _this.__proto__ = FirebaseError.prototype;\n    return _this;\n  }\n\n  Object.defineProperty(FirebaseError.prototype, \"code\", {\n    /** @return {string} The error code. */\n    get: function get() {\n      return this.errorInfo.code;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(FirebaseError.prototype, \"message\", {\n    /** @return {string} The error message. */\n    get: function get() {\n      return this.errorInfo.message;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /** @return {object} The object representation of the error. */\n\n  FirebaseError.prototype.toJSON = function () {\n    return {\n      code: this.code,\n      message: this.message\n    };\n  };\n\n  return FirebaseError;\n}(Error);\n\nexports.FirebaseError = FirebaseError;\n/**\n * A FirebaseError with a prefix in front of the error code.\n *\n * @param {string} codePrefix The prefix to apply to the error code.\n * @param {string} code The error code.\n * @param {string} message The error message.\n * @constructor\n */\n\nvar PrefixedFirebaseError =\n/** @class */\nfunction (_super) {\n  __extends(PrefixedFirebaseError, _super);\n\n  function PrefixedFirebaseError(codePrefix, code, message) {\n    var _this = _super.call(this, {\n      code: codePrefix + \"/\" + code,\n      message: message\n    }) || this;\n\n    _this.codePrefix = codePrefix;\n    /* tslint:disable:max-line-length */\n    // Set the prototype explicitly. See the following link for more details:\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n    /* tslint:enable:max-line-length */\n\n    _this.__proto__ = PrefixedFirebaseError.prototype;\n    return _this;\n  }\n  /**\n   * Allows the error type to be checked without needing to know implementation details\n   * of the code prefixing.\n   *\n   * @param {string} code The non-prefixed error code to test against.\n   * @return {boolean} True if the code matches, false otherwise.\n   */\n\n\n  PrefixedFirebaseError.prototype.hasCode = function (code) {\n    return this.codePrefix + \"/\" + code === this.code;\n  };\n\n  return PrefixedFirebaseError;\n}(FirebaseError);\n\nexports.PrefixedFirebaseError = PrefixedFirebaseError;\n/**\n * Firebase App error code structure. This extends PrefixedFirebaseError.\n *\n * @param {string} code The error code.\n * @param {string} message The error message.\n * @constructor\n */\n\nvar FirebaseAppError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseAppError, _super);\n\n  function FirebaseAppError(code, message) {\n    var _this = _super.call(this, 'app', code, message) || this;\n    /* tslint:disable:max-line-length */\n    // Set the prototype explicitly. See the following link for more details:\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n    /* tslint:enable:max-line-length */\n\n\n    _this.__proto__ = FirebaseAppError.prototype;\n    return _this;\n  }\n\n  return FirebaseAppError;\n}(PrefixedFirebaseError);\n\nexports.FirebaseAppError = FirebaseAppError;\n/**\n * Firebase Auth error code structure. This extends PrefixedFirebaseError.\n *\n * @param {ErrorInfo} info The error code info.\n * @param {string} [message] The error message. This will override the default\n *     message if provided.\n * @constructor\n */\n\nvar FirebaseAuthError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseAuthError, _super);\n\n  function FirebaseAuthError(info, message) {\n    var _this = // Override default message if custom message provided.\n    _super.call(this, 'auth', info.code, message || info.message) || this;\n    /* tslint:disable:max-line-length */\n    // Set the prototype explicitly. See the following link for more details:\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n    /* tslint:enable:max-line-length */\n\n\n    _this.__proto__ = FirebaseAuthError.prototype;\n    return _this;\n  }\n  /**\n   * Creates the developer-facing error corresponding to the backend error code.\n   *\n   * @param {string} serverErrorCode The server error code.\n   * @param {string} [message] The error message. The default message is used\n   *     if not provided.\n   * @param {object} [rawServerResponse] The error's raw server response.\n   * @return {FirebaseAuthError} The corresponding developer-facing error.\n   */\n\n\n  FirebaseAuthError.fromServerError = function (serverErrorCode, message, rawServerResponse) {\n    // serverErrorCode could contain additional details:\n    // ERROR_CODE : Detailed message which can also contain colons\n    var colonSeparator = (serverErrorCode || '').indexOf(':');\n    var customMessage = null;\n\n    if (colonSeparator !== -1) {\n      customMessage = serverErrorCode.substring(colonSeparator + 1).trim();\n      serverErrorCode = serverErrorCode.substring(0, colonSeparator).trim();\n    } // If not found, default to internal error.\n\n\n    var clientCodeKey = AUTH_SERVER_TO_CLIENT_CODE[serverErrorCode] || 'INTERNAL_ERROR';\n    var error = deep_copy_1.deepCopy(AuthClientErrorCode[clientCodeKey]); // Server detailed message should have highest priority.\n\n    error.message = customMessage || message || error.message;\n\n    if (clientCodeKey === 'INTERNAL_ERROR' && typeof rawServerResponse !== 'undefined') {\n      try {\n        error.message += \" Raw server response: \\\"\" + JSON.stringify(rawServerResponse) + \"\\\"\";\n      } catch (e) {// Ignore JSON parsing error.\n      }\n    }\n\n    return new FirebaseAuthError(error);\n  };\n\n  return FirebaseAuthError;\n}(PrefixedFirebaseError);\n\nexports.FirebaseAuthError = FirebaseAuthError;\n/**\n * Firebase Database error code structure. This extends FirebaseError.\n *\n * @param {ErrorInfo} info The error code info.\n * @param {string} [message] The error message. This will override the default\n *     message if provided.\n * @constructor\n */\n\nvar FirebaseDatabaseError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseDatabaseError, _super);\n\n  function FirebaseDatabaseError(info, message) {\n    // Override default message if custom message provided.\n    return _super.call(this, {\n      code: 'database/' + info.code,\n      message: message || info.message\n    }) || this;\n  }\n\n  return FirebaseDatabaseError;\n}(FirebaseError);\n\nexports.FirebaseDatabaseError = FirebaseDatabaseError;\n/**\n * Firebase Firestore error code structure. This extends FirebaseError.\n *\n * @param {ErrorInfo} info The error code info.\n * @param {string} [message] The error message. This will override the default\n *     message if provided.\n * @constructor\n */\n\nvar FirebaseFirestoreError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseFirestoreError, _super);\n\n  function FirebaseFirestoreError(info, message) {\n    // Override default message if custom message provided.\n    return _super.call(this, {\n      code: 'firestore/' + info.code,\n      message: message || info.message\n    }) || this;\n  }\n\n  return FirebaseFirestoreError;\n}(FirebaseError);\n\nexports.FirebaseFirestoreError = FirebaseFirestoreError;\n/**\n * Firebase instance ID error code structure. This extends FirebaseError.\n *\n * @param {ErrorInfo} info The error code info.\n * @param {string} [message] The error message. This will override the default\n *     message if provided.\n * @constructor\n */\n\nvar FirebaseInstanceIdError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseInstanceIdError, _super);\n\n  function FirebaseInstanceIdError(info, message) {\n    var _this = // Override default message if custom message provided.\n    _super.call(this, {\n      code: 'instance-id/' + info.code,\n      message: message || info.message\n    }) || this;\n\n    _this.__proto__ = FirebaseInstanceIdError.prototype;\n    return _this;\n  }\n\n  return FirebaseInstanceIdError;\n}(FirebaseError);\n\nexports.FirebaseInstanceIdError = FirebaseInstanceIdError;\n/**\n * Firebase Installations service error code structure. This extends `FirebaseError`.\n *\n * @param info The error code info.\n * @param message The error message. This will override the default\n *     message if provided.\n * @constructor\n */\n\nvar FirebaseInstallationsError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseInstallationsError, _super);\n\n  function FirebaseInstallationsError(info, message) {\n    var _this = // Override default message if custom message provided.\n    _super.call(this, {\n      code: 'installations/' + info.code,\n      message: message || info.message\n    }) || this;\n\n    _this.__proto__ = FirebaseInstallationsError.prototype;\n    return _this;\n  }\n\n  return FirebaseInstallationsError;\n}(FirebaseError);\n\nexports.FirebaseInstallationsError = FirebaseInstallationsError;\n/**\n * Firebase Messaging error code structure. This extends PrefixedFirebaseError.\n *\n * @param {ErrorInfo} info The error code info.\n * @param {string} [message] The error message. This will override the default message if provided.\n * @constructor\n */\n\nvar FirebaseMessagingError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseMessagingError, _super);\n\n  function FirebaseMessagingError(info, message) {\n    var _this = // Override default message if custom message provided.\n    _super.call(this, 'messaging', info.code, message || info.message) || this;\n    /* tslint:disable:max-line-length */\n    // Set the prototype explicitly. See the following link for more details:\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n    /* tslint:enable:max-line-length */\n\n\n    _this.__proto__ = FirebaseMessagingError.prototype;\n    return _this;\n  }\n  /**\n   * Creates the developer-facing error corresponding to the backend error code.\n   *\n   * @param {string} serverErrorCode The server error code.\n   * @param {string} [message] The error message. The default message is used\n   *     if not provided.\n   * @param {object} [rawServerResponse] The error's raw server response.\n   * @return {FirebaseMessagingError} The corresponding developer-facing error.\n   */\n\n\n  FirebaseMessagingError.fromServerError = function (serverErrorCode, message, rawServerResponse) {\n    // If not found, default to unknown error.\n    var clientCodeKey = 'UNKNOWN_ERROR';\n\n    if (serverErrorCode && serverErrorCode in MESSAGING_SERVER_TO_CLIENT_CODE) {\n      clientCodeKey = MESSAGING_SERVER_TO_CLIENT_CODE[serverErrorCode];\n    }\n\n    var error = deep_copy_1.deepCopy(MessagingClientErrorCode[clientCodeKey]);\n    error.message = message || error.message;\n\n    if (clientCodeKey === 'UNKNOWN_ERROR' && typeof rawServerResponse !== 'undefined') {\n      try {\n        error.message += \" Raw server response: \\\"\" + JSON.stringify(rawServerResponse) + \"\\\"\";\n      } catch (e) {// Ignore JSON parsing error.\n      }\n    }\n\n    return new FirebaseMessagingError(error);\n  };\n\n  FirebaseMessagingError.fromTopicManagementServerError = function (serverErrorCode, message, rawServerResponse) {\n    // If not found, default to unknown error.\n    var clientCodeKey = TOPIC_MGT_SERVER_TO_CLIENT_CODE[serverErrorCode] || 'UNKNOWN_ERROR';\n    var error = deep_copy_1.deepCopy(MessagingClientErrorCode[clientCodeKey]);\n    error.message = message || error.message;\n\n    if (clientCodeKey === 'UNKNOWN_ERROR' && typeof rawServerResponse !== 'undefined') {\n      try {\n        error.message += \" Raw server response: \\\"\" + JSON.stringify(rawServerResponse) + \"\\\"\";\n      } catch (e) {// Ignore JSON parsing error.\n      }\n    }\n\n    return new FirebaseMessagingError(error);\n  };\n\n  return FirebaseMessagingError;\n}(PrefixedFirebaseError);\n\nexports.FirebaseMessagingError = FirebaseMessagingError;\n/**\n * Firebase project management error code structure. This extends PrefixedFirebaseError.\n *\n * @param {ProjectManagementErrorCode} code The error code.\n * @param {string} message The error message.\n * @constructor\n */\n\nvar FirebaseProjectManagementError =\n/** @class */\nfunction (_super) {\n  __extends(FirebaseProjectManagementError, _super);\n\n  function FirebaseProjectManagementError(code, message) {\n    var _this = _super.call(this, 'project-management', code, message) || this;\n    /* tslint:disable:max-line-length */\n    // Set the prototype explicitly. See the following link for more details:\n    // https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n    /* tslint:enable:max-line-length */\n\n\n    _this.__proto__ = FirebaseProjectManagementError.prototype;\n    return _this;\n  }\n\n  return FirebaseProjectManagementError;\n}(PrefixedFirebaseError);\n\nexports.FirebaseProjectManagementError = FirebaseProjectManagementError;\n/**\n * App client error codes and their default messages.\n */\n\nvar AppErrorCodes =\n/** @class */\nfunction () {\n  function AppErrorCodes() {}\n\n  AppErrorCodes.APP_DELETED = 'app-deleted';\n  AppErrorCodes.DUPLICATE_APP = 'duplicate-app';\n  AppErrorCodes.INVALID_ARGUMENT = 'invalid-argument';\n  AppErrorCodes.INTERNAL_ERROR = 'internal-error';\n  AppErrorCodes.INVALID_APP_NAME = 'invalid-app-name';\n  AppErrorCodes.INVALID_APP_OPTIONS = 'invalid-app-options';\n  AppErrorCodes.INVALID_CREDENTIAL = 'invalid-credential';\n  AppErrorCodes.NETWORK_ERROR = 'network-error';\n  AppErrorCodes.NETWORK_TIMEOUT = 'network-timeout';\n  AppErrorCodes.NO_APP = 'no-app';\n  AppErrorCodes.UNABLE_TO_PARSE_RESPONSE = 'unable-to-parse-response';\n  return AppErrorCodes;\n}();\n\nexports.AppErrorCodes = AppErrorCodes;\n/**\n * Auth client error codes and their default messages.\n */\n\nvar AuthClientErrorCode =\n/** @class */\nfunction () {\n  function AuthClientErrorCode() {}\n\n  AuthClientErrorCode.BILLING_NOT_ENABLED = {\n    code: 'billing-not-enabled',\n    message: 'Feature requires billing to be enabled.'\n  };\n  AuthClientErrorCode.CLAIMS_TOO_LARGE = {\n    code: 'claims-too-large',\n    message: 'Developer claims maximum payload size exceeded.'\n  };\n  AuthClientErrorCode.CONFIGURATION_EXISTS = {\n    code: 'configuration-exists',\n    message: 'A configuration already exists with the provided identifier.'\n  };\n  AuthClientErrorCode.CONFIGURATION_NOT_FOUND = {\n    code: 'configuration-not-found',\n    message: 'There is no configuration corresponding to the provided identifier.'\n  };\n  AuthClientErrorCode.ID_TOKEN_EXPIRED = {\n    code: 'id-token-expired',\n    message: 'The provided Firebase ID token is expired.'\n  };\n  AuthClientErrorCode.INVALID_ARGUMENT = {\n    code: 'argument-error',\n    message: 'Invalid argument provided.'\n  };\n  AuthClientErrorCode.INVALID_CONFIG = {\n    code: 'invalid-config',\n    message: 'The provided configuration is invalid.'\n  };\n  AuthClientErrorCode.EMAIL_ALREADY_EXISTS = {\n    code: 'email-already-exists',\n    message: 'The email address is already in use by another account.'\n  };\n  AuthClientErrorCode.EMAIL_NOT_FOUND = {\n    code: 'email-not-found',\n    message: 'There is no user record corresponding to the provided email.'\n  };\n  AuthClientErrorCode.FORBIDDEN_CLAIM = {\n    code: 'reserved-claim',\n    message: 'The specified developer claim is reserved and cannot be specified.'\n  };\n  AuthClientErrorCode.INVALID_ID_TOKEN = {\n    code: 'invalid-id-token',\n    message: 'The provided ID token is not a valid Firebase ID token.'\n  };\n  AuthClientErrorCode.ID_TOKEN_REVOKED = {\n    code: 'id-token-revoked',\n    message: 'The Firebase ID token has been revoked.'\n  };\n  AuthClientErrorCode.INTERNAL_ERROR = {\n    code: 'internal-error',\n    message: 'An internal error has occurred.'\n  };\n  AuthClientErrorCode.INVALID_CLAIMS = {\n    code: 'invalid-claims',\n    message: 'The provided custom claim attributes are invalid.'\n  };\n  AuthClientErrorCode.INVALID_CONTINUE_URI = {\n    code: 'invalid-continue-uri',\n    message: 'The continue URL must be a valid URL string.'\n  };\n  AuthClientErrorCode.INVALID_CREATION_TIME = {\n    code: 'invalid-creation-time',\n    message: 'The creation time must be a valid UTC date string.'\n  };\n  AuthClientErrorCode.INVALID_CREDENTIAL = {\n    code: 'invalid-credential',\n    message: 'Invalid credential object provided.'\n  };\n  AuthClientErrorCode.INVALID_DISABLED_FIELD = {\n    code: 'invalid-disabled-field',\n    message: 'The disabled field must be a boolean.'\n  };\n  AuthClientErrorCode.INVALID_DISPLAY_NAME = {\n    code: 'invalid-display-name',\n    message: 'The displayName field must be a valid string.'\n  };\n  AuthClientErrorCode.INVALID_DYNAMIC_LINK_DOMAIN = {\n    code: 'invalid-dynamic-link-domain',\n    message: 'The provided dynamic link domain is not configured or authorized ' + 'for the current project.'\n  };\n  AuthClientErrorCode.INVALID_EMAIL_VERIFIED = {\n    code: 'invalid-email-verified',\n    message: 'The emailVerified field must be a boolean.'\n  };\n  AuthClientErrorCode.INVALID_EMAIL = {\n    code: 'invalid-email',\n    message: 'The email address is improperly formatted.'\n  };\n  AuthClientErrorCode.INVALID_ENROLLED_FACTORS = {\n    code: 'invalid-enrolled-factors',\n    message: 'The enrolled factors must be a valid array of MultiFactorInfo objects.'\n  };\n  AuthClientErrorCode.INVALID_ENROLLMENT_TIME = {\n    code: 'invalid-enrollment-time',\n    message: 'The second factor enrollment time must be a valid UTC date string.'\n  };\n  AuthClientErrorCode.INVALID_HASH_ALGORITHM = {\n    code: 'invalid-hash-algorithm',\n    message: 'The hash algorithm must match one of the strings in the list of ' + 'supported algorithms.'\n  };\n  AuthClientErrorCode.INVALID_HASH_BLOCK_SIZE = {\n    code: 'invalid-hash-block-size',\n    message: 'The hash block size must be a valid number.'\n  };\n  AuthClientErrorCode.INVALID_HASH_DERIVED_KEY_LENGTH = {\n    code: 'invalid-hash-derived-key-length',\n    message: 'The hash derived key length must be a valid number.'\n  };\n  AuthClientErrorCode.INVALID_HASH_KEY = {\n    code: 'invalid-hash-key',\n    message: 'The hash key must a valid byte buffer.'\n  };\n  AuthClientErrorCode.INVALID_HASH_MEMORY_COST = {\n    code: 'invalid-hash-memory-cost',\n    message: 'The hash memory cost must be a valid number.'\n  };\n  AuthClientErrorCode.INVALID_HASH_PARALLELIZATION = {\n    code: 'invalid-hash-parallelization',\n    message: 'The hash parallelization must be a valid number.'\n  };\n  AuthClientErrorCode.INVALID_HASH_ROUNDS = {\n    code: 'invalid-hash-rounds',\n    message: 'The hash rounds must be a valid number.'\n  };\n  AuthClientErrorCode.INVALID_HASH_SALT_SEPARATOR = {\n    code: 'invalid-hash-salt-separator',\n    message: 'The hashing algorithm salt separator field must be a valid byte buffer.'\n  };\n  AuthClientErrorCode.INVALID_LAST_SIGN_IN_TIME = {\n    code: 'invalid-last-sign-in-time',\n    message: 'The last sign-in time must be a valid UTC date string.'\n  };\n  AuthClientErrorCode.INVALID_NAME = {\n    code: 'invalid-name',\n    message: 'The resource name provided is invalid.'\n  };\n  AuthClientErrorCode.INVALID_OAUTH_CLIENT_ID = {\n    code: 'invalid-oauth-client-id',\n    message: 'The provided OAuth client ID is invalid.'\n  };\n  AuthClientErrorCode.INVALID_PAGE_TOKEN = {\n    code: 'invalid-page-token',\n    message: 'The page token must be a valid non-empty string.'\n  };\n  AuthClientErrorCode.INVALID_PASSWORD = {\n    code: 'invalid-password',\n    message: 'The password must be a string with at least 6 characters.'\n  };\n  AuthClientErrorCode.INVALID_PASSWORD_HASH = {\n    code: 'invalid-password-hash',\n    message: 'The password hash must be a valid byte buffer.'\n  };\n  AuthClientErrorCode.INVALID_PASSWORD_SALT = {\n    code: 'invalid-password-salt',\n    message: 'The password salt must be a valid byte buffer.'\n  };\n  AuthClientErrorCode.INVALID_PHONE_NUMBER = {\n    code: 'invalid-phone-number',\n    message: 'The phone number must be a non-empty E.164 standard compliant identifier ' + 'string.'\n  };\n  AuthClientErrorCode.INVALID_PHOTO_URL = {\n    code: 'invalid-photo-url',\n    message: 'The photoURL field must be a valid URL.'\n  };\n  AuthClientErrorCode.INVALID_PROJECT_ID = {\n    code: 'invalid-project-id',\n    message: 'Invalid parent project. Either parent project doesn\\'t exist or didn\\'t enable multi-tenancy.'\n  };\n  AuthClientErrorCode.INVALID_PROVIDER_DATA = {\n    code: 'invalid-provider-data',\n    message: 'The providerData must be a valid array of UserInfo objects.'\n  };\n  AuthClientErrorCode.INVALID_PROVIDER_ID = {\n    code: 'invalid-provider-id',\n    message: 'The providerId must be a valid supported provider identifier string.'\n  };\n  AuthClientErrorCode.INVALID_PROVIDER_UID = {\n    code: 'invalid-provider-uid',\n    message: 'The providerUid must be a valid provider uid string.'\n  };\n  AuthClientErrorCode.INVALID_OAUTH_RESPONSETYPE = {\n    code: 'invalid-oauth-responsetype',\n    message: 'Only exactly one OAuth responseType should be set to true.'\n  };\n  AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION = {\n    code: 'invalid-session-cookie-duration',\n    message: 'The session cookie duration must be a valid number in milliseconds ' + 'between 5 minutes and 2 weeks.'\n  };\n  AuthClientErrorCode.INVALID_TENANT_ID = {\n    code: 'invalid-tenant-id',\n    message: 'The tenant ID must be a valid non-empty string.'\n  };\n  AuthClientErrorCode.INVALID_TENANT_TYPE = {\n    code: 'invalid-tenant-type',\n    message: 'Tenant type must be either \"full_service\" or \"lightweight\".'\n  };\n  AuthClientErrorCode.INVALID_TESTING_PHONE_NUMBER = {\n    code: 'invalid-testing-phone-number',\n    message: 'Invalid testing phone number or invalid test code provided.'\n  };\n  AuthClientErrorCode.INVALID_UID = {\n    code: 'invalid-uid',\n    message: 'The uid must be a non-empty string with at most 128 characters.'\n  };\n  AuthClientErrorCode.INVALID_USER_IMPORT = {\n    code: 'invalid-user-import',\n    message: 'The user record to import is invalid.'\n  };\n  AuthClientErrorCode.INVALID_TOKENS_VALID_AFTER_TIME = {\n    code: 'invalid-tokens-valid-after-time',\n    message: 'The tokensValidAfterTime must be a valid UTC number in seconds.'\n  };\n  AuthClientErrorCode.MISMATCHING_TENANT_ID = {\n    code: 'mismatching-tenant-id',\n    message: 'User tenant ID does not match with the current TenantAwareAuth tenant ID.'\n  };\n  AuthClientErrorCode.MISSING_ANDROID_PACKAGE_NAME = {\n    code: 'missing-android-pkg-name',\n    message: 'An Android Package Name must be provided if the Android App is ' + 'required to be installed.'\n  };\n  AuthClientErrorCode.MISSING_CONFIG = {\n    code: 'missing-config',\n    message: 'The provided configuration is missing required attributes.'\n  };\n  AuthClientErrorCode.MISSING_CONTINUE_URI = {\n    code: 'missing-continue-uri',\n    message: 'A valid continue URL must be provided in the request.'\n  };\n  AuthClientErrorCode.MISSING_DISPLAY_NAME = {\n    code: 'missing-display-name',\n    message: 'The resource being created or edited is missing a valid display name.'\n  };\n  AuthClientErrorCode.MISSING_EMAIL = {\n    code: 'missing-email',\n    message: 'The email is required for the specified action. For example, a multi-factor user ' + 'requires a verified email.'\n  };\n  AuthClientErrorCode.MISSING_IOS_BUNDLE_ID = {\n    code: 'missing-ios-bundle-id',\n    message: 'The request is missing an iOS Bundle ID.'\n  };\n  AuthClientErrorCode.MISSING_ISSUER = {\n    code: 'missing-issuer',\n    message: 'The OAuth/OIDC configuration issuer must not be empty.'\n  };\n  AuthClientErrorCode.MISSING_HASH_ALGORITHM = {\n    code: 'missing-hash-algorithm',\n    message: 'Importing users with password hashes requires that the hashing ' + 'algorithm and its parameters be provided.'\n  };\n  AuthClientErrorCode.MISSING_OAUTH_CLIENT_ID = {\n    code: 'missing-oauth-client-id',\n    message: 'The OAuth/OIDC configuration client ID must not be empty.'\n  };\n  AuthClientErrorCode.MISSING_OAUTH_CLIENT_SECRET = {\n    code: 'missing-oauth-client-secret',\n    message: 'The OAuth configuration client secret is required to enable OIDC code flow.'\n  };\n  AuthClientErrorCode.MISSING_PROVIDER_ID = {\n    code: 'missing-provider-id',\n    message: 'A valid provider ID must be provided in the request.'\n  };\n  AuthClientErrorCode.MISSING_SAML_RELYING_PARTY_CONFIG = {\n    code: 'missing-saml-relying-party-config',\n    message: 'The SAML configuration provided is missing a relying party configuration.'\n  };\n  AuthClientErrorCode.MAXIMUM_TEST_PHONE_NUMBER_EXCEEDED = {\n    code: 'test-phone-number-limit-exceeded',\n    message: 'The maximum allowed number of test phone number / code pairs has been exceeded.'\n  };\n  AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED = {\n    code: 'maximum-user-count-exceeded',\n    message: 'The maximum allowed number of users to import has been exceeded.'\n  };\n  AuthClientErrorCode.MISSING_UID = {\n    code: 'missing-uid',\n    message: 'A uid identifier is required for the current operation.'\n  };\n  AuthClientErrorCode.OPERATION_NOT_ALLOWED = {\n    code: 'operation-not-allowed',\n    message: 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.'\n  };\n  AuthClientErrorCode.PHONE_NUMBER_ALREADY_EXISTS = {\n    code: 'phone-number-already-exists',\n    message: 'The user with the provided phone number already exists.'\n  };\n  AuthClientErrorCode.PROJECT_NOT_FOUND = {\n    code: 'project-not-found',\n    message: 'No Firebase project was found for the provided credential.'\n  };\n  AuthClientErrorCode.INSUFFICIENT_PERMISSION = {\n    code: 'insufficient-permission',\n    message: 'Credential implementation provided to initializeApp() via the \"credential\" property ' + 'has insufficient permission to access the requested resource. See ' + 'https://firebase.google.com/docs/admin/setup for details on how to authenticate this SDK ' + 'with appropriate permissions.'\n  };\n  AuthClientErrorCode.QUOTA_EXCEEDED = {\n    code: 'quota-exceeded',\n    message: 'The project quota for the specified operation has been exceeded.'\n  };\n  AuthClientErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED = {\n    code: 'second-factor-limit-exceeded',\n    message: 'The maximum number of allowed second factors on a user has been exceeded.'\n  };\n  AuthClientErrorCode.SECOND_FACTOR_UID_ALREADY_EXISTS = {\n    code: 'second-factor-uid-already-exists',\n    message: 'The specified second factor \"uid\" already exists.'\n  };\n  AuthClientErrorCode.SESSION_COOKIE_EXPIRED = {\n    code: 'session-cookie-expired',\n    message: 'The Firebase session cookie is expired.'\n  };\n  AuthClientErrorCode.SESSION_COOKIE_REVOKED = {\n    code: 'session-cookie-revoked',\n    message: 'The Firebase session cookie has been revoked.'\n  };\n  AuthClientErrorCode.TENANT_NOT_FOUND = {\n    code: 'tenant-not-found',\n    message: 'There is no tenant corresponding to the provided identifier.'\n  };\n  AuthClientErrorCode.UID_ALREADY_EXISTS = {\n    code: 'uid-already-exists',\n    message: 'The user with the provided uid already exists.'\n  };\n  AuthClientErrorCode.UNAUTHORIZED_DOMAIN = {\n    code: 'unauthorized-continue-uri',\n    message: 'The domain of the continue URL is not whitelisted. Whitelist the domain in the ' + 'Firebase console.'\n  };\n  AuthClientErrorCode.UNSUPPORTED_FIRST_FACTOR = {\n    code: 'unsupported-first-factor',\n    message: 'A multi-factor user requires a supported first factor.'\n  };\n  AuthClientErrorCode.UNSUPPORTED_SECOND_FACTOR = {\n    code: 'unsupported-second-factor',\n    message: 'The request specified an unsupported type of second factor.'\n  };\n  AuthClientErrorCode.UNSUPPORTED_TENANT_OPERATION = {\n    code: 'unsupported-tenant-operation',\n    message: 'This operation is not supported in a multi-tenant context.'\n  };\n  AuthClientErrorCode.UNVERIFIED_EMAIL = {\n    code: 'unverified-email',\n    message: 'A verified email is required for the specified action. For example, a multi-factor user ' + 'requires a verified email.'\n  };\n  AuthClientErrorCode.USER_NOT_FOUND = {\n    code: 'user-not-found',\n    message: 'There is no user record corresponding to the provided identifier.'\n  };\n  AuthClientErrorCode.NOT_FOUND = {\n    code: 'not-found',\n    message: 'The requested resource was not found.'\n  };\n  AuthClientErrorCode.USER_NOT_DISABLED = {\n    code: 'user-not-disabled',\n    message: 'The user must be disabled in order to bulk delete it (or you must pass force=true).'\n  };\n  return AuthClientErrorCode;\n}();\n\nexports.AuthClientErrorCode = AuthClientErrorCode;\n/**\n * Messaging client error codes and their default messages.\n */\n\nvar MessagingClientErrorCode =\n/** @class */\nfunction () {\n  function MessagingClientErrorCode() {}\n\n  MessagingClientErrorCode.INVALID_ARGUMENT = {\n    code: 'invalid-argument',\n    message: 'Invalid argument provided.'\n  };\n  MessagingClientErrorCode.INVALID_RECIPIENT = {\n    code: 'invalid-recipient',\n    message: 'Invalid message recipient provided.'\n  };\n  MessagingClientErrorCode.INVALID_PAYLOAD = {\n    code: 'invalid-payload',\n    message: 'Invalid message payload provided.'\n  };\n  MessagingClientErrorCode.INVALID_DATA_PAYLOAD_KEY = {\n    code: 'invalid-data-payload-key',\n    message: 'The data message payload contains an invalid key. See the reference documentation ' + 'for the DataMessagePayload type for restricted keys.'\n  };\n  MessagingClientErrorCode.PAYLOAD_SIZE_LIMIT_EXCEEDED = {\n    code: 'payload-size-limit-exceeded',\n    message: 'The provided message payload exceeds the FCM size limits. See the error documentation ' + 'for more details.'\n  };\n  MessagingClientErrorCode.INVALID_OPTIONS = {\n    code: 'invalid-options',\n    message: 'Invalid message options provided.'\n  };\n  MessagingClientErrorCode.INVALID_REGISTRATION_TOKEN = {\n    code: 'invalid-registration-token',\n    message: 'Invalid registration token provided. Make sure it matches the registration token ' + 'the client app receives from registering with FCM.'\n  };\n  MessagingClientErrorCode.REGISTRATION_TOKEN_NOT_REGISTERED = {\n    code: 'registration-token-not-registered',\n    message: 'The provided registration token is not registered. A previously valid registration ' + 'token can be unregistered for a variety of reasons. See the error documentation for more ' + 'details. Remove this registration token and stop using it to send messages.'\n  };\n  MessagingClientErrorCode.MISMATCHED_CREDENTIAL = {\n    code: 'mismatched-credential',\n    message: 'The credential used to authenticate this SDK does not have permission to send ' + 'messages to the device corresponding to the provided registration token. Make sure the ' + 'credential and registration token both belong to the same Firebase project.'\n  };\n  MessagingClientErrorCode.INVALID_PACKAGE_NAME = {\n    code: 'invalid-package-name',\n    message: 'The message was addressed to a registration token whose package name does not match ' + 'the provided \"restrictedPackageName\" option.'\n  };\n  MessagingClientErrorCode.DEVICE_MESSAGE_RATE_EXCEEDED = {\n    code: 'device-message-rate-exceeded',\n    message: 'The rate of messages to a particular device is too high. Reduce the number of ' + 'messages sent to this device and do not immediately retry sending to this device.'\n  };\n  MessagingClientErrorCode.TOPICS_MESSAGE_RATE_EXCEEDED = {\n    code: 'topics-message-rate-exceeded',\n    message: 'The rate of messages to subscribers to a particular topic is too high. Reduce the ' + 'number of messages sent for this topic, and do not immediately retry sending to this topic.'\n  };\n  MessagingClientErrorCode.MESSAGE_RATE_EXCEEDED = {\n    code: 'message-rate-exceeded',\n    message: 'Sending limit exceeded for the message target.'\n  };\n  MessagingClientErrorCode.THIRD_PARTY_AUTH_ERROR = {\n    code: 'third-party-auth-error',\n    message: 'A message targeted to an iOS device could not be sent because the required APNs ' + 'SSL certificate was not uploaded or has expired. Check the validity of your development ' + 'and production certificates.'\n  };\n  MessagingClientErrorCode.TOO_MANY_TOPICS = {\n    code: 'too-many-topics',\n    message: 'The maximum number of topics the provided registration token can be subscribed to ' + 'has been exceeded.'\n  };\n  MessagingClientErrorCode.AUTHENTICATION_ERROR = {\n    code: 'authentication-error',\n    message: 'An error occurred when trying to authenticate to the FCM servers. Make sure the ' + 'credential used to authenticate this SDK has the proper permissions. See ' + 'https://firebase.google.com/docs/admin/setup for setup instructions.'\n  };\n  MessagingClientErrorCode.SERVER_UNAVAILABLE = {\n    code: 'server-unavailable',\n    message: 'The FCM server could not process the request in time. See the error documentation ' + 'for more details.'\n  };\n  MessagingClientErrorCode.INTERNAL_ERROR = {\n    code: 'internal-error',\n    message: 'An internal error has occurred. Please retry the request.'\n  };\n  MessagingClientErrorCode.UNKNOWN_ERROR = {\n    code: 'unknown-error',\n    message: 'An unknown server error was returned.'\n  };\n  return MessagingClientErrorCode;\n}();\n\nexports.MessagingClientErrorCode = MessagingClientErrorCode;\n\nvar InstallationsClientErrorCode =\n/** @class */\nfunction () {\n  function InstallationsClientErrorCode() {}\n\n  InstallationsClientErrorCode.INVALID_ARGUMENT = {\n    code: 'invalid-argument',\n    message: 'Invalid argument provided.'\n  };\n  InstallationsClientErrorCode.INVALID_PROJECT_ID = {\n    code: 'invalid-project-id',\n    message: 'Invalid project ID provided.'\n  };\n  InstallationsClientErrorCode.INVALID_INSTALLATION_ID = {\n    code: 'invalid-installation-id',\n    message: 'Invalid installation ID provided.'\n  };\n  InstallationsClientErrorCode.API_ERROR = {\n    code: 'api-error',\n    message: 'Installation ID API call failed.'\n  };\n  return InstallationsClientErrorCode;\n}();\n\nexports.InstallationsClientErrorCode = InstallationsClientErrorCode;\n\nvar InstanceIdClientErrorCode =\n/** @class */\nfunction (_super) {\n  __extends(InstanceIdClientErrorCode, _super);\n\n  function InstanceIdClientErrorCode() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  InstanceIdClientErrorCode.INVALID_INSTANCE_ID = {\n    code: 'invalid-instance-id',\n    message: 'Invalid instance ID provided.'\n  };\n  return InstanceIdClientErrorCode;\n}(InstallationsClientErrorCode);\n\nexports.InstanceIdClientErrorCode = InstanceIdClientErrorCode;\n/** @const {ServerToClientCode} Auth server to client enum error codes. */\n\nvar AUTH_SERVER_TO_CLIENT_CODE = {\n  // Feature being configured or used requires a billing account.\n  BILLING_NOT_ENABLED: 'BILLING_NOT_ENABLED',\n  // Claims payload is too large.\n  CLAIMS_TOO_LARGE: 'CLAIMS_TOO_LARGE',\n  // Configuration being added already exists.\n  CONFIGURATION_EXISTS: 'CONFIGURATION_EXISTS',\n  // Configuration not found.\n  CONFIGURATION_NOT_FOUND: 'CONFIGURATION_NOT_FOUND',\n  // Provided credential has insufficient permissions.\n  INSUFFICIENT_PERMISSION: 'INSUFFICIENT_PERMISSION',\n  // Provided configuration has invalid fields.\n  INVALID_CONFIG: 'INVALID_CONFIG',\n  // Provided configuration identifier is invalid.\n  INVALID_CONFIG_ID: 'INVALID_PROVIDER_ID',\n  // ActionCodeSettings missing continue URL.\n  INVALID_CONTINUE_URI: 'INVALID_CONTINUE_URI',\n  // Dynamic link domain in provided ActionCodeSettings is not authorized.\n  INVALID_DYNAMIC_LINK_DOMAIN: 'INVALID_DYNAMIC_LINK_DOMAIN',\n  // uploadAccount provides an email that already exists.\n  DUPLICATE_EMAIL: 'EMAIL_ALREADY_EXISTS',\n  // uploadAccount provides a localId that already exists.\n  DUPLICATE_LOCAL_ID: 'UID_ALREADY_EXISTS',\n  // Request specified a multi-factor enrollment ID that already exists.\n  DUPLICATE_MFA_ENROLLMENT_ID: 'SECOND_FACTOR_UID_ALREADY_EXISTS',\n  // setAccountInfo email already exists.\n  EMAIL_EXISTS: 'EMAIL_ALREADY_EXISTS',\n  // /accounts:sendOobCode for password reset when user is not found.\n  EMAIL_NOT_FOUND: 'EMAIL_NOT_FOUND',\n  // Reserved claim name.\n  FORBIDDEN_CLAIM: 'FORBIDDEN_CLAIM',\n  // Invalid claims provided.\n  INVALID_CLAIMS: 'INVALID_CLAIMS',\n  // Invalid session cookie duration.\n  INVALID_DURATION: 'INVALID_SESSION_COOKIE_DURATION',\n  // Invalid email provided.\n  INVALID_EMAIL: 'INVALID_EMAIL',\n  // Invalid tenant display name. This can be thrown on CreateTenant and UpdateTenant.\n  INVALID_DISPLAY_NAME: 'INVALID_DISPLAY_NAME',\n  // Invalid ID token provided.\n  INVALID_ID_TOKEN: 'INVALID_ID_TOKEN',\n  // Invalid tenant/parent resource name.\n  INVALID_NAME: 'INVALID_NAME',\n  // OIDC configuration has an invalid OAuth client ID.\n  INVALID_OAUTH_CLIENT_ID: 'INVALID_OAUTH_CLIENT_ID',\n  // Invalid page token.\n  INVALID_PAGE_SELECTION: 'INVALID_PAGE_TOKEN',\n  // Invalid phone number.\n  INVALID_PHONE_NUMBER: 'INVALID_PHONE_NUMBER',\n  // Invalid agent project. Either agent project doesn't exist or didn't enable multi-tenancy.\n  INVALID_PROJECT_ID: 'INVALID_PROJECT_ID',\n  // Invalid provider ID.\n  INVALID_PROVIDER_ID: 'INVALID_PROVIDER_ID',\n  // Invalid service account.\n  INVALID_SERVICE_ACCOUNT: 'INVALID_SERVICE_ACCOUNT',\n  // Invalid testing phone number.\n  INVALID_TESTING_PHONE_NUMBER: 'INVALID_TESTING_PHONE_NUMBER',\n  // Invalid tenant type.\n  INVALID_TENANT_TYPE: 'INVALID_TENANT_TYPE',\n  // Missing Android package name.\n  MISSING_ANDROID_PACKAGE_NAME: 'MISSING_ANDROID_PACKAGE_NAME',\n  // Missing configuration.\n  MISSING_CONFIG: 'MISSING_CONFIG',\n  // Missing configuration identifier.\n  MISSING_CONFIG_ID: 'MISSING_PROVIDER_ID',\n  // Missing tenant display name: This can be thrown on CreateTenant and UpdateTenant.\n  MISSING_DISPLAY_NAME: 'MISSING_DISPLAY_NAME',\n  // Email is required for the specified action. For example a multi-factor user requires\n  // a verified email.\n  MISSING_EMAIL: 'MISSING_EMAIL',\n  // Missing iOS bundle ID.\n  MISSING_IOS_BUNDLE_ID: 'MISSING_IOS_BUNDLE_ID',\n  // Missing OIDC issuer.\n  MISSING_ISSUER: 'MISSING_ISSUER',\n  // No localId provided (deleteAccount missing localId).\n  MISSING_LOCAL_ID: 'MISSING_UID',\n  // OIDC configuration is missing an OAuth client ID.\n  MISSING_OAUTH_CLIENT_ID: 'MISSING_OAUTH_CLIENT_ID',\n  // Missing provider ID.\n  MISSING_PROVIDER_ID: 'MISSING_PROVIDER_ID',\n  // Missing SAML RP config.\n  MISSING_SAML_RELYING_PARTY_CONFIG: 'MISSING_SAML_RELYING_PARTY_CONFIG',\n  // Empty user list in uploadAccount.\n  MISSING_USER_ACCOUNT: 'MISSING_UID',\n  // Password auth disabled in console.\n  OPERATION_NOT_ALLOWED: 'OPERATION_NOT_ALLOWED',\n  // Provided credential has insufficient permissions.\n  PERMISSION_DENIED: 'INSUFFICIENT_PERMISSION',\n  // Phone number already exists.\n  PHONE_NUMBER_EXISTS: 'PHONE_NUMBER_ALREADY_EXISTS',\n  // Project not found.\n  PROJECT_NOT_FOUND: 'PROJECT_NOT_FOUND',\n  // In multi-tenancy context: project creation quota exceeded.\n  QUOTA_EXCEEDED: 'QUOTA_EXCEEDED',\n  // Currently only 5 second factors can be set on the same user.\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'SECOND_FACTOR_LIMIT_EXCEEDED',\n  // Tenant not found.\n  TENANT_NOT_FOUND: 'TENANT_NOT_FOUND',\n  // Tenant ID mismatch.\n  TENANT_ID_MISMATCH: 'MISMATCHING_TENANT_ID',\n  // Token expired error.\n  TOKEN_EXPIRED: 'ID_TOKEN_EXPIRED',\n  // Continue URL provided in ActionCodeSettings has a domain that is not whitelisted.\n  UNAUTHORIZED_DOMAIN: 'UNAUTHORIZED_DOMAIN',\n  // A multi-factor user requires a supported first factor.\n  UNSUPPORTED_FIRST_FACTOR: 'UNSUPPORTED_FIRST_FACTOR',\n  // The request specified an unsupported type of second factor.\n  UNSUPPORTED_SECOND_FACTOR: 'UNSUPPORTED_SECOND_FACTOR',\n  // Operation is not supported in a multi-tenant context.\n  UNSUPPORTED_TENANT_OPERATION: 'UNSUPPORTED_TENANT_OPERATION',\n  // A verified email is required for the specified action. For example a multi-factor user\n  // requires a verified email.\n  UNVERIFIED_EMAIL: 'UNVERIFIED_EMAIL',\n  // User on which action is to be performed is not found.\n  USER_NOT_FOUND: 'USER_NOT_FOUND',\n  // Password provided is too weak.\n  WEAK_PASSWORD: 'INVALID_PASSWORD'\n};\n/** @const {ServerToClientCode} Messaging server to client enum error codes. */\n\nvar MESSAGING_SERVER_TO_CLIENT_CODE = {\n  /* GENERIC ERRORS */\n  // Generic invalid message parameter provided.\n  InvalidParameters: 'INVALID_ARGUMENT',\n  // Mismatched sender ID.\n  MismatchSenderId: 'MISMATCHED_CREDENTIAL',\n  // FCM server unavailable.\n  Unavailable: 'SERVER_UNAVAILABLE',\n  // FCM server internal error.\n  InternalServerError: 'INTERNAL_ERROR',\n\n  /* SEND ERRORS */\n  // Invalid registration token format.\n  InvalidRegistration: 'INVALID_REGISTRATION_TOKEN',\n  // Registration token is not registered.\n  NotRegistered: 'REGISTRATION_TOKEN_NOT_REGISTERED',\n  // Registration token does not match restricted package name.\n  InvalidPackageName: 'INVALID_PACKAGE_NAME',\n  // Message payload size limit exceeded.\n  MessageTooBig: 'PAYLOAD_SIZE_LIMIT_EXCEEDED',\n  // Invalid key in the data message payload.\n  InvalidDataKey: 'INVALID_DATA_PAYLOAD_KEY',\n  // Invalid time to live option.\n  InvalidTtl: 'INVALID_OPTIONS',\n  // Device message rate exceeded.\n  DeviceMessageRateExceeded: 'DEVICE_MESSAGE_RATE_EXCEEDED',\n  // Topics message rate exceeded.\n  TopicsMessageRateExceeded: 'TOPICS_MESSAGE_RATE_EXCEEDED',\n  // Invalid APNs credentials.\n  InvalidApnsCredential: 'THIRD_PARTY_AUTH_ERROR',\n\n  /* FCM v1 canonical error codes */\n  NOT_FOUND: 'REGISTRATION_TOKEN_NOT_REGISTERED',\n  PERMISSION_DENIED: 'MISMATCHED_CREDENTIAL',\n  RESOURCE_EXHAUSTED: 'MESSAGE_RATE_EXCEEDED',\n  UNAUTHENTICATED: 'THIRD_PARTY_AUTH_ERROR',\n\n  /* FCM v1 new error codes */\n  APNS_AUTH_ERROR: 'THIRD_PARTY_AUTH_ERROR',\n  INTERNAL: 'INTERNAL_ERROR',\n  INVALID_ARGUMENT: 'INVALID_ARGUMENT',\n  QUOTA_EXCEEDED: 'MESSAGE_RATE_EXCEEDED',\n  SENDER_ID_MISMATCH: 'MISMATCHED_CREDENTIAL',\n  THIRD_PARTY_AUTH_ERROR: 'THIRD_PARTY_AUTH_ERROR',\n  UNAVAILABLE: 'SERVER_UNAVAILABLE',\n  UNREGISTERED: 'REGISTRATION_TOKEN_NOT_REGISTERED',\n  UNSPECIFIED_ERROR: 'UNKNOWN_ERROR'\n};\n/** @const {ServerToClientCode} Topic management (IID) server to client enum error codes. */\n\nvar TOPIC_MGT_SERVER_TO_CLIENT_CODE = {\n  /* TOPIC SUBSCRIPTION MANAGEMENT ERRORS */\n  NOT_FOUND: 'REGISTRATION_TOKEN_NOT_REGISTERED',\n  INVALID_ARGUMENT: 'INVALID_REGISTRATION_TOKEN',\n  TOO_MANY_TOPICS: 'TOO_MANY_TOPICS',\n  RESOURCE_EXHAUSTED: 'TOO_MANY_TOPICS',\n  PERMISSION_DENIED: 'AUTHENTICATION_ERROR',\n  DEADLINE_EXCEEDED: 'SERVER_UNAVAILABLE',\n  INTERNAL: 'INTERNAL_ERROR',\n  UNKNOWN: 'UNKNOWN_ERROR'\n};","map":null,"metadata":{},"sourceType":"script"}