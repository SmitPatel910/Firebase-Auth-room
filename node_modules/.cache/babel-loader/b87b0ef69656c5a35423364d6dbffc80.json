{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar stream_1 = require(\"stream\"); // Copyright 2014 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Populate the `{{projectId}}` placeholder.\n *\n * @throws {Error} If a projectId is required, but one is not provided.\n *\n * @param {*} - Any input value that may contain a placeholder. Arrays and objects will be looped.\n * @param {string} projectId - A projectId. If not provided\n * @return {*} - The original argument with all placeholders populated.\n */\n// eslint-disable-next-line  @typescript-eslint/no-explicit-any\n\n\nfunction replaceProjectIdToken(value, projectId) {\n  if (Array.isArray(value)) {\n    value = value.map(function (v) {\n      return replaceProjectIdToken(v, projectId);\n    });\n  }\n\n  if (value !== null && typeof value === 'object' && !(value instanceof Buffer) && !(value instanceof stream_1.Stream) && typeof value.hasOwnProperty === 'function') {\n    for (var opt in value) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (value.hasOwnProperty(opt)) {\n        value[opt] = replaceProjectIdToken(value[opt], projectId);\n      }\n    }\n  }\n\n  if (typeof value === 'string' && value.indexOf('{{projectId}}') > -1) {\n    if (!projectId || projectId === '{{projectId}}') {\n      throw new MissingProjectIdError();\n    }\n\n    value = value.replace(/{{projectId}}/g, projectId);\n  }\n\n  return value;\n}\n\nexports.replaceProjectIdToken = replaceProjectIdToken;\n/**\n * Custom error type for missing project ID errors.\n */\n\nvar MissingProjectIdError = /*#__PURE__*/function (_Error) {\n  _inherits(MissingProjectIdError, _Error);\n\n  function MissingProjectIdError() {\n    var _this;\n\n    _classCallCheck(this, MissingProjectIdError);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MissingProjectIdError).apply(this, arguments));\n    _this.message = \"Sorry, we cannot connect to Cloud Services without a project\\n    ID. You may specify one with an environment variable named\\n    \\\"GOOGLE_CLOUD_PROJECT\\\".\".replace(/ +/g, ' ');\n    return _this;\n  }\n\n  return MissingProjectIdError;\n}(_wrapNativeSuper(Error));\n\nexports.MissingProjectIdError = MissingProjectIdError;","map":null,"metadata":{},"sourceType":"script"}