{"ast":null,"code":"\"use strict\"; // Copyright 2016 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/*!\n * @module common/operation\n */\n\nvar service_object_1 = require(\"./service-object\");\n\nvar util_1 = require(\"util\"); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nvar Operation = /*#__PURE__*/function (_service_object_1$Ser) {\n  _inherits(Operation, _service_object_1$Ser);\n\n  /**\n   * An Operation object allows you to interact with APIs that take longer to\n   * process things.\n   *\n   * @constructor\n   * @alias module:common/operation\n   *\n   * @param {object} config - Configuration object.\n   * @param {module:common/service|module:common/serviceObject|module:common/grpcService|module:common/grpcServiceObject} config.parent - The parent object.\n   */\n  function Operation(config) {\n    var _this;\n\n    _classCallCheck(this, Operation);\n\n    var methods = {\n      /**\n       * Checks to see if an operation exists.\n       */\n      exists: true,\n\n      /**\n       * Retrieves the operation.\n       */\n      get: true,\n\n      /**\n       * Retrieves metadata for the operation.\n       */\n      getMetadata: {\n        reqOpts: {\n          name: config.id\n        }\n      }\n    };\n    config = Object.assign({\n      baseUrl: ''\n    }, config); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    config.methods = config.methods || methods;\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Operation).call(this, config));\n    _this.completeListeners = 0;\n    _this.hasActiveListeners = false;\n\n    _this.listenForEvents_();\n\n    return _this;\n  }\n  /**\n   * Wraps the `complete` and `error` events in a Promise.\n   *\n   * @return {Promise}\n   */\n\n\n  _createClass(Operation, [{\n    key: \"promise\",\n    value: function promise() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this2.on('error', reject).on('complete', function (metadata) {\n          resolve([metadata]);\n        });\n      });\n    }\n    /**\n     * Begin listening for events on the operation. This method keeps track of how\n     * many \"complete\" listeners are registered and removed, making sure polling\n     * is handled automatically.\n     *\n     * As long as there is one active \"complete\" listener, the connection is open.\n     * When there are no more listeners, the polling stops.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"listenForEvents_\",\n    value: function listenForEvents_() {\n      var _this3 = this;\n\n      this.on('newListener', function (event) {\n        if (event === 'complete') {\n          _this3.completeListeners++;\n\n          if (!_this3.hasActiveListeners) {\n            _this3.hasActiveListeners = true;\n\n            _this3.startPolling_();\n          }\n        }\n      });\n      this.on('removeListener', function (event) {\n        if (event === 'complete' && --_this3.completeListeners === 0) {\n          _this3.hasActiveListeners = false;\n        }\n      });\n    }\n    /**\n     * Poll for a status update. Returns null for an incomplete\n     * status, and metadata for a complete status.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"poll_\",\n    value: function poll_(callback) {\n      this.getMetadata(function (err, body) {\n        if (err || body.error) {\n          callback(err || body.error);\n          return;\n        }\n\n        if (!body.done) {\n          callback(null);\n          return;\n        }\n\n        callback(null, body);\n      });\n    }\n    /**\n     * Poll `getMetadata` to check the operation's status. This runs a loop to\n     * ping the API on an interval.\n     *\n     * Note: This method is automatically called once a \"complete\" event handler\n     * is registered on the operation.\n     *\n     * @private\n     */\n\n  }, {\n    key: \"startPolling_\",\n    value: function () {\n      var _startPolling_ = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var metadata;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (this.hasActiveListeners) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                _context.prev = 2;\n                _context.next = 5;\n                return util_1.promisify(this.poll_.bind(this))();\n\n              case 5:\n                metadata = _context.sent;\n\n                if (metadata) {\n                  _context.next = 9;\n                  break;\n                }\n\n                setTimeout(this.startPolling_.bind(this), this.pollIntervalMs || 500);\n                return _context.abrupt(\"return\");\n\n              case 9:\n                this.emit('complete', metadata);\n                _context.next = 15;\n                break;\n\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](2);\n                this.emit('error', _context.t0);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[2, 12]]);\n      }));\n\n      function startPolling_() {\n        return _startPolling_.apply(this, arguments);\n      }\n\n      return startPolling_;\n    }()\n  }]);\n\n  return Operation;\n}(service_object_1.ServiceObject);\n\nexports.Operation = Operation;","map":null,"metadata":{},"sourceType":"script"}