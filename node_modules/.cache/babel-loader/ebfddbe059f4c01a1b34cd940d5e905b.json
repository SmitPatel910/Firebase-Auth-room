{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nvar _wrapNativeSuper = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapNativeSuper\");\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleErrorDecoder = exports.GoogleError = void 0;\n\nvar status_1 = require(\"./status\");\n\nvar protobuf = require(\"protobufjs\");\n\nvar GoogleError = /*#__PURE__*/function (_Error) {\n  _inherits(GoogleError, _Error);\n\n  function GoogleError() {\n    _classCallCheck(this, GoogleError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(GoogleError).apply(this, arguments));\n  }\n\n  return GoogleError;\n}(_wrapNativeSuper(Error));\n\nexports.GoogleError = GoogleError;\n\nvar GoogleErrorDecoder = /*#__PURE__*/function () {\n  function GoogleErrorDecoder() {\n    _classCallCheck(this, GoogleErrorDecoder);\n\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    var errorProtoJson = require('../../protos/status.json');\n\n    this.root = protobuf.Root.fromJSON(errorProtoJson);\n    this.anyType = this.root.lookupType('google.protobuf.Any');\n    this.statusType = this.root.lookupType('google.rpc.Status');\n    this.errorInfoType = this.root.lookupType('ErrorInfo');\n  }\n\n  _createClass(GoogleErrorDecoder, [{\n    key: \"decodeProtobufAny\",\n    value: function decodeProtobufAny(anyValue) {\n      var match = anyValue.type_url.match(/^type.googleapis.com\\/(.*)/);\n\n      if (!match) {\n        throw new Error(\"Unknown type encoded in google.protobuf.any: \".concat(anyValue.type_url));\n      }\n\n      var typeName = match[1];\n      var type = this.root.lookupType(typeName);\n\n      if (!type) {\n        throw new Error(\"Cannot lookup type \".concat(typeName));\n      }\n\n      return type.decode(anyValue.value);\n    } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n  }, {\n    key: \"decodeRpcStatus\",\n    value: function decodeRpcStatus(buffer) {\n      var uint8array = new Uint8Array(buffer);\n      var status = this.statusType.decode(uint8array); // google.rpc.Status contains an array of google.protobuf.Any\n      // which need a special treatment\n\n      var details = [];\n\n      var _iterator = _createForOfIteratorHelper(status.details),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var detail = _step.value;\n\n          try {\n            var decodedDetail = this.decodeProtobufAny(detail);\n            details.push(decodedDetail);\n          } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var result = {\n        code: status.code,\n        message: status.message,\n        details: details\n      };\n      return result;\n    } // Construct an Error from a StatusObject.\n    // Adapted from https://github.com/grpc/grpc-node/blob/master/packages/grpc-js/src/call.ts#L79\n\n  }, {\n    key: \"callErrorFromStatus\",\n    value: function callErrorFromStatus(status) {\n      status.message = \"\".concat(status.code, \" \").concat(status_1.Status[status.code], \": \").concat(status.message);\n      return Object.assign(new Error(status.message), status);\n    } // Decodes gRPC-fallback error which is an instance of google.rpc.Status,\n    // and puts it into the object similar to gRPC ServiceError object.\n\n  }, {\n    key: \"decodeErrorFromBuffer\",\n    value: function decodeErrorFromBuffer(buffer) {\n      return this.callErrorFromStatus(this.decodeRpcStatus(buffer));\n    } // Decodes gRPC-fallback error which is an instance of google.rpc.Status.\n\n  }, {\n    key: \"decodeRpcStatusDetails\",\n    value: function decodeRpcStatusDetails(bufferArr) {\n      var _this = this;\n\n      var status = [];\n      bufferArr.forEach(function (buffer) {\n        var uint8array = new Uint8Array(buffer);\n\n        var error_status = _this.statusType.decode(uint8array);\n\n        var _iterator2 = _createForOfIteratorHelper(error_status.details),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var detail = _step2.value;\n\n            try {\n              status.push(_this.decodeProtobufAny(detail));\n            } catch (err) {// cannot decode detail, likely because of the unknown type - just skip it\n            }\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      });\n      return status;\n    }\n  }, {\n    key: \"decodeMetadata\",\n    value: function decodeMetadata(err) {\n      if (!err.metadata) {\n        return err;\n      }\n\n      if (err.metadata.get('grpc-status-details-bin')) {\n        err.statusDetails = this.decodeRpcStatusDetails(err.metadata.get('grpc-status-details-bin'));\n      } // Promote the ErrorInfo fields as first-class of error\n\n\n      if (err.metadata.get('google.rpc.errorinfo-bin')) {\n        var buffer = err.metadata.get('google.rpc.errorinfo-bin');\n\n        if (buffer.length > 1) {\n          throw new GoogleError(\"Multiple ErrorInfo type encoded in err.metadata.get('google.rpc.errorinfo-bin'): \".concat(err.metadata.get('google.rpc.errorinfo-bin')));\n        }\n\n        var uint8array = new Uint8Array(buffer[0]);\n        var errorInfo = this.errorInfoType.decode(uint8array);\n\n        if (errorInfo.reason) {\n          err.reason = errorInfo.reason;\n        }\n\n        if (errorInfo.domain) {\n          err.domain = errorInfo.domain;\n        }\n\n        if (errorInfo.metadata) {\n          for (var _i = 0, _Object$entries = Object.entries(errorInfo.metadata); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n                key = _Object$entries$_i[0],\n                value = _Object$entries$_i[1];\n\n            err.metadata.set(key, value);\n          }\n        }\n      }\n\n      return err;\n    }\n  }]);\n\n  return GoogleErrorDecoder;\n}();\n\nexports.GoogleErrorDecoder = GoogleErrorDecoder;","map":null,"metadata":{},"sourceType":"script"}