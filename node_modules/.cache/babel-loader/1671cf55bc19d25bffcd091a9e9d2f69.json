{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createApiCall = void 0;\n/**\n * Provides function wrappers that implement page streaming and retrying.\n */\n\nvar apiCaller_1 = require(\"./apiCaller\");\n\nvar retries_1 = require(\"./normalCalls/retries\");\n\nvar timeout_1 = require(\"./normalCalls/timeout\");\n/**\n * Converts an rpc call into an API call governed by the settings.\n *\n * In typical usage, `func` will be a promise to a callable used to make an rpc\n * request. This will mostly likely be a bound method from a request stub used\n * to make an rpc call. It is not a direct function but a Promise instance,\n * because of its asynchronism (typically, obtaining the auth information).\n *\n * The result is a function which manages the API call with the given settings\n * and the options on the invocation.\n *\n * @param {Promise<GRPCCall>|GRPCCall} func - is either a promise to be used to make\n *   a bare RPC call, or just a bare RPC call.\n * @param {CallSettings} settings - provides the settings for this call\n * @param {Descriptor} descriptor - optionally specify the descriptor for\n *   the method call.\n * @return {GaxCall} func - a bound method on a request stub used\n *   to make an rpc call.\n */\n\n\nfunction createApiCall(func, settings, descriptor) {\n  // we want to be able to accept both promise resolving to a function and a\n  // function. Currently client librares are only calling this method with a\n  // promise, but it will change.\n  var funcPromise = typeof func === 'function' ? Promise.resolve(func) : func; // the following apiCaller will be used for all calls of this function...\n\n  var apiCaller = apiCaller_1.createAPICaller(settings, descriptor);\n  return function (request, callOptions, callback) {\n    var thisSettings = settings.merge(callOptions);\n    var currentApiCaller = apiCaller; // special case: if bundling is disabled for this one call,\n    // use default API caller instead\n\n    if (settings.isBundling && !thisSettings.isBundling) {\n      currentApiCaller = apiCaller_1.createAPICaller(settings, undefined);\n    }\n\n    var ongoingCall = currentApiCaller.init(callback);\n    funcPromise.then(function (func) {\n      var _a; // Initially, the function is just what gRPC server stub contains.\n\n\n      func = currentApiCaller.wrap(func);\n      var streaming = (_a = currentApiCaller.descriptor) === null || _a === void 0 ? void 0 : _a.streaming;\n      var retry = thisSettings.retry;\n\n      if (!streaming && retry && retry.retryCodes && retry.retryCodes.length > 0) {\n        retry.backoffSettings.initialRpcTimeoutMillis = retry.backoffSettings.initialRpcTimeoutMillis || thisSettings.timeout;\n        return retries_1.retryable(func, thisSettings.retry, thisSettings.otherArgs, thisSettings.apiName);\n      }\n\n      return timeout_1.addTimeoutArg(func, thisSettings.timeout, thisSettings.otherArgs);\n    }).then(function (apiCall) {\n      // After adding retries / timeouts, the call function becomes simpler:\n      // it only accepts request and callback.\n      currentApiCaller.call(apiCall, request, thisSettings, ongoingCall);\n    }).catch(function (err) {\n      currentApiCaller.fail(ongoingCall, err);\n    }); // Calls normally return a \"cancellable promise\" that can be used to `await` for the actual result,\n    // or to cancel the ongoing call.\n\n    return currentApiCaller.result(ongoingCall);\n  };\n}\n\nexports.createApiCall = createApiCall;","map":null,"metadata":{},"sourceType":"script"}