{"ast":null,"code":"'use strict';\n\nvar isObj = require('is-obj');\n\nvar disallowedKeys = ['__proto__', 'prototype', 'constructor'];\n\nvar isValidPath = function isValidPath(pathSegments) {\n  return !pathSegments.some(function (segment) {\n    return disallowedKeys.includes(segment);\n  });\n};\n\nfunction getPathSegments(path) {\n  var pathArray = path.split('.');\n  var parts = [];\n\n  for (var i = 0; i < pathArray.length; i++) {\n    var p = pathArray[i];\n\n    while (p[p.length - 1] === '\\\\' && pathArray[i + 1] !== undefined) {\n      p = p.slice(0, -1) + '.';\n      p += pathArray[++i];\n    }\n\n    parts.push(p);\n  }\n\n  if (!isValidPath(parts)) {\n    return [];\n  }\n\n  return parts;\n}\n\nmodule.exports = {\n  get: function get(object, path, value) {\n    if (!isObj(object) || typeof path !== 'string') {\n      return value === undefined ? object : value;\n    }\n\n    var pathArray = getPathSegments(path);\n\n    if (pathArray.length === 0) {\n      return;\n    }\n\n    for (var i = 0; i < pathArray.length; i++) {\n      if (!Object.prototype.propertyIsEnumerable.call(object, pathArray[i])) {\n        return value;\n      }\n\n      object = object[pathArray[i]];\n\n      if (object === undefined || object === null) {\n        // `object` is either `undefined` or `null` so we want to stop the loop, and\n        // if this is not the last bit of the path, and\n        // if it did't return `undefined`\n        // it would return `null` if `object` is `null`\n        // but we want `get({foo: null}, 'foo.bar')` to equal `undefined`, or the supplied value, not `null`\n        if (i !== pathArray.length - 1) {\n          return value;\n        }\n\n        break;\n      }\n    }\n\n    return object;\n  },\n  set: function set(object, path, value) {\n    if (!isObj(object) || typeof path !== 'string') {\n      return object;\n    }\n\n    var root = object;\n    var pathArray = getPathSegments(path);\n\n    for (var i = 0; i < pathArray.length; i++) {\n      var p = pathArray[i];\n\n      if (!isObj(object[p])) {\n        object[p] = {};\n      }\n\n      if (i === pathArray.length - 1) {\n        object[p] = value;\n      }\n\n      object = object[p];\n    }\n\n    return root;\n  },\n  delete: function _delete(object, path) {\n    if (!isObj(object) || typeof path !== 'string') {\n      return;\n    }\n\n    var pathArray = getPathSegments(path);\n\n    for (var i = 0; i < pathArray.length; i++) {\n      var p = pathArray[i];\n\n      if (i === pathArray.length - 1) {\n        delete object[p];\n        return;\n      }\n\n      object = object[p];\n\n      if (!isObj(object)) {\n        return;\n      }\n    }\n  },\n  has: function has(object, path) {\n    if (!isObj(object) || typeof path !== 'string') {\n      return false;\n    }\n\n    var pathArray = getPathSegments(path);\n\n    if (pathArray.length === 0) {\n      return false;\n    } // eslint-disable-next-line unicorn/no-for-loop\n\n\n    for (var i = 0; i < pathArray.length; i++) {\n      if (isObj(object)) {\n        if (!(pathArray[i] in object)) {\n          return false;\n        }\n\n        object = object[pathArray[i]];\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}