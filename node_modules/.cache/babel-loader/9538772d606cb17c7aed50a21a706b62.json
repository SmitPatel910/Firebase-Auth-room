{"ast":null,"code":"var _require = require('assert'),\n    assert = _require.strict;\n\nvar _require2 = require('../base/reporter'),\n    Reporter = _require2.Reporter;\n\nvar _require3 = require('../base/buffer'),\n    DecoderBuffer = _require3.DecoderBuffer,\n    EncoderBuffer = _require3.EncoderBuffer; // Supported tags\n\n\nvar tags = ['seq', 'seqof', 'set', 'setof', 'objid', 'bool', 'gentime', 'utctime', 'null_', 'enum', 'int', 'objDesc', 'bitstr', 'bmpstr', 'charstr', 'genstr', 'graphstr', 'ia5str', 'iso646str', 'numstr', 'octstr', 'printstr', 't61str', 'unistr', 'utf8str', 'videostr']; // Public methods list\n\nvar methods = ['key', 'obj', 'use', 'optional', 'explicit', 'implicit', 'def', 'choice', 'any', 'contains'].concat(tags); // Overrided methods list\n\nvar overrided = ['_peekTag', '_decodeTag', '_use', '_decodeStr', '_decodeObjid', '_decodeTime', '_decodeNull', '_decodeInt', '_decodeBool', '_decodeList', '_encodeComposite', '_encodeStr', '_encodeObjid', '_encodeTime', '_encodeNull', '_encodeInt', '_encodeBool'];\n\nfunction Node(enc, parent, name) {\n  var state = {};\n  this._baseState = state;\n  state.name = name;\n  state.enc = enc;\n  state.parent = parent || null;\n  state.children = null; // State\n\n  state.tag = null;\n  state.args = null;\n  state.reverseArgs = null;\n  state.choice = null;\n  state.optional = false;\n  state.any = false;\n  state.obj = false;\n  state.use = null;\n  state.useDecoder = null;\n  state.key = null;\n  state.default = null;\n  state.explicit = null;\n  state.implicit = null;\n  state.contains = null; // Should create new instance on each method\n\n  if (!state.parent) {\n    state.children = [];\n\n    this._wrap();\n  }\n}\n\nvar stateProps = ['enc', 'parent', 'children', 'tag', 'args', 'reverseArgs', 'choice', 'optional', 'any', 'obj', 'use', 'alteredUse', 'key', 'default', 'explicit', 'implicit', 'contains'];\n\nNode.prototype.clone = function clone() {\n  var state = this._baseState;\n  var cstate = {};\n  stateProps.forEach(function (prop) {\n    cstate[prop] = state[prop];\n  });\n  var res = new this.constructor(cstate.parent);\n  res._baseState = cstate;\n  return res;\n};\n\nNode.prototype._wrap = function wrap() {\n  var state = this._baseState;\n  methods.forEach(function (method) {\n    this[method] = function _wrappedMethod() {\n      var clone = new this.constructor(this);\n      state.children.push(clone);\n      return clone[method].apply(clone, arguments);\n    };\n  }, this);\n};\n\nNode.prototype._init = function init(body) {\n  var state = this._baseState;\n  assert(state.parent === null);\n  body.call(this); // Filter children\n\n  state.children = state.children.filter(function (child) {\n    return child._baseState.parent === this;\n  }, this);\n  assert.equal(state.children.length, 1, 'Root node can have only one child');\n};\n\nNode.prototype._useArgs = function useArgs(args) {\n  var state = this._baseState; // Filter children and args\n\n  var children = args.filter(function (arg) {\n    return arg instanceof this.constructor;\n  }, this);\n  args = args.filter(function (arg) {\n    return !(arg instanceof this.constructor);\n  }, this);\n\n  if (children.length !== 0) {\n    assert(state.children === null);\n    state.children = children; // Replace parent to maintain backward link\n\n    children.forEach(function (child) {\n      child._baseState.parent = this;\n    }, this);\n  }\n\n  if (args.length !== 0) {\n    assert(state.args === null);\n    state.args = args;\n    state.reverseArgs = args.map(function (arg) {\n      if (typeof arg !== 'object' || arg.constructor !== Object) {\n        return arg;\n      }\n\n      var res = {};\n      Object.keys(arg).forEach(function (key) {\n        if (key == (key | 0)) {\n          key |= 0;\n        } // eslint-disable-line eqeqeq\n\n\n        var value = arg[key];\n        res[value] = key;\n      });\n      return res;\n    });\n  }\n}; //\n// Overrided methods\n//\n\n\noverrided.forEach(function (method) {\n  Node.prototype[method] = function _overrided() {\n    var state = this._baseState;\n    throw new Error(\"\".concat(method, \" not implemented for encoding: \").concat(state.enc));\n  };\n}); //\n// Public methods\n//\n\ntags.forEach(function (tag) {\n  Node.prototype[tag] = function _tagMethod() {\n    var state = this._baseState;\n    var args = Array.prototype.slice.call(arguments);\n    assert(state.tag === null);\n    state.tag = tag;\n\n    this._useArgs(args);\n\n    return this;\n  };\n});\n\nNode.prototype.use = function use(item) {\n  assert(item);\n  var state = this._baseState;\n  assert(state.use === null);\n  state.use = item;\n  return this;\n};\n\nNode.prototype.optional = function optional() {\n  var state = this._baseState;\n  state.optional = true;\n  return this;\n};\n\nNode.prototype.def = function def(val) {\n  var state = this._baseState;\n  assert(state.default === null);\n  state.default = val;\n  state.optional = true;\n  return this;\n};\n\nNode.prototype.explicit = function explicit(num) {\n  var state = this._baseState;\n  assert(state.explicit === null && state.implicit === null);\n  state.explicit = num;\n  return this;\n};\n\nNode.prototype.implicit = function implicit(num) {\n  var state = this._baseState;\n  assert(state.explicit === null && state.implicit === null);\n  state.implicit = num;\n  return this;\n};\n\nNode.prototype.obj = function obj() {\n  var state = this._baseState;\n  var args = Array.prototype.slice.call(arguments);\n  state.obj = true;\n\n  if (args.length !== 0) {\n    this._useArgs(args);\n  }\n\n  return this;\n};\n\nNode.prototype.key = function key(newKey) {\n  var state = this._baseState;\n  assert(state.key === null);\n  state.key = newKey;\n  return this;\n};\n\nNode.prototype.any = function any() {\n  var state = this._baseState;\n  state.any = true;\n  return this;\n};\n\nNode.prototype.choice = function choice(obj) {\n  var state = this._baseState;\n  assert(state.choice === null);\n  state.choice = obj;\n\n  this._useArgs(Object.keys(obj).map(function (key) {\n    return obj[key];\n  }));\n\n  return this;\n};\n\nNode.prototype.contains = function contains(item) {\n  var state = this._baseState;\n  assert(state.use === null);\n  state.contains = item;\n  return this;\n}; //\n// Decoding\n//\n\n\nNode.prototype._decode = function decode(input, options) {\n  var state = this._baseState; // Decode root node\n\n  if (state.parent === null) {\n    return input.wrapResult(state.children[0]._decode(input, options));\n  }\n\n  var result = state.default;\n  var present = true;\n  var prevKey = null;\n\n  if (state.key !== null) {\n    prevKey = input.enterKey(state.key);\n  } // Check if tag is there\n\n\n  if (state.optional) {\n    var tag = null;\n\n    if (state.explicit !== null) {\n      tag = state.explicit;\n    } else if (state.implicit !== null) {\n      tag = state.implicit;\n    } else if (state.tag !== null) {\n      tag = state.tag;\n    }\n\n    if (tag === null && !state.any) {\n      // Trial and Error\n      var save = input.save();\n\n      try {\n        if (state.choice === null) {\n          this._decodeGeneric(state.tag, input, options);\n        } else {\n          this._decodeChoice(input, options);\n        }\n\n        present = true;\n      } catch (e) {\n        present = false;\n      }\n\n      input.restore(save);\n    } else {\n      present = this._peekTag(input, tag, state.any);\n\n      if (input.isError(present)) {\n        return present;\n      }\n    }\n  } // Push object on stack\n\n\n  var prevObj;\n\n  if (state.obj && present) {\n    prevObj = input.enterObject();\n  }\n\n  if (present) {\n    // Unwrap explicit values\n    if (state.explicit !== null) {\n      var explicit = this._decodeTag(input, state.explicit);\n\n      if (input.isError(explicit)) {\n        return explicit;\n      }\n\n      input = explicit;\n    }\n\n    var start = input.offset; // Unwrap implicit and normal values\n\n    if (state.use === null && state.choice === null) {\n      var _save;\n\n      if (state.any) {\n        _save = input.save();\n      }\n\n      var body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);\n\n      if (input.isError(body)) {\n        return body;\n      }\n\n      if (state.any) {\n        result = input.raw(_save);\n      } else {\n        input = body;\n      }\n    }\n\n    if (options && options.track && state.tag !== null) {\n      options.track(input.path(), start, input.length, 'tagged');\n    }\n\n    if (options && options.track && state.tag !== null) {\n      options.track(input.path(), input.offset, input.length, 'content');\n    } // Select proper method for tag\n\n\n    if (state.any) {// no-op\n    } else if (state.choice === null) {\n      result = this._decodeGeneric(state.tag, input, options);\n    } else {\n      result = this._decodeChoice(input, options);\n    }\n\n    if (input.isError(result)) {\n      return result;\n    } // Decode children\n\n\n    if (!state.any && state.choice === null && state.children !== null) {\n      state.children.forEach(function decodeChildren(child) {\n        // NOTE: We are ignoring errors here, to let parser continue with other\n        // parts of encoded data\n        child._decode(input, options);\n      });\n    } // Decode contained/encoded by schema, only in bit or octet strings\n\n\n    if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {\n      var data = new DecoderBuffer(result);\n      result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);\n    }\n  } // Pop object\n\n\n  if (state.obj && present) {\n    result = input.leaveObject(prevObj);\n  } // Set key\n\n\n  if (state.key !== null && (result !== null || present === true)) {\n    input.leaveKey(prevKey, state.key, result);\n  } else if (prevKey !== null) {\n    input.exitKey(prevKey);\n  }\n\n  return result;\n};\n\nNode.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {\n  var state = this._baseState;\n\n  if (tag === 'seq' || tag === 'set') {\n    return null;\n  }\n\n  if (tag === 'seqof' || tag === 'setof') {\n    return this._decodeList(input, tag, state.args[0], options);\n  } else if (/str$/.test(tag)) {\n    return this._decodeStr(input, tag, options);\n  } else if (tag === 'objid' && state.args) {\n    return this._decodeObjid(input, state.args[0], state.args[1], options);\n  } else if (tag === 'objid') {\n    return this._decodeObjid(input, null, null, options);\n  } else if (tag === 'gentime' || tag === 'utctime') {\n    return this._decodeTime(input, tag, options);\n  } else if (tag === 'null_') {\n    return this._decodeNull(input, options);\n  } else if (tag === 'bool') {\n    return this._decodeBool(input, options);\n  } else if (tag === 'objDesc') {\n    return this._decodeStr(input, tag, options);\n  } else if (tag === 'int' || tag === 'enum') {\n    return this._decodeInt(input, state.args && state.args[0], options);\n  }\n\n  if (state.use !== null) {\n    return this._getUse(state.use, input._reporterState.obj)._decode(input, options);\n  } else {\n    return input.error(\"unknown tag: \".concat(tag));\n  }\n};\n\nNode.prototype._getUse = function _getUse(entity, obj) {\n  var state = this._baseState; // Create altered use decoder if implicit is set\n\n  state.useDecoder = this._use(entity, obj);\n  assert(state.useDecoder._baseState.parent === null);\n  state.useDecoder = state.useDecoder._baseState.children[0];\n\n  if (state.implicit !== state.useDecoder._baseState.implicit) {\n    state.useDecoder = state.useDecoder.clone();\n    state.useDecoder._baseState.implicit = state.implicit;\n  }\n\n  return state.useDecoder;\n};\n\nNode.prototype._decodeChoice = function decodeChoice(input, options) {\n  var state = this._baseState;\n  var result = null;\n  var match = false;\n  Object.keys(state.choice).some(function (key) {\n    var save = input.save();\n    var node = state.choice[key];\n\n    try {\n      var value = node._decode(input, options);\n\n      if (input.isError(value)) {\n        return false;\n      }\n\n      result = {\n        type: key,\n        value: value\n      };\n      match = true;\n    } catch (e) {\n      input.restore(save);\n      return false;\n    }\n\n    return true;\n  }, this);\n\n  if (!match) {\n    return input.error('Choice not matched');\n  }\n\n  return result;\n}; //\n// Encoding\n//\n\n\nNode.prototype._createEncoderBuffer = function createEncoderBuffer(data) {\n  return new EncoderBuffer(data, this.reporter);\n};\n\nNode.prototype._encode = function encode(data, reporter, parent) {\n  var state = this._baseState;\n\n  if (state.default !== null && state.default === data) {\n    return;\n  }\n\n  var result = this._encodeValue(data, reporter, parent);\n\n  if (result === undefined) {\n    return;\n  }\n\n  if (this._skipDefault(result, reporter, parent)) {\n    return;\n  }\n\n  return result;\n};\n\nNode.prototype._encodeValue = function encode(data, reporter, parent) {\n  var state = this._baseState; // Decode root node\n\n  if (state.parent === null) {\n    return state.children[0]._encode(data, reporter || new Reporter());\n  }\n\n  var result = null; // Set reporter to share it with a child class\n\n  this.reporter = reporter; // Check if data is there\n\n  if (state.optional && data === undefined) {\n    if (state.default !== null) {\n      data = state.default;\n    } else {\n      return;\n    }\n  } // Encode children first\n\n\n  var content = null;\n  var primitive = false;\n\n  if (state.any) {\n    // Anything that was given is translated to buffer\n    result = this._createEncoderBuffer(data);\n  } else if (state.choice) {\n    result = this._encodeChoice(data, reporter);\n  } else if (state.contains) {\n    content = this._getUse(state.contains, parent)._encode(data, reporter);\n    primitive = true;\n  } else if (state.children) {\n    content = state.children.map(function (child) {\n      if (child._baseState.tag === 'null_') {\n        return child._encode(null, reporter, data);\n      }\n\n      if (child._baseState.key === null) {\n        return reporter.error('Child should have a key');\n      }\n\n      var prevKey = reporter.enterKey(child._baseState.key);\n\n      if (typeof data !== 'object') {\n        return reporter.error('Child expected, but input is not object');\n      }\n\n      var res = child._encode(data[child._baseState.key], reporter, data);\n\n      reporter.leaveKey(prevKey);\n      return res;\n    }, this).filter(function (child) {\n      return child;\n    });\n    content = this._createEncoderBuffer(content);\n  } else {\n    if (state.tag === 'seqof' || state.tag === 'setof') {\n      if (!(state.args && state.args.length === 1)) {\n        return reporter.error(\"Too many args for: \".concat(state.tag));\n      }\n\n      if (!Array.isArray(data)) {\n        return reporter.error('seqof/setof, but data is not Array');\n      }\n\n      var child = this.clone();\n      child._baseState.implicit = null;\n      content = this._createEncoderBuffer(data.map(function (item) {\n        var state = this._baseState;\n        return this._getUse(state.args[0], data)._encode(item, reporter);\n      }, child));\n    } else if (state.use !== null) {\n      result = this._getUse(state.use, parent)._encode(data, reporter);\n    } else {\n      content = this._encodePrimitive(state.tag, data);\n      primitive = true;\n    }\n  } // Encode data itself\n\n\n  if (!state.any && state.choice === null) {\n    var tag = state.implicit !== null ? state.implicit : state.tag;\n    var cls = state.implicit === null ? 'universal' : 'context';\n\n    if (tag === null) {\n      if (state.use === null) {\n        reporter.error('Tag could be omitted only for .use()');\n      }\n    } else {\n      if (state.use === null) {\n        result = this._encodeComposite(tag, primitive, cls, content);\n      }\n    }\n  } // Wrap in explicit\n\n\n  if (state.explicit !== null) {\n    result = this._encodeComposite(state.explicit, false, 'context', result);\n  }\n\n  return result;\n};\n\nNode.prototype._encodeChoice = function encodeChoice(data, reporter) {\n  var state = this._baseState;\n  var node = state.choice[data.type];\n\n  if (!node) {\n    assert(false, \"\".concat(data.type, \" not found in \").concat(JSON.stringify(Object.keys(state.choice))));\n  }\n\n  return node._encode(data.value, reporter);\n};\n\nNode.prototype._encodePrimitive = function encodePrimitive(tag, data) {\n  var state = this._baseState;\n\n  if (/str$/.test(tag)) {\n    return this._encodeStr(data, tag);\n  } else if (tag === 'objid' && state.args) {\n    return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);\n  } else if (tag === 'objid') {\n    return this._encodeObjid(data, null, null);\n  } else if (tag === 'gentime' || tag === 'utctime') {\n    return this._encodeTime(data, tag);\n  } else if (tag === 'null_') {\n    return this._encodeNull();\n  } else if (tag === 'int' || tag === 'enum') {\n    return this._encodeInt(data, state.args && state.reverseArgs[0]);\n  } else if (tag === 'bool') {\n    return this._encodeBool(data);\n  } else if (tag === 'objDesc') {\n    return this._encodeStr(data, tag);\n  } else {\n    throw new Error(\"Unsupported tag: \".concat(tag));\n  }\n};\n\nNode.prototype._isNumstr = function isNumstr(str) {\n  return /^[0-9 ]*$/.test(str);\n};\n\nNode.prototype._isPrintstr = function isPrintstr(str) {\n  return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);\n};\n\nmodule.exports = Node;","map":null,"metadata":{},"sourceType":"script"}