{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.googleProtobufTimestampFromProto3JSON = exports.googleProtobufTimestampToProto3JSON = void 0;\n\nfunction googleProtobufTimestampToProto3JSON(obj) {\n  // seconds is an instance of Long so it won't be undefined\n  var durationSeconds = obj.seconds;\n  var durationMilliseconds = typeof obj.nanos === 'number' && obj.nanos > 0 ? Math.floor(obj.nanos / 1000000) : 0;\n  return new Date(durationSeconds * 1000 + durationMilliseconds).toISOString();\n}\n\nexports.googleProtobufTimestampToProto3JSON = googleProtobufTimestampToProto3JSON;\n\nfunction googleProtobufTimestampFromProto3JSON(json) {\n  var match = json.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?/);\n\n  if (!match) {\n    throw new Error(\"googleProtobufDurationFromProto3JSON: incorrect value \".concat(json, \" passed as google.protobuf.Duration\"));\n  }\n\n  var date = new Date(json);\n  var millisecondsSinceEpoch = date.getTime();\n  var seconds = Math.floor(millisecondsSinceEpoch / 1000);\n  var nanos = millisecondsSinceEpoch % 1000 * 1000000;\n  var result = {};\n\n  if (seconds !== 0) {\n    result.seconds = seconds;\n  }\n\n  if (nanos !== 0) {\n    result.nanos = nanos;\n  }\n\n  return result;\n}\n\nexports.googleProtobufTimestampFromProto3JSON = googleProtobufTimestampFromProto3JSON;","map":null,"metadata":{},"sourceType":"script"}