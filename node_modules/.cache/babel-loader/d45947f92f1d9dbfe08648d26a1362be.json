{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar _require = require('util'),\n    promisify = _require.promisify;\n\nvar semver = require('semver');\n\nvar useNativeRecursiveOption = semver.satisfies(process.version, '>=10.12.0'); // https://github.com/nodejs/node/issues/8987\n// https://github.com/libuv/libuv/pull/1088\n\nvar checkPath = function checkPath(pth) {\n  if (process.platform === 'win32') {\n    var pathHasInvalidWinCharacters = /[<>:\"|?*]/.test(pth.replace(path.parse(pth).root, ''));\n\n    if (pathHasInvalidWinCharacters) {\n      var error = new Error(\"Path contains invalid characters: \".concat(pth));\n      error.code = 'EINVAL';\n      throw error;\n    }\n  }\n};\n\nvar processOptions = function processOptions(options) {\n  // https://github.com/sindresorhus/make-dir/issues/18\n  var defaults = {\n    mode: 511,\n    fs: fs\n  };\n  return _objectSpread({}, defaults, options);\n};\n\nvar permissionError = function permissionError(pth) {\n  // This replicates the exception of `fs.mkdir` with native the\n  // `recusive` option when run on an invalid drive under Windows.\n  var error = new Error(\"operation not permitted, mkdir '\".concat(pth, \"'\"));\n  error.code = 'EPERM';\n  error.errno = -4048;\n  error.path = pth;\n  error.syscall = 'mkdir';\n  return error;\n};\n\nvar makeDir = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(input, options) {\n    var mkdir, stat, pth, make;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            checkPath(input);\n            options = processOptions(options);\n            mkdir = promisify(options.fs.mkdir);\n            stat = promisify(options.fs.stat);\n\n            if (!(useNativeRecursiveOption && options.fs.mkdir === fs.mkdir)) {\n              _context2.next = 9;\n              break;\n            }\n\n            pth = path.resolve(input);\n            _context2.next = 8;\n            return mkdir(pth, {\n              mode: options.mode,\n              recursive: true\n            });\n\n          case 8:\n            return _context2.abrupt(\"return\", pth);\n\n          case 9:\n            make = /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(pth) {\n                var stats;\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        _context.prev = 0;\n                        _context.next = 3;\n                        return mkdir(pth, options.mode);\n\n                      case 3:\n                        return _context.abrupt(\"return\", pth);\n\n                      case 6:\n                        _context.prev = 6;\n                        _context.t0 = _context[\"catch\"](0);\n\n                        if (!(_context.t0.code === 'EPERM')) {\n                          _context.next = 10;\n                          break;\n                        }\n\n                        throw _context.t0;\n\n                      case 10:\n                        if (!(_context.t0.code === 'ENOENT')) {\n                          _context.next = 18;\n                          break;\n                        }\n\n                        if (!(path.dirname(pth) === pth)) {\n                          _context.next = 13;\n                          break;\n                        }\n\n                        throw permissionError(pth);\n\n                      case 13:\n                        if (!_context.t0.message.includes('null bytes')) {\n                          _context.next = 15;\n                          break;\n                        }\n\n                        throw _context.t0;\n\n                      case 15:\n                        _context.next = 17;\n                        return make(path.dirname(pth));\n\n                      case 17:\n                        return _context.abrupt(\"return\", make(pth));\n\n                      case 18:\n                        _context.prev = 18;\n                        _context.next = 21;\n                        return stat(pth);\n\n                      case 21:\n                        stats = _context.sent;\n\n                        if (stats.isDirectory()) {\n                          _context.next = 24;\n                          break;\n                        }\n\n                        throw new Error('The path is not a directory');\n\n                      case 24:\n                        _context.next = 29;\n                        break;\n\n                      case 26:\n                        _context.prev = 26;\n                        _context.t1 = _context[\"catch\"](18);\n                        throw _context.t0;\n\n                      case 29:\n                        return _context.abrupt(\"return\", pth);\n\n                      case 30:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee, null, [[0, 6], [18, 26]]);\n              }));\n\n              return function make(_x3) {\n                return _ref2.apply(this, arguments);\n              };\n            }();\n\n            return _context2.abrupt(\"return\", make(path.resolve(input)));\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function makeDir(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nmodule.exports = makeDir;\n\nmodule.exports.sync = function (input, options) {\n  checkPath(input);\n  options = processOptions(options);\n\n  if (useNativeRecursiveOption && options.fs.mkdirSync === fs.mkdirSync) {\n    var pth = path.resolve(input);\n    fs.mkdirSync(pth, {\n      mode: options.mode,\n      recursive: true\n    });\n    return pth;\n  }\n\n  var make = function make(pth) {\n    try {\n      options.fs.mkdirSync(pth, options.mode);\n    } catch (error) {\n      if (error.code === 'EPERM') {\n        throw error;\n      }\n\n      if (error.code === 'ENOENT') {\n        if (path.dirname(pth) === pth) {\n          throw permissionError(pth);\n        }\n\n        if (error.message.includes('null bytes')) {\n          throw error;\n        }\n\n        make(path.dirname(pth));\n        return make(pth);\n      }\n\n      try {\n        if (!options.fs.statSync(pth).isDirectory()) {\n          throw new Error('The path is not a directory');\n        }\n      } catch (_) {\n        throw error;\n      }\n    }\n\n    return pth;\n  };\n\n  return make(path.resolve(input));\n};","map":null,"metadata":{},"sourceType":"script"}