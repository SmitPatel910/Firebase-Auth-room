{"ast":null,"code":"\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar backoff_1 = require(\"./backoff\");\n\nvar logger_1 = require(\"./logger\");\n\nvar path_1 = require(\"./path\");\n\nvar reference_1 = require(\"./reference\");\n\nvar util_1 = require(\"./util\");\n\nvar validate_1 = require(\"./validate\");\n\nvar document_reader_1 = require(\"./document-reader\");\n/*!\n * Error message for transactional reads that were executed after performing\n * writes.\n */\n\n\nvar READ_AFTER_WRITE_ERROR_MSG = 'Firestore transactions require all reads to be executed before all writes.';\n/**\n * A reference to a transaction.\n *\n * The Transaction object passed to a transaction's updateFunction provides\n * the methods to read and write data within the transaction context. See\n * [runTransaction()]{@link Firestore#runTransaction}.\n *\n * @class Transaction\n */\n\nvar Transaction = /*#__PURE__*/function () {\n  /**\n   * @hideconstructor\n   *\n   * @param firestore The Firestore Database client.\n   * @param requestTag A unique client-assigned identifier for the scope of\n   * this transaction.\n   */\n  function Transaction(firestore, requestTag) {\n    _classCallCheck(this, Transaction);\n\n    this._firestore = firestore;\n    this._writeBatch = firestore.batch();\n    this._requestTag = requestTag;\n    this._backoff = new backoff_1.ExponentialBackoff();\n  }\n  /**\n   * Retrieve a document or a query result from the database. Holds a\n   * pessimistic lock on all returned documents.\n   *\n   * @param {DocumentReference|Query} refOrQuery The document or query to\n   * return.\n   * @returns {Promise} A Promise that resolves with a DocumentSnapshot or\n   * QuerySnapshot for the returned documents.\n   *\n   * @example\n   * firestore.runTransaction(transaction => {\n   *   let documentRef = firestore.doc('col/doc');\n   *   return transaction.get(documentRef).then(doc => {\n   *     if (doc.exists) {\n   *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n   *     } else {\n   *       transaction.create(documentRef, { count: 1 });\n   *     }\n   *   });\n   * });\n   */\n\n\n  _createClass(Transaction, [{\n    key: \"get\",\n    value: function get(refOrQuery) {\n      if (!this._writeBatch.isEmpty) {\n        throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n      }\n\n      if (refOrQuery instanceof reference_1.DocumentReference) {\n        var documentReader = new document_reader_1.DocumentReader(this._firestore, [refOrQuery]);\n        documentReader.transactionId = this._transactionId;\n        return documentReader.get(this._requestTag).then(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n              res = _ref2[0];\n\n          return res;\n        });\n      }\n\n      if (refOrQuery instanceof reference_1.Query) {\n        return refOrQuery._get(this._transactionId);\n      }\n\n      throw new Error('Value for argument \"refOrQuery\" must be a DocumentReference or a Query.');\n    }\n    /**\n     * Retrieves multiple documents from Firestore. Holds a pessimistic lock on\n     * all returned documents.\n     *\n     * The first argument is required and must be of type `DocumentReference`\n     * followed by any additional `DocumentReference` documents. If used, the\n     * optional `ReadOptions` must be the last argument.\n     *\n     * @param {...DocumentReference|ReadOptions} documentRefsOrReadOptions The\n     * `DocumentReferences` to receive, followed by an optional field mask.\n     * @returns {Promise<Array.<DocumentSnapshot>>} A Promise that\n     * contains an array with the resulting document snapshots.\n     *\n     * @example\n     * let firstDoc = firestore.doc('col/doc1');\n     * let secondDoc = firestore.doc('col/doc2');\n     * let resultDoc = firestore.doc('col/doc3');\n     *\n     * firestore.runTransaction(transaction => {\n     *   return transaction.getAll(firstDoc, secondDoc).then(docs => {\n     *     transaction.set(resultDoc, {\n     *       sum: docs[0].get('count') + docs[1].get('count')\n     *     });\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      if (!this._writeBatch.isEmpty) {\n        throw new Error(READ_AFTER_WRITE_ERROR_MSG);\n      }\n\n      for (var _len = arguments.length, documentRefsOrReadOptions = new Array(_len), _key = 0; _key < _len; _key++) {\n        documentRefsOrReadOptions[_key] = arguments[_key];\n      }\n\n      validate_1.validateMinNumberOfArguments('Transaction.getAll', documentRefsOrReadOptions, 1);\n\n      var _parseGetAllArguments = parseGetAllArguments(documentRefsOrReadOptions),\n          documents = _parseGetAllArguments.documents,\n          fieldMask = _parseGetAllArguments.fieldMask;\n\n      var documentReader = new document_reader_1.DocumentReader(this._firestore, documents);\n      documentReader.fieldMask = fieldMask || undefined;\n      documentReader.transactionId = this._transactionId;\n      return documentReader.get(this._requestTag);\n    }\n    /**\n     * Create the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The operation will\n     * fail the transaction if a document exists at the specified location.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * created.\n     * @param {DocumentData} data The object data to serialize as the document.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (!doc.exists) {\n     *       transaction.create(documentRef, { foo: 'bar' });\n     *     }\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"create\",\n    value: function create(documentRef, data) {\n      this._writeBatch.create(documentRef, data);\n\n      return this;\n    }\n    /**\n     * Writes to the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. If the document\n     * does not exist yet, it will be created. If you pass\n     * [SetOptions]{@link SetOptions}, the provided data can be merged into the\n     * existing document.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * set.\n     * @param {T|Partial<T>} data The object to serialize as the document.\n     * @param {SetOptions=} options An object to configure the set behavior.\n     * @param {boolean=} options.merge - If true, set() merges the values\n     * specified in its data argument. Fields omitted from this set() call\n     * remain untouched.\n     * @param {Array.<string|FieldPath>=} options.mergeFields - If provided,\n     * set() only replaces the specified field paths. Any field path that is not\n     * specified is ignored and remains untouched.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.set(documentRef, { foo: 'bar' });\n     *   return Promise.resolve();\n     * });\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(documentRef, data, options) {\n      this._writeBatch.set(documentRef, data, options);\n\n      return this;\n    }\n    /**\n     * Updates fields in the document referred to by the provided\n     * [DocumentReference]{@link DocumentReference}. The update will\n     * fail if applied to a document that does not exist.\n     *\n     * The update() method accepts either an object with field paths encoded as\n     * keys and field values encoded as values, or a variable number of arguments\n     * that alternate between field paths and field values. Nested fields can be\n     * updated by providing dot-separated field path strings or by providing\n     * FieldPath objects.\n     *\n     * A Precondition restricting this update can be specified as the last\n     * argument.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * updated.\n     * @param {UpdateData|string|FieldPath} dataOrField An object\n     * containing the fields and values with which to update the document\n     * or the path of the first field to update.\n     * @param {\n     * ...(Precondition|*|string|FieldPath)} preconditionOrValues -\n     * An alternating list of field paths and values to update or a Precondition\n     * to to enforce on this update.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   return transaction.get(documentRef).then(doc => {\n     *     if (doc.exists) {\n     *       transaction.update(documentRef, { count: doc.get('count') + 1 });\n     *     } else {\n     *       transaction.create(documentRef, { count: 1 });\n     *     }\n     *   });\n     * });\n     */\n\n  }, {\n    key: \"update\",\n    value: function update(documentRef, dataOrField) {\n      var _this$_writeBatch;\n\n      for (var _len2 = arguments.length, preconditionOrValues = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n        preconditionOrValues[_key2 - 2] = arguments[_key2];\n      }\n\n      // eslint-disable-next-line prefer-rest-params\n      validate_1.validateMinNumberOfArguments('Transaction.update', arguments, 2);\n\n      (_this$_writeBatch = this._writeBatch).update.apply(_this$_writeBatch, [documentRef, dataOrField].concat(preconditionOrValues));\n\n      return this;\n    }\n    /**\n     * Deletes the document referred to by the provided [DocumentReference]\n     * {@link DocumentReference}.\n     *\n     * @param {DocumentReference} documentRef A reference to the document to be\n     * deleted.\n     * @param {Precondition=} precondition A precondition to enforce for this\n     * delete.\n     * @param {Timestamp=} precondition.lastUpdateTime If set, enforces that the\n     * document was last updated at lastUpdateTime. Fails the transaction if the\n     * document doesn't exist or was last updated at a different time.\n     * @param {boolean=} precondition.exists If set, enforces that the target\n     * document must or must not exist.\n     * @returns {Transaction} This Transaction instance. Used for\n     * chaining method calls.\n     *\n     * @example\n     * firestore.runTransaction(transaction => {\n     *   let documentRef = firestore.doc('col/doc');\n     *   transaction.delete(documentRef);\n     *   return Promise.resolve();\n     * });\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(documentRef, precondition) {\n      this._writeBatch.delete(documentRef, precondition);\n\n      return this;\n    }\n    /**\n     * Starts a transaction and obtains the transaction id from the server.\n     *\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"begin\",\n    value: function begin(readOnly, readTime) {\n      var _this = this;\n\n      var _a;\n\n      var request = {\n        database: this._firestore.formattedName\n      };\n\n      if (readOnly) {\n        request.options = {\n          readOnly: {\n            readTime: (_a = readTime === null || readTime === void 0 ? void 0 : readTime.toProto()) === null || _a === void 0 ? void 0 : _a.timestampValue\n          }\n        };\n      } else if (this._transactionId) {\n        request.options = {\n          readWrite: {\n            retryTransaction: this._transactionId\n          }\n        };\n      }\n\n      return this._firestore.request('beginTransaction', request, this._requestTag).then(function (resp) {\n        _this._transactionId = resp.transaction;\n      });\n    }\n    /**\n     * Commits all queued-up changes in this transaction and releases all locks.\n     *\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      return this._writeBatch._commit({\n        transactionId: this._transactionId,\n        requestTag: this._requestTag\n      }).then(function () {});\n    }\n    /**\n     * Releases all locks and rolls back this transaction.\n     *\n     * @private\n     * @internal\n     */\n\n  }, {\n    key: \"rollback\",\n    value: function rollback() {\n      var request = {\n        database: this._firestore.formattedName,\n        transaction: this._transactionId\n      };\n      return this._firestore.request('rollback', request, this._requestTag);\n    }\n    /**\n     * Executes `updateFunction()` and commits the transaction with retry.\n     *\n     * @private\n     * @internal\n     * @param updateFunction The user function to execute within the transaction\n     * context.\n     * @param requestTag A unique client-assigned identifier for the scope of\n     * this transaction.\n     * @param options The user-defined options for this transaction.\n     */\n\n  }, {\n    key: \"runTransaction\",\n    value: function () {\n      var _runTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(updateFunction, options) {\n        var result, lastError, attempt, promise;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                lastError = undefined;\n                attempt = 0;\n\n              case 2:\n                if (!(attempt < options.maxAttempts)) {\n                  _context.next = 33;\n                  break;\n                }\n\n                _context.prev = 3;\n\n                if (!lastError) {\n                  _context.next = 8;\n                  break;\n                }\n\n                logger_1.logger('Firestore.runTransaction', this._requestTag, 'Retrying transaction after error:', lastError);\n                _context.next = 8;\n                return this.rollback();\n\n              case 8:\n                this._writeBatch._reset();\n\n                _context.next = 11;\n                return this.maybeBackoff(lastError);\n\n              case 11:\n                _context.next = 13;\n                return this.begin(options.readOnly, options.readTime);\n\n              case 13:\n                promise = updateFunction(this);\n\n                if (promise instanceof Promise) {\n                  _context.next = 16;\n                  break;\n                }\n\n                throw new Error('You must return a Promise in your transaction()-callback.');\n\n              case 16:\n                _context.next = 18;\n                return promise;\n\n              case 18:\n                result = _context.sent;\n                _context.next = 21;\n                return this.commit();\n\n              case 21:\n                return _context.abrupt(\"return\", result);\n\n              case 24:\n                _context.prev = 24;\n                _context.t0 = _context[\"catch\"](3);\n                logger_1.logger('Firestore.runTransaction', this._requestTag, 'Rolling back transaction after callback error:', _context.t0);\n                lastError = _context.t0;\n\n                if (!(!this._transactionId || !isRetryableTransactionError(_context.t0))) {\n                  _context.next = 30;\n                  break;\n                }\n\n                return _context.abrupt(\"break\", 33);\n\n              case 30:\n                ++attempt;\n                _context.next = 2;\n                break;\n\n              case 33:\n                logger_1.logger('Firestore.runTransaction', this._requestTag, 'Transaction not eligible for retry, returning error: %s', lastError);\n                _context.next = 36;\n                return this.rollback();\n\n              case 36:\n                return _context.abrupt(\"return\", Promise.reject(lastError));\n\n              case 37:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[3, 24]]);\n      }));\n\n      function runTransaction(_x, _x2) {\n        return _runTransaction.apply(this, arguments);\n      }\n\n      return runTransaction;\n    }()\n    /**\n     * Delays further operations based on the provided error.\n     *\n     * @private\n     * @internal\n     * @return A Promise that resolves after the delay expired.\n     */\n\n  }, {\n    key: \"maybeBackoff\",\n    value: function () {\n      var _maybeBackoff = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(error) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if ((error === null || error === void 0 ? void 0 : error.code) === 8\n                /* RESOURCE_EXHAUSTED */\n                ) {\n                    this._backoff.resetToMax();\n                  }\n\n                _context2.next = 3;\n                return this._backoff.backoffAndWait();\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function maybeBackoff(_x3) {\n        return _maybeBackoff.apply(this, arguments);\n      }\n\n      return maybeBackoff;\n    }()\n  }]);\n\n  return Transaction;\n}();\n\nexports.Transaction = Transaction;\n/**\n * Parses the arguments for the `getAll()` call supported by both the Firestore\n * and Transaction class.\n *\n * @private\n * @internal\n * @param documentRefsOrReadOptions An array of document references followed by\n * an optional ReadOptions object.\n */\n\nfunction parseGetAllArguments(documentRefsOrReadOptions) {\n  var documents;\n  var readOptions = undefined;\n\n  if (Array.isArray(documentRefsOrReadOptions[0])) {\n    throw new Error('getAll() no longer accepts an array as its first argument. ' + 'Please unpack your array and call getAll() with individual arguments.');\n  }\n\n  if (documentRefsOrReadOptions.length > 0 && util_1.isPlainObject(documentRefsOrReadOptions[documentRefsOrReadOptions.length - 1])) {\n    readOptions = documentRefsOrReadOptions.pop();\n    documents = documentRefsOrReadOptions;\n  } else {\n    documents = documentRefsOrReadOptions;\n  }\n\n  for (var i = 0; i < documents.length; ++i) {\n    reference_1.validateDocumentReference(i, documents[i]);\n  }\n\n  validateReadOptions('options', readOptions, {\n    optional: true\n  });\n  var fieldMask = readOptions && readOptions.fieldMask ? readOptions.fieldMask.map(function (fieldPath) {\n    return path_1.FieldPath.fromArgument(fieldPath);\n  }) : null;\n  return {\n    fieldMask: fieldMask,\n    documents: documents\n  };\n}\n\nexports.parseGetAllArguments = parseGetAllArguments;\n/**\n * Validates the use of 'options' as ReadOptions and enforces that 'fieldMask'\n * is an array of strings or field paths.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value The input to validate.\n * @param options Options that specify whether the ReadOptions can be omitted.\n */\n\nfunction validateReadOptions(arg, value, options) {\n  if (!validate_1.validateOptional(value, options)) {\n    if (!util_1.isObject(value)) {\n      throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'read option'), \" Input is not an object.'\"));\n    }\n\n    var _options = value;\n\n    if (_options.fieldMask !== undefined) {\n      if (!Array.isArray(_options.fieldMask)) {\n        throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'read option'), \" \\\"fieldMask\\\" is not an array.\"));\n      }\n\n      for (var i = 0; i < _options.fieldMask.length; ++i) {\n        try {\n          path_1.validateFieldPath(i, _options.fieldMask[i]);\n        } catch (err) {\n          throw new Error(\"\".concat(validate_1.invalidArgumentMessage(arg, 'read option'), \" \\\"fieldMask\\\" is not valid: \").concat(err.message));\n        }\n      }\n    }\n  }\n}\n\nfunction isRetryableTransactionError(error) {\n  if (error.code !== undefined) {\n    // This list is based on https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/core/transaction_runner.ts#L112\n    switch (error.code) {\n      case 10\n      /* ABORTED */\n      :\n      case 1\n      /* CANCELLED */\n      :\n      case 2\n      /* UNKNOWN */\n      :\n      case 4\n      /* DEADLINE_EXCEEDED */\n      :\n      case 13\n      /* INTERNAL */\n      :\n      case 14\n      /* UNAVAILABLE */\n      :\n      case 16\n      /* UNAUTHENTICATED */\n      :\n      case 8\n      /* RESOURCE_EXHAUSTED */\n      :\n        return true;\n\n      case 3\n      /* INVALID_ARGUMENT */\n      :\n        // The Firestore backend uses \"INVALID_ARGUMENT\" for transactions\n        // IDs that have expired. While INVALID_ARGUMENT is generally not\n        // retryable, we retry this specific case.\n        return !!error.message.match(/transaction has expired/);\n\n      default:\n        return false;\n    }\n  }\n\n  return false;\n}","map":null,"metadata":{},"sourceType":"script"}