{"ast":null,"code":"'use strict';\n\nvar mimicFn = require('mimic-fn');\n\nvar calledFunctions = new WeakMap();\n\nvar onetime = function onetime(function_) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (typeof function_ !== 'function') {\n    throw new TypeError('Expected a function');\n  }\n\n  var returnValue;\n  var callCount = 0;\n  var functionName = function_.displayName || function_.name || '<anonymous>';\n\n  var onetime = function onetime() {\n    calledFunctions.set(onetime, ++callCount);\n\n    if (callCount === 1) {\n      for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n        arguments_[_key] = arguments[_key];\n      }\n\n      returnValue = function_.apply(this, arguments_);\n      function_ = null;\n    } else if (options.throw === true) {\n      throw new Error(\"Function `\".concat(functionName, \"` can only be called once\"));\n    }\n\n    return returnValue;\n  };\n\n  mimicFn(onetime, function_);\n  calledFunctions.set(onetime, callCount);\n  return onetime;\n};\n\nmodule.exports = onetime; // TODO: Remove this for the next major release\n\nmodule.exports.default = onetime;\n\nmodule.exports.callCount = function (function_) {\n  if (!calledFunctions.has(function_)) {\n    throw new Error(\"The given function `\".concat(function_.name, \"` is not wrapped by the `onetime` package\"));\n  }\n\n  return calledFunctions.get(function_);\n};","map":null,"metadata":{},"sourceType":"script"}