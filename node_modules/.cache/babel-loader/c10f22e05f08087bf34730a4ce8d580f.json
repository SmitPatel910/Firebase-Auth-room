{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StsCredentials = void 0;\n\nvar querystring = require(\"querystring\");\n\nvar transporters_1 = require(\"../transporters\");\n\nvar oauth2common_1 = require(\"./oauth2common\");\n/**\n * Implements the OAuth 2.0 token exchange based on\n * https://tools.ietf.org/html/rfc8693\n */\n\n\nvar StsCredentials = /*#__PURE__*/function (_oauth2common_1$OAuth) {\n  _inherits(StsCredentials, _oauth2common_1$OAuth);\n\n  /**\n   * Initializes an STS credentials instance.\n   * @param tokenExchangeEndpoint The token exchange endpoint.\n   * @param clientAuthentication The client authentication credentials if\n   *   available.\n   */\n  function StsCredentials(tokenExchangeEndpoint, clientAuthentication) {\n    var _this;\n\n    _classCallCheck(this, StsCredentials);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(StsCredentials).call(this, clientAuthentication));\n    _this.tokenExchangeEndpoint = tokenExchangeEndpoint;\n    _this.transporter = new transporters_1.DefaultTransporter();\n    return _this;\n  }\n  /**\n   * Exchanges the provided token for another type of token based on the\n   * rfc8693 spec.\n   * @param stsCredentialsOptions The token exchange options used to populate\n   *   the token exchange request.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @param options Optional additional GCP-specific non-spec defined options\n   *   to send with the request.\n   *   Example: `&options=${encodeUriComponent(JSON.stringified(options))}`\n   * @return A promise that resolves with the token exchange response containing\n   *   the requested token and its expiration time.\n   */\n\n\n  _createClass(StsCredentials, [{\n    key: \"exchangeToken\",\n    value: function () {\n      var _exchangeToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(stsCredentialsOptions, additionalHeaders, // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      options) {\n        var _a, _b, _c, values, headers, opts, response, stsSuccessfulResponse;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                values = {\n                  grant_type: stsCredentialsOptions.grantType,\n                  resource: stsCredentialsOptions.resource,\n                  audience: stsCredentialsOptions.audience,\n                  scope: (_a = stsCredentialsOptions.scope) === null || _a === void 0 ? void 0 : _a.join(' '),\n                  requested_token_type: stsCredentialsOptions.requestedTokenType,\n                  subject_token: stsCredentialsOptions.subjectToken,\n                  subject_token_type: stsCredentialsOptions.subjectTokenType,\n                  actor_token: (_b = stsCredentialsOptions.actingParty) === null || _b === void 0 ? void 0 : _b.actorToken,\n                  actor_token_type: (_c = stsCredentialsOptions.actingParty) === null || _c === void 0 ? void 0 : _c.actorTokenType,\n                  // Non-standard GCP-specific options.\n                  options: options && JSON.stringify(options)\n                }; // Remove undefined fields.\n\n                Object.keys(values).forEach(function (key) {\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                  if (typeof values[key] === 'undefined') {\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    delete values[key];\n                  }\n                });\n                headers = {\n                  'Content-Type': 'application/x-www-form-urlencoded'\n                }; // Inject additional STS headers if available.\n\n                Object.assign(headers, additionalHeaders || {});\n                opts = {\n                  url: this.tokenExchangeEndpoint,\n                  method: 'POST',\n                  headers: headers,\n                  data: querystring.stringify(values),\n                  responseType: 'json'\n                }; // Apply OAuth client authentication.\n\n                this.applyClientAuthenticationOptions(opts);\n                _context.prev = 6;\n                _context.next = 9;\n                return this.transporter.request(opts);\n\n              case 9:\n                response = _context.sent;\n                // Successful response.\n                stsSuccessfulResponse = response.data;\n                stsSuccessfulResponse.res = response;\n                return _context.abrupt(\"return\", stsSuccessfulResponse);\n\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](6);\n\n                if (!_context.t0.response) {\n                  _context.next = 19;\n                  break;\n                }\n\n                throw oauth2common_1.getErrorFromOAuthErrorResponse(_context.t0.response.data, // Preserve other fields from the original error.\n                _context.t0);\n\n              case 19:\n                throw _context.t0;\n\n              case 20:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[6, 15]]);\n      }));\n\n      function exchangeToken(_x, _x2, _x3) {\n        return _exchangeToken.apply(this, arguments);\n      }\n\n      return exchangeToken;\n    }()\n  }]);\n\n  return StsCredentials;\n}(oauth2common_1.OAuthClientAuthHandler);\n\nexports.StsCredentials = StsCredentials;","map":null,"metadata":{},"sourceType":"script"}