{"ast":null,"code":"/*! firebase-admin v9.11.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MachineLearningApiClient = exports.isGcsTfliteModelOptions = void 0;\n\nvar api_request_1 = require(\"../utils/api-request\");\n\nvar error_1 = require(\"../utils/error\");\n\nvar machine_learning_utils_1 = require(\"./machine-learning-utils\");\n\nvar utils = require(\"../utils/index\");\n\nvar validator = require(\"../utils/validator\");\n\nvar ML_V1BETA2_API = 'https://firebaseml.googleapis.com/v1beta2';\nvar FIREBASE_VERSION_HEADER = {\n  'X-Firebase-Client': \"fire-admin-node/\" + utils.getSdkVersion()\n}; // Operation polling defaults\n\nvar POLL_DEFAULT_MAX_TIME_MILLISECONDS = 120000; // Maximum overall 2 minutes\n\nvar POLL_BASE_WAIT_TIME_MILLISECONDS = 3000; // Start with 3 second delay\n\nvar POLL_MAX_WAIT_TIME_MILLISECONDS = 30000; // Maximum 30 second delay\n\nfunction isGcsTfliteModelOptions(options) {\n  var _a, _b;\n\n  var gcsUri = (_b = (_a = options) === null || _a === void 0 ? void 0 : _a.tfliteModel) === null || _b === void 0 ? void 0 : _b.gcsTfliteUri;\n  return typeof gcsUri !== 'undefined';\n}\n\nexports.isGcsTfliteModelOptions = isGcsTfliteModelOptions;\n/**\n * Class that facilitates sending requests to the Firebase ML backend API.\n *\n * @private\n */\n\nvar MachineLearningApiClient =\n/** @class */\nfunction () {\n  function MachineLearningApiClient(app) {\n    this.app = app;\n\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'First argument passed to admin.machineLearning() must be a valid ' + 'Firebase app instance.');\n    }\n\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n\n  MachineLearningApiClient.prototype.createModel = function (model) {\n    var _this = this;\n\n    if (!validator.isNonNullObject(model) || !validator.isNonEmptyString(model.displayName)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model content.');\n      return Promise.reject(err);\n    }\n\n    return this.getProjectUrl().then(function (url) {\n      var request = {\n        method: 'POST',\n        url: url + \"/models\",\n        data: model\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.updateModel = function (modelId, model, updateMask) {\n    var _this = this;\n\n    if (!validator.isNonEmptyString(modelId) || !validator.isNonNullObject(model) || !validator.isNonEmptyArray(updateMask)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model or mask content.');\n      return Promise.reject(err);\n    }\n\n    return this.getProjectUrl().then(function (url) {\n      var request = {\n        method: 'PATCH',\n        url: url + \"/models/\" + modelId + \"?updateMask=\" + updateMask.join(),\n        data: model\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.getModel = function (modelId) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getModelName(modelId);\n    }).then(function (modelName) {\n      return _this.getResourceWithShortName(modelName);\n    });\n  };\n\n  MachineLearningApiClient.prototype.getOperation = function (operationName) {\n    var _this = this;\n\n    return Promise.resolve().then(function () {\n      return _this.getResourceWithFullName(operationName);\n    });\n  };\n\n  MachineLearningApiClient.prototype.listModels = function (options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    if (!validator.isNonNullObject(options)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid ListModelsOptions');\n      return Promise.reject(err);\n    }\n\n    if (typeof options.filter !== 'undefined' && !validator.isNonEmptyString(options.filter)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid list filter.');\n      return Promise.reject(err);\n    }\n\n    if (typeof options.pageSize !== 'undefined') {\n      if (!validator.isNumber(options.pageSize)) {\n        var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid page size.');\n        return Promise.reject(err);\n      }\n\n      if (options.pageSize < 1 || options.pageSize > 100) {\n        var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Page size must be between 1 and 100.');\n        return Promise.reject(err);\n      }\n    }\n\n    if (typeof options.pageToken !== 'undefined' && !validator.isNonEmptyString(options.pageToken)) {\n      var err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Next page token must be a non-empty string.');\n      return Promise.reject(err);\n    }\n\n    return this.getProjectUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/models\",\n        data: options\n      };\n      return _this.sendRequest(request);\n    });\n  };\n\n  MachineLearningApiClient.prototype.deleteModel = function (modelId) {\n    var _this = this;\n\n    return this.getProjectUrl().then(function (url) {\n      var modelName = _this.getModelName(modelId);\n\n      var request = {\n        method: 'DELETE',\n        url: url + \"/\" + modelName\n      };\n      return _this.sendRequest(request);\n    });\n  };\n  /**\n   * Handles a Long Running Operation coming back from the server.\n   *\n   * @param op The operation to handle\n   * @param options The options for polling\n   */\n\n\n  MachineLearningApiClient.prototype.handleOperation = function (op, options) {\n    if (op.done) {\n      if (op.response) {\n        return Promise.resolve(op.response);\n      } else if (op.error) {\n        var err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(op.error.code, op.error.message);\n        return Promise.reject(err);\n      } // Done operations must have either a response or an error.\n\n\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', 'Invalid operation response.');\n    } // Operation is not done\n\n\n    if (options === null || options === void 0 ? void 0 : options.wait) {\n      return this.pollOperationWithExponentialBackoff(op.name, options);\n    }\n\n    var metadata = op.metadata || {};\n    var metadataType = metadata['@type'] || '';\n\n    if (!metadataType.includes('ModelOperationMetadata')) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', \"Unknown Metadata type: \" + JSON.stringify(metadata));\n    }\n\n    return this.getModel(extractModelId(metadata.name));\n  }; // baseWaitMillis and maxWaitMillis should only ever be modified by unit tests to run faster.\n\n\n  MachineLearningApiClient.prototype.pollOperationWithExponentialBackoff = function (opName, options) {\n    var _this = this;\n\n    var _a, _b, _c;\n\n    var maxTimeMilliseconds = (_a = options === null || options === void 0 ? void 0 : options.maxTimeMillis) !== null && _a !== void 0 ? _a : POLL_DEFAULT_MAX_TIME_MILLISECONDS;\n    var baseWaitMillis = (_b = options === null || options === void 0 ? void 0 : options.baseWaitMillis) !== null && _b !== void 0 ? _b : POLL_BASE_WAIT_TIME_MILLISECONDS;\n    var maxWaitMillis = (_c = options === null || options === void 0 ? void 0 : options.maxWaitMillis) !== null && _c !== void 0 ? _c : POLL_MAX_WAIT_TIME_MILLISECONDS;\n    var poller = new api_request_1.ExponentialBackoffPoller(baseWaitMillis, maxWaitMillis, maxTimeMilliseconds);\n    return poller.poll(function () {\n      return _this.getOperation(opName).then(function (responseData) {\n        if (!responseData.done) {\n          return null;\n        }\n\n        if (responseData.error) {\n          var err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(responseData.error.code, responseData.error.message);\n          throw err;\n        }\n\n        return responseData.response;\n      });\n    });\n  };\n  /**\n   * Gets the specified resource from the ML API. Resource names must be the short names without project\n   * ID prefix (e.g. `models/123456789`).\n   *\n   * @param {string} name Short name of the resource to get. e.g. 'models/12345'\n   * @returns {Promise<T>} A promise that fulfills with the resource.\n   */\n\n\n  MachineLearningApiClient.prototype.getResourceWithShortName = function (name) {\n    var _this = this;\n\n    return this.getProjectUrl().then(function (url) {\n      var request = {\n        method: 'GET',\n        url: url + \"/\" + name\n      };\n      return _this.sendRequest(request);\n    });\n  };\n  /**\n   * Gets the specified resource from the ML API. Resource names must be the full names including project\n   * number prefix.\n   * @param fullName Full resource name of the resource to get. e.g. projects/123465/operations/987654\n   * @returns {Promise<T>} A promise that fulfulls with the resource.\n   */\n\n\n  MachineLearningApiClient.prototype.getResourceWithFullName = function (fullName) {\n    var request = {\n      method: 'GET',\n      url: ML_V1BETA2_API + \"/\" + fullName\n    };\n    return this.sendRequest(request);\n  };\n\n  MachineLearningApiClient.prototype.sendRequest = function (request) {\n    var _this = this;\n\n    request.headers = FIREBASE_VERSION_HEADER;\n    return this.httpClient.send(request).then(function (resp) {\n      return resp.data;\n    }).catch(function (err) {\n      throw _this.toFirebaseError(err);\n    });\n  };\n\n  MachineLearningApiClient.prototype.toFirebaseError = function (err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n\n    var response = err.response;\n\n    if (!response.isJson()) {\n      return new machine_learning_utils_1.FirebaseMachineLearningError('unknown-error', \"Unexpected response with status: \" + response.status + \" and body: \" + response.text);\n    }\n\n    var error = response.data.error || {};\n    var code = 'unknown-error';\n\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n\n    var message = error.message || \"Unknown server error: \" + response.text;\n    return new machine_learning_utils_1.FirebaseMachineLearningError(code, message);\n  };\n\n  MachineLearningApiClient.prototype.getProjectUrl = function () {\n    return this.getProjectIdPrefix().then(function (projectIdPrefix) {\n      return ML_V1BETA2_API + \"/\" + projectIdPrefix;\n    });\n  };\n\n  MachineLearningApiClient.prototype.getProjectIdPrefix = function () {\n    var _this = this;\n\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n\n    return utils.findProjectId(this.app).then(function (projectId) {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n\n      _this.projectIdPrefix = \"projects/\" + projectId;\n      return _this.projectIdPrefix;\n    });\n  };\n\n  MachineLearningApiClient.prototype.getModelName = function (modelId) {\n    if (!validator.isNonEmptyString(modelId)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must be a non-empty string.');\n    }\n\n    if (modelId.indexOf('/') !== -1) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must not contain any \"/\" characters.');\n    }\n\n    return \"models/\" + modelId;\n  };\n\n  return MachineLearningApiClient;\n}();\n\nexports.MachineLearningApiClient = MachineLearningApiClient;\nvar ERROR_CODE_MAPPING = {\n  INVALID_ARGUMENT: 'invalid-argument',\n  NOT_FOUND: 'not-found',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'authentication-error',\n  UNKNOWN: 'unknown-error'\n};\n\nfunction extractModelId(resourceName) {\n  return resourceName.split('/').pop();\n}","map":null,"metadata":{},"sourceType":"script"}