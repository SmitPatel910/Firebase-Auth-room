{"ast":null,"code":"var _defineProperty = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/defineProperty\");\n\nvar _require = require('crypto'),\n    pbkdf2 = _require.pbkdf2Sync,\n    randomBytes = _require.randomBytes;\n\nvar _require2 = require('../help/consts'),\n    KEYOBJECT = _require2.KEYOBJECT;\n\nvar base64url = require('../help/base64url');\n\nvar SALT_LENGTH = 16;\nvar NULL_BUFFER = Buffer.alloc(1, 0);\n\nvar concatSalt = function concatSalt(alg, p2s) {\n  return Buffer.concat([Buffer.from(alg, 'utf8'), NULL_BUFFER, p2s]);\n};\n\nvar wrapKey = function wrapKey(keylen, sha, concat, wrap, _ref, payload) {\n  var keyObject = _ref[KEYOBJECT];\n  // Note that if password-based encryption is used for multiple\n  // recipients, it is expected that each recipient use different values\n  // for the PBES2 parameters \"p2s\" and \"p2c\".\n  // here we generate p2c between 2048 and 4096 and random p2s\n  var p2c = Math.floor(Math.random() * 2049 + 2048);\n  var p2s = randomBytes(SALT_LENGTH);\n  var salt = concat(p2s);\n  var derivedKey = pbkdf2(keyObject.export(), salt, p2c, keylen, sha);\n  var result = wrap(_defineProperty({}, KEYOBJECT, derivedKey), payload);\n  result.header = result.header || {};\n  Object.assign(result.header, {\n    p2c: p2c,\n    p2s: base64url.encodeBuffer(p2s)\n  });\n  return result;\n};\n\nvar unwrapKey = function unwrapKey(keylen, sha, concat, unwrap, _ref2, payload, header) {\n  var keyObject = _ref2[KEYOBJECT];\n  var p2s = header.p2s,\n      p2c = header.p2c;\n  var salt = concat(p2s);\n  var derivedKey = pbkdf2(keyObject.export(), salt, p2c, keylen, sha);\n  return unwrap(_defineProperty({}, KEYOBJECT, derivedKey), payload, header);\n};\n\nmodule.exports = function (JWA, JWK) {\n  ['PBES2-HS256+A128KW', 'PBES2-HS384+A192KW', 'PBES2-HS512+A256KW'].forEach(function (jwaAlg) {\n    var kw = jwaAlg.substr(-6);\n    var kwWrap = JWA.keyManagementEncrypt.get(kw);\n    var kwUnwrap = JWA.keyManagementDecrypt.get(kw);\n    var keylen = parseInt(jwaAlg.substr(13, 3), 10) / 8;\n    var sha = \"sha\".concat(jwaAlg.substr(8, 3));\n\n    if (kwWrap && kwUnwrap) {\n      JWA.keyManagementEncrypt.set(jwaAlg, wrapKey.bind(undefined, keylen, sha, concatSalt.bind(undefined, jwaAlg), kwWrap));\n      JWA.keyManagementDecrypt.set(jwaAlg, unwrapKey.bind(undefined, keylen, sha, concatSalt.bind(undefined, jwaAlg), kwUnwrap));\n\n      JWK.oct.deriveKey[jwaAlg] = function (key) {\n        return key.use === 'enc' || key.use === undefined;\n      };\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}