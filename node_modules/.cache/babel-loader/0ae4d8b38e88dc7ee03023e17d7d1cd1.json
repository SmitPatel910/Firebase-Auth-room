{"ast":null,"code":"\"use strict\"; // Copyright 2021 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\OneDrive\\\\Desktop\\\\RTC-React\\\\Frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/* global window */\n\nvar gax = require(\"google-gax\");\n\nvar jsonProtos = require(\"../../protos/protos.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/firestore_admin_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\n\n\nvar gapicConfig = require(\"./firestore_admin_client_config.json\");\n\nvar google_gax_1 = require(\"google-gax\");\n\nvar version = require('../../../package.json').version;\n/**\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\n *  service `google.longrunning.Operations`.\n * @class\n * @memberof v1\n */\n\n\nvar FirestoreAdminClient = /*#__PURE__*/function () {\n  /**\n   * Construct an instance of FirestoreAdminClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean} [options.fallback] - Use HTTP fallback mode.\n   *     In fallback mode, a special browser-compatible transport implementation is used\n   *     instead of gRPC transport. In browser context (if the `window` object is defined)\n   *     the fallback mode is enabled automatically; set `options.fallback` to `false`\n   *     if you need to override this behavior.\n   */\n  function FirestoreAdminClient(opts) {\n    _classCallCheck(this, FirestoreAdminClient);\n\n    var _a, _b;\n\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    }; // Ensure that options include all the required fields.\n\n    var staticMembers = this.constructor;\n    var servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    var port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    var clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    var fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath: servicePath,\n      port: port,\n      clientConfig: clientConfig,\n      fallback: fallback\n    }, opts); // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    } // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n\n\n    this._gaxModule = opts.fallback ? gax.fallback : gax; // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts); // Save options to use in initialize() method.\n\n    this._opts = opts; // Save the auth object to the client, for use by other methods.\n\n    this.auth = this._gaxGrpc.auth; // Set the default scopes in auth client if needed.\n\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    } // Determine the client header string.\n\n\n    var clientHeader = [\"gax/\".concat(this._gaxModule.version), \"gapic/\".concat(version)];\n\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(\"gl-node/\".concat(process.versions.node));\n    } else {\n      clientHeader.push(\"gl-web/\".concat(this._gaxModule.version));\n    }\n\n    if (!opts.fallback) {\n      clientHeader.push(\"grpc/\".concat(this._gaxGrpc.grpcVersion));\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(\"rest/\".concat(this._gaxGrpc.grpcVersion));\n    }\n\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(\"\".concat(opts.libName, \"/\").concat(opts.libVersion));\n    } // Load the applicable protos.\n\n\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos); // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n\n    this.pathTemplates = {\n      collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n      databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n      fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n      indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}')\n    }; // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n\n    this.descriptors.page = {\n      listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n      listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields')\n    };\n\n    var protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos); // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n\n\n    this.operationsClient = this._gaxModule.lro({\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    }).operationsClient(opts);\n    var createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n    var createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n    var updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n    var updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n    var exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n    var exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n    var importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n    var importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n    this.descriptors.longrunning = {\n      createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n      updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n      exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n      importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata))\n    }; // Put together the default options sent with requests.\n\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    }); // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n\n    this.innerApiCalls = {}; // Add a warn function to the client constructor so it can be easily tested.\n\n    this.warn = gax.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n\n\n  _createClass(FirestoreAdminClient, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var _this = this;\n\n      // If the client stub promise is already initialized, return immediately.\n      if (this.firestoreAdminStub) {\n        return this.firestoreAdminStub;\n      } // Put together the \"service stub\" for\n      // google.firestore.admin.v1.FirestoreAdmin.\n\n\n      this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin') : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts, this._providedCustomServicePath); // Iterate over each of the methods that the service provides\n      // and create an API call method for each.\n\n      var firestoreAdminStubMethods = ['createIndex', 'listIndexes', 'getIndex', 'deleteIndex', 'getField', 'updateField', 'listFields', 'exportDocuments', 'importDocuments'];\n\n      var _loop = function _loop() {\n        var methodName = _firestoreAdminStubMe[_i];\n\n        var callPromise = _this.firestoreAdminStub.then(function (stub) {\n          return function () {\n            if (_this._terminated) {\n              return Promise.reject('The client has already been closed.');\n            }\n\n            var func = stub[methodName];\n\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            return func.apply(stub, args);\n          };\n        }, function (err) {\n          return function () {\n            throw err;\n          };\n        });\n\n        var descriptor = _this.descriptors.page[methodName] || _this.descriptors.longrunning[methodName] || undefined;\n\n        var apiCall = _this._gaxModule.createApiCall(callPromise, _this._defaults[methodName], descriptor);\n\n        _this.innerApiCalls[methodName] = apiCall;\n      };\n\n      for (var _i = 0, _firestoreAdminStubMe = firestoreAdminStubMethods; _i < _firestoreAdminStubMe.length; _i++) {\n        _loop();\n      }\n\n      return this.firestoreAdminStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n\n  }, {\n    key: \"getProjectId\",\n\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    value: function getProjectId(callback) {\n      if (callback) {\n        this.auth.getProjectId(callback);\n        return;\n      }\n\n      return this.auth.getProjectId();\n    }\n    /**\n     * Gets a composite index.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Index]{@link google.firestore.admin.v1.Index}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getIndex(request);\n     */\n\n  }, {\n    key: \"getIndex\",\n    value: function getIndex(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.getIndex(request, options, callback);\n    }\n    /**\n     * Deletes a composite index.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/indexes/{index_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Empty]{@link google.protobuf.Empty}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.deleteIndex(request);\n     */\n\n  }, {\n    key: \"deleteIndex\",\n    value: function deleteIndex(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.deleteIndex(request, options, callback);\n    }\n    /**\n     * Gets the metadata and configuration for a Field.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. A name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}/fields/{field_id}`\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing [Field]{@link google.firestore.admin.v1.Field}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * const [response] = await client.getField(request);\n     */\n\n  }, {\n    key: \"getField\",\n    value: function getField(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.getField(request, options, callback);\n    }\n    /**\n     * Creates a composite index. This returns a {@link google.longrunning.Operation|google.longrunning.Operation}\n     * which may be used to track the status of the creation. The metadata for\n     * the operation will be the type {@link google.firestore.admin.v1.IndexOperationMetadata|IndexOperationMetadata}.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {google.firestore.admin.v1.Index} request.index\n     *   Required. The composite index to create.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.createIndex(request);\n     * const [response] = await operation.promise();\n     */\n\n  }, {\n    key: \"createIndex\",\n    value: function createIndex(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.createIndex(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `createIndex()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkCreateIndexProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n\n  }, {\n    key: \"checkCreateIndexProgress\",\n    value: function () {\n      var _checkCreateIndexProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n        var request, _yield$this$operation, _yield$this$operation2, operation, decodeOperation;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n                  name: name\n                });\n                _context.next = 3;\n                return this.operationsClient.getOperation(request);\n\n              case 3:\n                _yield$this$operation = _context.sent;\n                _yield$this$operation2 = _slicedToArray(_yield$this$operation, 1);\n                operation = _yield$this$operation2[0];\n                decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createIndex, gax.createDefaultBackoffSettings());\n                return _context.abrupt(\"return\", decodeOperation);\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function checkCreateIndexProgress(_x) {\n        return _checkCreateIndexProgress.apply(this, arguments);\n      }\n\n      return checkCreateIndexProgress;\n    }()\n    /**\n     * Updates a field configuration. Currently, field updates apply only to\n     * single field index configuration. However, calls to\n     * {@link google.firestore.admin.v1.FirestoreAdmin.UpdateField|FirestoreAdmin.UpdateField} should provide a field mask to avoid\n     * changing any configuration that the caller isn't aware of. The field mask\n     * should be specified as: `{ paths: \"index_config\" }`.\n     *\n     * This call returns a {@link google.longrunning.Operation|google.longrunning.Operation} which may be used to\n     * track the status of the field update. The metadata for\n     * the operation will be the type {@link google.firestore.admin.v1.FieldOperationMetadata|FieldOperationMetadata}.\n     *\n     * To configure the default field settings for the database, use\n     * the special `Field` with resource name:\n     * `projects/{project_id}/databases/{database_id}/collectionGroups/__default__/fields/*`.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {google.firestore.admin.v1.Field} request.field\n     *   Required. The field to be updated.\n     * @param {google.protobuf.FieldMask} request.updateMask\n     *   A mask, relative to the field. If specified, only configuration specified\n     *   by this field_mask will be updated in the field.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.updateField(request);\n     * const [response] = await operation.promise();\n     */\n\n  }, {\n    key: \"updateField\",\n    value: function updateField(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        'field.name': request.field.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.updateField(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `updateField()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkUpdateFieldProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n\n  }, {\n    key: \"checkUpdateFieldProgress\",\n    value: function () {\n      var _checkUpdateFieldProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name) {\n        var request, _yield$this$operation3, _yield$this$operation4, operation, decodeOperation;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n                  name: name\n                });\n                _context2.next = 3;\n                return this.operationsClient.getOperation(request);\n\n              case 3:\n                _yield$this$operation3 = _context2.sent;\n                _yield$this$operation4 = _slicedToArray(_yield$this$operation3, 1);\n                operation = _yield$this$operation4[0];\n                decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateField, gax.createDefaultBackoffSettings());\n                return _context2.abrupt(\"return\", decodeOperation);\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function checkUpdateFieldProgress(_x2) {\n        return _checkUpdateFieldProgress.apply(this, arguments);\n      }\n\n      return checkUpdateFieldProgress;\n    }()\n    /**\n     * Exports a copy of all or a subset of documents from Google Cloud Firestore\n     * to another storage system, such as Google Cloud Storage. Recent updates to\n     * documents may not be reflected in the export. The export occurs in the\n     * background and its progress can be monitored and managed via the\n     * Operation resource that is created. The output of an export may only be\n     * used once the associated operation is done. If an export operation is\n     * cancelled before completion it may leave partial data behind in Google\n     * Cloud Storage.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Database to export. Should be of the form:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.collectionIds\n     *   Which collection ids to export. Unspecified means all collections.\n     * @param {string} request.outputUriPrefix\n     *   The output URI. Currently only supports Google Cloud Storage URIs of the\n     *   form: `gs://BUCKET_NAME[/NAMESPACE_PATH]`, where `BUCKET_NAME` is the name\n     *   of the Google Cloud Storage bucket and `NAMESPACE_PATH` is an optional\n     *   Google Cloud Storage namespace path. When\n     *   choosing a name, be sure to consider Google Cloud Storage naming\n     *   guidelines: https://cloud.google.com/storage/docs/naming.\n     *   If the URI is a bucket (without a namespace path), a prefix will be\n     *   generated based on the start time.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.exportDocuments(request);\n     * const [response] = await operation.promise();\n     */\n\n  }, {\n    key: \"exportDocuments\",\n    value: function exportDocuments(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.exportDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `exportDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkExportDocumentsProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n\n  }, {\n    key: \"checkExportDocumentsProgress\",\n    value: function () {\n      var _checkExportDocumentsProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(name) {\n        var request, _yield$this$operation5, _yield$this$operation6, operation, decodeOperation;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n                  name: name\n                });\n                _context3.next = 3;\n                return this.operationsClient.getOperation(request);\n\n              case 3:\n                _yield$this$operation5 = _context3.sent;\n                _yield$this$operation6 = _slicedToArray(_yield$this$operation5, 1);\n                operation = _yield$this$operation6[0];\n                decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.exportDocuments, gax.createDefaultBackoffSettings());\n                return _context3.abrupt(\"return\", decodeOperation);\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function checkExportDocumentsProgress(_x3) {\n        return _checkExportDocumentsProgress.apply(this, arguments);\n      }\n\n      return checkExportDocumentsProgress;\n    }()\n    /**\n     * Imports documents into Google Cloud Firestore. Existing documents with the\n     * same name are overwritten. The import occurs in the background and its\n     * progress can be monitored and managed via the Operation resource that is\n     * created. If an ImportDocuments operation is cancelled, it is possible\n     * that a subset of the data has already been imported to Cloud Firestore.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Required. Database to import into. Should be of the form:\n     *   `projects/{project_id}/databases/{database_id}`.\n     * @param {string[]} request.collectionIds\n     *   Which collection ids to import. Unspecified means all collections included\n     *   in the import.\n     * @param {string} request.inputUriPrefix\n     *   Location of the exported files.\n     *   This must match the output_uri_prefix of an ExportDocumentsResponse from\n     *   an export that has completed successfully.\n     *   See:\n     *   {@link google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix|google.firestore.admin.v1.ExportDocumentsResponse.output_uri_prefix}.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     *   a long running operation. Its `promise()` method returns a promise\n     *   you can `await` for.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const [operation] = await client.importDocuments(request);\n     * const [response] = await operation.promise();\n     */\n\n  }, {\n    key: \"importDocuments\",\n    value: function importDocuments(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        name: request.name || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.importDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `importDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example\n     * const decodedOperation = await checkImportDocumentsProgress(name);\n     * console.log(decodedOperation.result);\n     * console.log(decodedOperation.done);\n     * console.log(decodedOperation.metadata);\n     */\n\n  }, {\n    key: \"checkImportDocumentsProgress\",\n    value: function () {\n      var _checkImportDocumentsProgress = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(name) {\n        var request, _yield$this$operation7, _yield$this$operation8, operation, decodeOperation;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({\n                  name: name\n                });\n                _context4.next = 3;\n                return this.operationsClient.getOperation(request);\n\n              case 3:\n                _yield$this$operation7 = _context4.sent;\n                _yield$this$operation8 = _slicedToArray(_yield$this$operation7, 1);\n                operation = _yield$this$operation8[0];\n                decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.importDocuments, gax.createDefaultBackoffSettings());\n                return _context4.abrupt(\"return\", decodeOperation);\n\n              case 8:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function checkImportDocumentsProgress(_x4) {\n        return _checkImportDocumentsProgress.apply(this, arguments);\n      }\n\n      return checkImportDocumentsProgress;\n    }()\n    /**\n     * Lists composite indexes.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Index]{@link google.firestore.admin.v1.Index}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listIndexesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n\n  }, {\n    key: \"listIndexes\",\n    value: function listIndexes(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.listIndexes(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Index]{@link google.firestore.admin.v1.Index} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listIndexesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n\n  }, {\n    key: \"listIndexesStream\",\n    value: function listIndexesStream(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);\n    }\n    /**\n     * Equivalent to `listIndexes`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Index]{@link google.firestore.admin.v1.Index}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listIndexesAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n\n  }, {\n    key: \"listIndexesAsync\",\n    value: function listIndexesAsync(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      options = options || {};\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls['listIndexes'], request, callSettings);\n    }\n    /**\n     * Lists the field configuration and metadata for this database.\n     *\n     * Currently, {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     * that have been explicitly overridden. To issue this query, call\n     * {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     * `indexConfig.usesAncestorConfig:false`.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is Array of [Field]{@link google.firestore.admin.v1.Field}.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed and will merge results from all the pages into this array.\n     *   Note that it can affect your quota.\n     *   We recommend using `listFieldsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n\n  }, {\n    key: \"listFields\",\n    value: function listFields(request, optionsOrCallback, callback) {\n      request = request || {};\n      var options;\n\n      if (typeof optionsOrCallback === 'function' && callback === undefined) {\n        callback = optionsOrCallback;\n        options = {};\n      } else {\n        options = optionsOrCallback;\n      }\n\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      this.initialize();\n      return this.innerApiCalls.listFields(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing [Field]{@link google.firestore.admin.v1.Field} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listFieldsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n\n  }, {\n    key: \"listFieldsStream\",\n    value: function listFieldsStream(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);\n    }\n    /**\n     * Equivalent to `listFields`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with the filter set to\n     *   `indexConfig.usesAncestorConfig:false`.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   [Field]{@link google.firestore.admin.v1.Field}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * const iterable = client.listFieldsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     */\n\n  }, {\n    key: \"listFieldsAsync\",\n    value: function listFieldsAsync(request, options) {\n      request = request || {};\n      options = options || {};\n      options.otherArgs = options.otherArgs || {};\n      options.otherArgs.headers = options.otherArgs.headers || {};\n      options.otherArgs.headers['x-goog-request-params'] = gax.routingHeader.fromParams({\n        parent: request.parent || ''\n      });\n      options = options || {};\n      var callSettings = new gax.CallSettings(options);\n      this.initialize();\n      return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls['listFields'], request, callSettings);\n    } // --------------------\n    // -- Path templates --\n    // --------------------\n\n    /**\n     * Return a fully-qualified collectionGroup resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @returns {string} Resource name string.\n     */\n\n  }, {\n    key: \"collectionGroupPath\",\n    value: function collectionGroupPath(project, database, collection) {\n      return this.pathTemplates.collectionGroupPathTemplate.render({\n        project: project,\n        database: database,\n        collection: collection\n      });\n    }\n    /**\n     * Parse the project from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the project.\n     */\n\n  }, {\n    key: \"matchProjectFromCollectionGroupName\",\n    value: function matchProjectFromCollectionGroupName(collectionGroupName) {\n      return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n    }\n    /**\n     * Parse the database from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the database.\n     */\n\n  }, {\n    key: \"matchDatabaseFromCollectionGroupName\",\n    value: function matchDatabaseFromCollectionGroupName(collectionGroupName) {\n      return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n    }\n    /**\n     * Parse the collection from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the collection.\n     */\n\n  }, {\n    key: \"matchCollectionFromCollectionGroupName\",\n    value: function matchCollectionFromCollectionGroupName(collectionGroupName) {\n      return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n    }\n    /**\n     * Return a fully-qualified database resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @returns {string} Resource name string.\n     */\n\n  }, {\n    key: \"databasePath\",\n    value: function databasePath(project, database) {\n      return this.pathTemplates.databasePathTemplate.render({\n        project: project,\n        database: database\n      });\n    }\n    /**\n     * Parse the project from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the project.\n     */\n\n  }, {\n    key: \"matchProjectFromDatabaseName\",\n    value: function matchProjectFromDatabaseName(databaseName) {\n      return this.pathTemplates.databasePathTemplate.match(databaseName).project;\n    }\n    /**\n     * Parse the database from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the database.\n     */\n\n  }, {\n    key: \"matchDatabaseFromDatabaseName\",\n    value: function matchDatabaseFromDatabaseName(databaseName) {\n      return this.pathTemplates.databasePathTemplate.match(databaseName).database;\n    }\n    /**\n     * Return a fully-qualified field resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} field\n     * @returns {string} Resource name string.\n     */\n\n  }, {\n    key: \"fieldPath\",\n    value: function fieldPath(project, database, collection, field) {\n      return this.pathTemplates.fieldPathTemplate.render({\n        project: project,\n        database: database,\n        collection: collection,\n        field: field\n      });\n    }\n    /**\n     * Parse the project from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the project.\n     */\n\n  }, {\n    key: \"matchProjectFromFieldName\",\n    value: function matchProjectFromFieldName(fieldName) {\n      return this.pathTemplates.fieldPathTemplate.match(fieldName).project;\n    }\n    /**\n     * Parse the database from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the database.\n     */\n\n  }, {\n    key: \"matchDatabaseFromFieldName\",\n    value: function matchDatabaseFromFieldName(fieldName) {\n      return this.pathTemplates.fieldPathTemplate.match(fieldName).database;\n    }\n    /**\n     * Parse the collection from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the collection.\n     */\n\n  }, {\n    key: \"matchCollectionFromFieldName\",\n    value: function matchCollectionFromFieldName(fieldName) {\n      return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;\n    }\n    /**\n     * Parse the field from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the field.\n     */\n\n  }, {\n    key: \"matchFieldFromFieldName\",\n    value: function matchFieldFromFieldName(fieldName) {\n      return this.pathTemplates.fieldPathTemplate.match(fieldName).field;\n    }\n    /**\n     * Return a fully-qualified index resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} index\n     * @returns {string} Resource name string.\n     */\n\n  }, {\n    key: \"indexPath\",\n    value: function indexPath(project, database, collection, index) {\n      return this.pathTemplates.indexPathTemplate.render({\n        project: project,\n        database: database,\n        collection: collection,\n        index: index\n      });\n    }\n    /**\n     * Parse the project from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the project.\n     */\n\n  }, {\n    key: \"matchProjectFromIndexName\",\n    value: function matchProjectFromIndexName(indexName) {\n      return this.pathTemplates.indexPathTemplate.match(indexName).project;\n    }\n    /**\n     * Parse the database from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the database.\n     */\n\n  }, {\n    key: \"matchDatabaseFromIndexName\",\n    value: function matchDatabaseFromIndexName(indexName) {\n      return this.pathTemplates.indexPathTemplate.match(indexName).database;\n    }\n    /**\n     * Parse the collection from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the collection.\n     */\n\n  }, {\n    key: \"matchCollectionFromIndexName\",\n    value: function matchCollectionFromIndexName(indexName) {\n      return this.pathTemplates.indexPathTemplate.match(indexName).collection;\n    }\n    /**\n     * Parse the index from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the index.\n     */\n\n  }, {\n    key: \"matchIndexFromIndexName\",\n    value: function matchIndexFromIndexName(indexName) {\n      return this.pathTemplates.indexPathTemplate.match(indexName).index;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _this2 = this;\n\n      this.initialize();\n\n      if (!this._terminated) {\n        return this.firestoreAdminStub.then(function (stub) {\n          _this2._terminated = true;\n          stub.close();\n        });\n      }\n\n      return Promise.resolve();\n    }\n  }], [{\n    key: \"servicePath\",\n    get: function get() {\n      return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n\n  }, {\n    key: \"apiEndpoint\",\n    get: function get() {\n      return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n\n  }, {\n    key: \"port\",\n    get: function get() {\n      return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n\n  }, {\n    key: \"scopes\",\n    get: function get() {\n      return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n    }\n  }]);\n\n  return FirestoreAdminClient;\n}();\n\nexports.FirestoreAdminClient = FirestoreAdminClient;","map":null,"metadata":{},"sourceType":"script"}