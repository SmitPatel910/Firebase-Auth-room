{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\Smit\\\\Desktop\\\\RTC-React\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BundleDescriptor = void 0;\n\nvar normalApiCaller_1 = require(\"../normalCalls/normalApiCaller\");\n\nvar bundleApiCaller_1 = require(\"./bundleApiCaller\");\n\nvar bundleExecutor_1 = require(\"./bundleExecutor\");\n\nvar util_1 = require(\"../util\");\n/**\n * A descriptor for calls that can be bundled into one call.\n */\n\n\nvar BundleDescriptor = /*#__PURE__*/function () {\n  /**\n   * Describes the structure of bundled call.\n   *\n   * requestDiscriminatorFields may include '.' as a separator, which is used to\n   * indicate object traversal. This allows fields in nested objects to be used\n   * to determine what request to bundle.\n   *\n   * @property {String} bundledField\n   * @property {String} requestDiscriminatorFields\n   * @property {String} subresponseField\n   * @property {Function} byteLengthFunction\n   *\n   * @param {String} bundledField - the repeated field in the request message\n   *   that will have its elements aggregated by bundling.\n   * @param {String} requestDiscriminatorFields - a list of fields in the\n   *   target request message class that are used to detemrine which request\n   *   messages should be bundled together.\n   * @param {String} subresponseField - an optional field, when present it\n   *   indicates the field in the response message that should be used to\n   *   demultiplex the response into multiple response messages.\n   * @param {Function} byteLengthFunction - a function to obtain the byte\n   *   length to be consumed for the bundled field messages. Because Node.JS\n   *   protobuf.js/gRPC uses builtin Objects for the user-visible data and\n   *   internally they are encoded/decoded in protobuf manner, this function\n   *   is actually necessary to calculate the byte length.\n   * @constructor\n   */\n  function BundleDescriptor(bundledField, requestDiscriminatorFields, subresponseField, byteLengthFunction) {\n    _classCallCheck(this, BundleDescriptor);\n\n    if (!byteLengthFunction && typeof subresponseField === 'function') {\n      byteLengthFunction = subresponseField;\n      subresponseField = null;\n    }\n\n    this.bundledField = bundledField;\n    this.requestDiscriminatorFields = requestDiscriminatorFields.map(util_1.snakeToCamelCase);\n    this.subresponseField = subresponseField;\n    this.byteLengthFunction = byteLengthFunction;\n  }\n\n  _createClass(BundleDescriptor, [{\n    key: \"getApiCaller\",\n    value: function getApiCaller(settings) {\n      if (settings.isBundling === false) {\n        return new normalApiCaller_1.NormalApiCaller();\n      }\n\n      return new bundleApiCaller_1.BundleApiCaller(new bundleExecutor_1.BundleExecutor(settings.bundleOptions, this));\n    }\n  }]);\n\n  return BundleDescriptor;\n}();\n\nexports.BundleDescriptor = BundleDescriptor;","map":null,"metadata":{},"sourceType":"script"}