{"ast":null,"code":"var _encode;\n\nvar encodeBuffer;\n\nif (Buffer.isEncoding('base64url')) {\n  _encode = function encode(input) {\n    var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n    return Buffer.from(input, encoding).toString('base64url');\n  };\n\n  encodeBuffer = function encodeBuffer(buf) {\n    return buf.toString('base64url');\n  };\n} else {\n  var fromBase64 = function fromBase64(base64) {\n    return base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n  };\n\n  _encode = function encode(input) {\n    var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n    return fromBase64(Buffer.from(input, encoding).toString('base64'));\n  };\n\n  encodeBuffer = function encodeBuffer(buf) {\n    return fromBase64(buf.toString('base64'));\n  };\n}\n\nvar decodeToBuffer = function decodeToBuffer(input) {\n  return Buffer.from(input, 'base64');\n};\n\nvar _decode = function decode(input) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n  return decodeToBuffer(input).toString(encoding);\n};\n\nvar b64uJSON = {\n  encode: function encode(input) {\n    return _encode(JSON.stringify(input));\n  },\n  decode: function decode(input) {\n    var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n    return JSON.parse(_decode(input, encoding));\n  }\n};\n\nb64uJSON.decode.try = function (input) {\n  var encoding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'utf8';\n\n  try {\n    return b64uJSON.decode(input, encoding);\n  } catch (err) {\n    return _decode(input, encoding);\n  }\n};\n\nvar bnToBuf = function bnToBuf(bn) {\n  var hex = BigInt(bn).toString(16);\n\n  if (hex.length % 2) {\n    hex = \"0\".concat(hex);\n  }\n\n  var len = hex.length / 2;\n  var u8 = new Uint8Array(len);\n  var i = 0;\n  var j = 0;\n\n  while (i < len) {\n    u8[i] = parseInt(hex.slice(j, j + 2), 16);\n    i += 1;\n    j += 2;\n  }\n\n  return u8;\n};\n\nvar encodeBigInt = function encodeBigInt(bn) {\n  return encodeBuffer(Buffer.from(bnToBuf(bn)));\n};\n\nmodule.exports.decode = _decode;\nmodule.exports.decodeToBuffer = decodeToBuffer;\nmodule.exports.encode = _encode;\nmodule.exports.encodeBuffer = encodeBuffer;\nmodule.exports.JSON = b64uJSON;\nmodule.exports.encodeBigInt = encodeBigInt;","map":null,"metadata":{},"sourceType":"script"}